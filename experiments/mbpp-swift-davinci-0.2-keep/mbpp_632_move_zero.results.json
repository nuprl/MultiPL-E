{
  "name": "mbpp_632_move_zero",
  "language": "swift",
  "prompt": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] == 0 {\n            j = i\n            while j < num_list.count - 1 {\n                num_list[j] = num_list[j + 1]\n                j += 1\n            }\n            num_list[j] = 0\n        }\n        i += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "tmpg10j8dm4/tmpg10j8dm4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3296f91c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3296c88b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3296c88988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3296c877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg10j8dm4                        0x000055d6a8b20683 <unavailable> + 5763\n5    libc.so.6                          0x00002b329717d460 __libc_start_main + 245\n6    tmpg10j8dm4                        0x000055d6a8b200c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var zero_list = [Int]()\n    var non_zero_list = [Int]()\n    for num in num_list {\n        if num == 0 {\n            zero_list.append(num)\n        } else {\n            non_zero_list.append(num)\n        }\n    }\n    return non_zero_list + zero_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_index = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list.swapAt(i, zero_index)\n            zero_index += 1\n        }\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = num_list.count - 1\n    while i < j {\n        if num_list[i] == 0 {\n            num_list.append(num_list.remove(at: i))\n            j -= 1\n        } else {\n            i += 1\n        }\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var result = [Int]()\n    var zero_count = 0\n    for num in num_list {\n        if num == 0 {\n            zero_count += 1\n        } else {\n            result.append(num)\n        }\n    }\n    for _ in 0..<zero_count {\n        result.append(0)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] == 0 {\n            j = i\n            while j < num_list.count - 1 {\n                num_list[j] = num_list[j + 1]\n                j += 1\n            }\n            num_list[j] = 0\n        }\n        i += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "tmpg10j8dm4/tmpg10j8dm4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3296f91c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3296c88b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3296c88988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3296c877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg10j8dm4                        0x000055d6a8b20683 <unavailable> + 5763\n5    libc.so.6                          0x00002b329717d460 __libc_start_main + 245\n6    tmpg10j8dm4                        0x000055d6a8b200c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    var index = 0\n    while index < num_list.count {\n        if num_list[index] == 0 {\n            zero_count += 1\n            num_list.remove(at: index)\n        } else {\n            index += 1\n        }\n    }\n    for _ in 0..<zero_count {\n        num_list.append(0)\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - i - 1] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - i - 1] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            num_list.remove(at: i)\n            zero_count += 1\n        }\n    }\n    for _ in 0..<zero_count {\n        num_list.append(0)\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3adcb61c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3adc858561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3adc858286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3adc85813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3adc857bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b3adc658e83 <unavailable> + 188035\n6    tmpwj_1aasr                        0x000056492c475ba3 <unavailable> + 7075\n7    tmpwj_1aasr                        0x000056492c4755ec <unavailable> + 5612\n8    libc.so.6                          0x00002b3adcd4d460 __libc_start_main + 245\n9    tmpwj_1aasr                        0x000056492c4752b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - i - 1] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - i - 1] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n            num_list.remove(at: i)\n            i -= 1\n        }\n    }\n    for _ in 0..<zero_count {\n        num_list.append(0)\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "/tmp/tmpcm8zbr5l.swift:10:15: error: left side of mutating operator isn't mutable: 'i' is a 'let' constant\n            i -= 1\n            ~ ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list.swapAt(i, j)\n            j += 1\n        }\n        i += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n            num_list.remove(at: i)\n            num_list.append(0)\n        }\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "tmpe4tsk1tt/tmpe4tsk1tt.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b684c0dfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b684bdd6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b684bdd6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b684bdd57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4tsk1tt                        0x0000563125b09873 <unavailable> + 6259\n5    libc.so.6                          0x00002b684c2cb460 __libc_start_main + 245\n6    tmpe4tsk1tt                        0x0000563125b092b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - i - 1] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for (index, num) in num_list.enumerated() {\n        if num == 0 {\n            zero_count += 1\n            num_list.remove(at: index)\n        }\n    }\n    for _ in 0..<zero_count {\n        num_list.append(0)\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "tmpors7b221/tmpors7b221.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7e142f6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7e13fedb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7e13fed988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7e13fec7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpors7b221                        0x00005581bb63f844 <unavailable> + 6212\n5    libc.so.6                          0x00002b7e144e2460 __libc_start_main + 245\n6    tmpors7b221                        0x00005581bb63f419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    var index = 0\n    while index < num_list.count {\n        if num_list[index] == 0 {\n            num_list.remove(at: index)\n            zero_count += 1\n        } else {\n            index += 1\n        }\n    }\n    for _ in 0..<zero_count {\n        num_list.append(0)\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] == 0 {\n            j = i\n            while j < num_list.count - 1 {\n                num_list[j] = num_list[j + 1]\n                j += 1\n            }\n            num_list[j] = 0\n        }\n        i += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "tmpg10j8dm4/tmpg10j8dm4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3296f91c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3296c88b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3296c88988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3296c877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg10j8dm4                        0x000055d6a8b20683 <unavailable> + 5763\n5    libc.so.6                          0x00002b329717d460 __libc_start_main + 245\n6    tmpg10j8dm4                        0x000055d6a8b200c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = num_list.count - 1\n    while i < j {\n        if num_list[i] == 0 {\n            num_list.remove(at: i)\n            num_list.append(0)\n            j -= 1\n        } else {\n            i += 1\n        }\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n            num_list.remove(at: i)\n            num_list.append(0)\n        }\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "tmpe4tsk1tt/tmpe4tsk1tt.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b684c0dfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b684bdd6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b684bdd6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b684bdd57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4tsk1tt                        0x0000563125b09873 <unavailable> + 6259\n5    libc.so.6                          0x00002b684c2cb460 __libc_start_main + 245\n6    tmpe4tsk1tt                        0x0000563125b092b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var result = [Int]()\n    var zero_list = [Int]()\n    for num in num_list {\n        if num == 0 {\n            zero_list.append(num)\n        } else {\n            result.append(num)\n        }\n    }\n    result.append(contentsOf: zero_list)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var result = [Int]()\n    var zero_list = [Int]()\n    for num in num_list {\n        if num == 0 {\n            zero_list.append(num)\n        } else {\n            result.append(num)\n        }\n    }\n    result.append(contentsOf: zero_list)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n            num_list.remove(at: i)\n            num_list.append(0)\n        }\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "tmpe4tsk1tt/tmpe4tsk1tt.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b684c0dfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b684bdd6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b684bdd6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b684bdd57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4tsk1tt                        0x0000563125b09873 <unavailable> + 6259\n5    libc.so.6                          0x00002b684c2cb460 __libc_start_main + 245\n6    tmpe4tsk1tt                        0x0000563125b092b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        }\n    }\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            num_list.remove(at: i)\n            num_list.append(0)\n        }\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "tmp_ms3y6w5/tmp_ms3y6w5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b50ba1b0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b50b9ea7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b50b9ea7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b50b9ea67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_ms3y6w5                        0x000055d2883b3873 <unavailable> + 6259\n5    libc.so.6                          0x00002b50ba39c460 __libc_start_main + 245\n6    tmp_ms3y6w5                        0x000055d2883b32b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n            num_list.remove(at: i)\n            num_list.append(0)\n        }\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "tmpe4tsk1tt/tmpe4tsk1tt.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b684c0dfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b684bdd6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b684bdd6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b684bdd57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4tsk1tt                        0x0000563125b09873 <unavailable> + 6259\n5    libc.so.6                          0x00002b684c2cb460 __libc_start_main + 245\n6    tmpe4tsk1tt                        0x0000563125b092b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - i - 1] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var index = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[index] = num_list[i]\n            index += 1\n        }\n    }\n    for i in index..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var result = num_list\n    var count = 0\n    for i in 0..<result.count {\n        if result[i] != 0 {\n            result[count] = result[i]\n            count += 1\n        }\n    }\n    while count < result.count {\n        result[count] = 0\n        count += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - i - 1] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_index = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list.swapAt(i, zero_index)\n            zero_index += 1\n        }\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count && j < num_list.count {\n        if num_list[i] == 0 {\n            i += 1\n        } else if num_list[j] != 0 {\n            j += 1\n        } else {\n            num_list.swapAt(i, j)\n            i += 1\n            j += 1\n        }\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "tmpsgail3lu/tmpsgail3lu.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2d2dbe1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2d2d8d8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2d2d8d8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2d2d8d77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsgail3lu                        0x0000559ae7dbc544 <unavailable> + 5444\n5    libc.so.6                          0x00002b2d2ddcd460 __libc_start_main + 245\n6    tmpsgail3lu                        0x0000559ae7dbc119 <unavailable> + 4377\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    var index = 0\n    while index < num_list.count {\n        if num_list[index] == 0 {\n            num_list.remove(at: index)\n            zero_count += 1\n        } else {\n            index += 1\n        }\n    }\n    for _ in 0..<zero_count {\n        num_list.append(0)\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var new_list = num_list\n    var i = 0\n    var j = 0\n    while i < new_list.count {\n        if new_list[i] != 0 {\n            new_list[j] = new_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < new_list.count {\n        new_list[j] = 0\n        j += 1\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    var index = 0\n    while index < num_list.count {\n        if num_list[index] == 0 {\n            num_list.remove(at: index)\n            zero_count += 1\n        } else {\n            index += 1\n        }\n    }\n    for _ in 0..<zero_count {\n        num_list.append(0)\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var result: [Int] = []\n    var zero_list: [Int] = []\n    for num in num_list {\n        if num == 0 {\n            zero_list.append(num)\n        } else {\n            result.append(num)\n        }\n    }\n    result.append(contentsOf: zero_list)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var result = num_list\n    var zero_count = 0\n    for i in 0..<result.count {\n        if result[i] == 0 {\n            zero_count += 1\n        } else {\n            result[i - zero_count] = result[i]\n        }\n    }\n    for i in (result.count - zero_count)..<result.count {\n        result[i] = 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else if zero_count > 0 {\n            num_list[i - zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] == 0 {\n            j = i\n            while j < num_list.count - 1 {\n                num_list[j] = num_list[j + 1]\n                j += 1\n            }\n            num_list[j] = 0\n        }\n        i += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "tmpg10j8dm4/tmpg10j8dm4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3296f91c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3296c88b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3296c88988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3296c877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg10j8dm4                        0x000055d6a8b20683 <unavailable> + 5763\n5    libc.so.6                          0x00002b329717d460 __libc_start_main + 245\n6    tmpg10j8dm4                        0x000055d6a8b200c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list.swapAt(i, j)\n            j += 1\n        }\n        i += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    var index = 0\n    while index < num_list.count {\n        if num_list[index] == 0 {\n            num_list.remove(at: index)\n            zero_count += 1\n        } else {\n            index += 1\n        }\n    }\n    for _ in 0..<zero_count {\n        num_list.append(0)\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var result = [Int]()\n    var zero_list = [Int]()\n    for num in num_list {\n        if num == 0 {\n            zero_list.append(num)\n        } else {\n            result.append(num)\n        }\n    }\n    result.append(contentsOf: zero_list)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - i - 1] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - i - 1] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            num_list.remove(at: i)\n            zero_count += 1\n        }\n    }\n    for _ in 0..<zero_count {\n        num_list.append(0)\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3adcb61c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3adc858561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3adc858286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3adc85813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3adc857bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b3adc658e83 <unavailable> + 188035\n6    tmpwj_1aasr                        0x000056492c475ba3 <unavailable> + 7075\n7    tmpwj_1aasr                        0x000056492c4755ec <unavailable> + 5612\n8    libc.so.6                          0x00002b3adcd4d460 __libc_start_main + 245\n9    tmpwj_1aasr                        0x000056492c4752b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    var i = 0\n    while i < num_list.count {\n        if num_list[i] == 0 {\n            num_list.remove(at: i)\n            zero_count += 1\n        } else {\n            i += 1\n        }\n    }\n    for _ in 0..<zero_count {\n        num_list.append(0)\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count-zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - i - 1] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var new_list = num_list\n    var zero_count = 0\n    for i in 0..<new_list.count {\n        if new_list[i] == 0 {\n            zero_count += 1\n        } else {\n            new_list[i - zero_count] = new_list[i]\n        }\n    }\n    for i in (new_list.count - zero_count)..<new_list.count {\n        new_list[i] = 0\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        }\n    }\n    var i = 0\n    while i < num_list.count {\n        if num_list[i] == 0 {\n            num_list.remove(at: i)\n            num_list.append(0)\n        } else {\n            i += 1\n        }\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123889,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    var i = 0\n    while i < num_list.count {\n        if num_list[i] == 0 {\n            num_list.remove(at: i)\n            zero_count += 1\n        } else {\n            i += 1\n        }\n    }\n    for _ in 0..<zero_count {\n        num_list.append(0)\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - i - 1] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] == 0 {\n            i += 1\n        } else {\n            num_list[j] = num_list[i]\n            i += 1\n            j += 1\n        }\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_index = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list.swapAt(i, zero_index)\n            zero_index += 1\n        }\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] != 0 {\n            num_list[count] = num_list[i]\n            count += 1\n        }\n    }\n    while count < num_list.count {\n        num_list[count] = 0\n        count += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var result = [Int]()\n    var zero_list = [Int]()\n    for num in num_list {\n        if num == 0 {\n            zero_list.append(num)\n        } else {\n            result.append(num)\n        }\n    }\n    result.append(contentsOf: zero_list)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var result = [Int]()\n    var zero_list = [Int]()\n    for num in num_list {\n        if num == 0 {\n            zero_list.append(num)\n        } else {\n            result.append(num)\n        }\n    }\n    result.append(contentsOf: zero_list)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - i - 1] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count-zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var i = 0\n    var j = 0\n    while i < num_list.count {\n        if num_list[i] != 0 {\n            num_list[j] = num_list[i]\n            j += 1\n        }\n        i += 1\n    }\n    while j < num_list.count {\n        num_list[j] = 0\n        j += 1\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - i - 1] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in 0..<zero_count {\n        num_list[num_list.count - 1 - i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for (index, num) in num_list.enumerated() {\n        if num == 0 {\n            zero_count += 1\n            num_list.remove(at: index)\n        }\n    }\n    for _ in 0..<zero_count {\n        num_list.append(0)\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123884,
      "stdout": "",
      "stderr": "tmpors7b221/tmpors7b221.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7e142f6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7e13fedb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7e13fed988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7e13fec7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpors7b221                        0x00005581bb63f844 <unavailable> + 6212\n5    libc.so.6                          0x00002b7e144e2460 __libc_start_main + 245\n6    tmpors7b221                        0x00005581bb63f419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var new_list = [Int]()\n    for num in num_list {\n        if num != 0 {\n            new_list.append(num)\n        }\n    }\n    for _ in 0..<num_list.count - new_list.count {\n        new_list.append(0)\n    }\n    return new_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to move all zeroes to the end of the given list.\nfunc move_zero(num_list: [Int]) -> [Int] {\n    var num_list = num_list\n    var zero_count = 0\n    for i in 0..<num_list.count {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i in (num_list.count - zero_count)..<num_list.count {\n        num_list[i] = 0\n    }\n    return num_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(move_zero(num_list: [1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0])\nassert(move_zero(num_list: [2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0])\nassert(move_zero(num_list: [0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0])",
      "timestamp": 1665510510,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}