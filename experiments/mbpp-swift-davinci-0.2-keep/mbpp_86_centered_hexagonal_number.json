{
  "name": "mbpp_86_centered_hexagonal_number",
  "language": "swift",
  "prompt": "\n/// Write a function to find nth centered hexagonal number.\nfunc centered_hexagonal_number(n: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(centered_hexagonal_number(n: 10) == 271)\nassert(centered_hexagonal_number(n: 2) == 7)\nassert(centered_hexagonal_number(n: 9) == 217)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return 3 * n * (n - 1) + 1",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return 3 * n * (n - 1) + 1",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)"
  ]
}