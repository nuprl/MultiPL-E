{
  "name": "mbpp_558_digit_distance_nums",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "tmp3zykdooq/tmp3zykdooq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19155fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19152f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19152f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19152f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3zykdooq                        0x00005587ed09b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19157e7460 __libc_start_main + 245\n6    tmp3zykdooq                        0x00005587ed09afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = Array(String(n1)).map { Int(String($0))! }\n    let n2_digits = Array(String(n2)).map { Int(String($0))! }\n    var sum = 0\n    for i in 0..<max(n1_digits.count, n2_digits.count) {\n        let n1_digit = i < n1_digits.count ? n1_digits[i] : 0\n        let n2_digit = i < n2_digits.count ? n2_digits[i] : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<max(n1_str.count, n2_str.count) {\n        let n1_digit = n1_str.count > i ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = n2_str.count > i ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = Array(String(n1)).map { Int(String($0))! }\n    let n2_digits = Array(String(n2)).map { Int(String($0))! }\n    var sum = 0\n    for i in 0..<n1_digits.count {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "tmp3zykdooq/tmp3zykdooq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19155fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19152f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19152f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19152f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3zykdooq                        0x00005587ed09b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19157e7460 __libc_start_main + 245\n6    tmp3zykdooq                        0x00005587ed09afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var num1 = n1\n    var num2 = n2\n    while num1 > 0 || num2 > 0 {\n        let digit1 = num1 % 10\n        let digit2 = num2 % 10\n        sum += abs(digit1 - digit2)\n        num1 /= 10\n        num2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = Array(String(n1)).map { Int(String($0))! }\n    let n2_digits = Array(String(n2)).map { Int(String($0))! }\n    var sum = 0\n    for i in 0..<n1_digits.count {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "tmp3zykdooq/tmp3zykdooq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19155fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19152f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19152f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19152f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3zykdooq                        0x00005587ed09b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19157e7460 __libc_start_main + 245\n6    tmp3zykdooq                        0x00005587ed09afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    let n1_digits = n1_str.compactMap { Int(String($0)) }\n    let n2_digits = n2_str.compactMap { Int(String($0)) }\n    var sum = 0\n    for i in 0..<n1_digits.count {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "tmp3zykdooq/tmp3zykdooq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19155fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19152f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19152f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19152f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3zykdooq                        0x00005587ed09b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19157e7460 __libc_start_main + 245\n6    tmp3zykdooq                        0x00005587ed09afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "tmp3zykdooq/tmp3zykdooq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19155fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19152f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19152f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19152f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3zykdooq                        0x00005587ed09b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19157e7460 __libc_start_main + 245\n6    tmp3zykdooq                        0x00005587ed09afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - (n2 % 10))\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n2 % 10 - (n1 % 10))\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmpbjghopdj/tmpbjghopdj.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae85b9dfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae85b6d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae85b6d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae85b6d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbjghopdj                        0x000055f08228133a <unavailable> + 4922\n5    libc.so.6                          0x00002ae85bbcb460 __libc_start_main + 245\n6    tmpbjghopdj                        0x000055f082280fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmpmzkdfazr/tmpmzkdfazr.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b757c721c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b757c418b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b757c418988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b757c4177b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmzkdfazr                        0x000055a3f9e9c24a <unavailable> + 4682\n5    libc.so.6                          0x00002b757c90d460 __libc_start_main + 245\n6    tmpmzkdfazr                        0x000055a3f9e9bef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<max(n1_str.count, n2_str.count) {\n        let n1_digit = n1_str.count > i ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = n2_str.count > i ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - (n2 % 10))\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - (n2 % 10))\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmpoybqyf39/tmpoybqyf39.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b94cec5cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b94ce953b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b94ce953988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b94ce9527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoybqyf39                        0x000056284ec4733a <unavailable> + 4922\n5    libc.so.6                          0x00002b94cee48460 __libc_start_main + 245\n6    tmpoybqyf39                        0x000056284ec46fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1 = String(n1)\n    let n2 = String(n2)\n    for i in 0..<n1.count {\n        let n1_digit = Int(String(n1[n1.index(n1.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2[n2.index(n2.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    let n1_len = n1_str.count\n    let n2_len = n2_str.count\n    let len = max(n1_len, n2_len)\n    for i in 0..<len {\n        let n1_digit = i < n1_len ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = i < n2_len ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    let n1_len = n1_str.count\n    let n2_len = n2_str.count\n    let len = max(n1_len, n2_len)\n    for i in 0..<len {\n        let n1_digit = i < n1_len ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = i < n2_len ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "tmp3zykdooq/tmp3zykdooq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19155fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19152f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19152f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19152f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3zykdooq                        0x00005587ed09b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19157e7460 __libc_start_main + 245\n6    tmp3zykdooq                        0x00005587ed09afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1, n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "tmp3zykdooq/tmp3zykdooq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19155fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19152f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19152f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19152f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3zykdooq                        0x00005587ed09b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19157e7460 __libc_start_main + 245\n6    tmp3zykdooq                        0x00005587ed09afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmpmzkdfazr/tmpmzkdfazr.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b757c721c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b757c418b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b757c418988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b757c4177b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmzkdfazr                        0x000055a3f9e9c24a <unavailable> + 4682\n5    libc.so.6                          0x00002b757c90d460 __libc_start_main + 245\n6    tmpmzkdfazr                        0x000055a3f9e9bef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    let diffs = zip(n1_digits, n2_digits).map { abs($0 - $1) }\n    return diffs.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpga9jgqwl.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpga9jgqwl.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpga9jgqwl.swift:7:24: error: extraneous argument label 'combine:' in call\n    return diffs.reduce(0, combine: +)\n                       ^   ~~~~~~~~~\n                           \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "tmp3zykdooq/tmp3zykdooq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19155fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19152f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19152f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19152f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3zykdooq                        0x00005587ed09b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19157e7460 __libc_start_main + 245\n6    tmp3zykdooq                        0x00005587ed09afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    let max_len = max(n1_str.count, n2_str.count)\n    for i in 0..<max_len {\n        let n1_digit = n1_str.count > i ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = n2_str.count > i ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    let n1_digits_count = n1_digits.count\n    let n2_digits_count = n2_digits.count\n    let max_digits_count = max(n1_digits_count, n2_digits_count)\n    var sum = 0\n    for i in 0..<max_digits_count {\n        let n1_digit = i < n1_digits_count ? n1_digits[i] : 0\n        let n2_digit = i < n2_digits_count ? n2_digits[i] : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpx4umr7fi.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpx4umr7fi.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    var sum = 0\n    for i in 0..<n1_digits.count {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpduyu2_nl.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpduyu2_nl.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = Array(String(n1)).map { Int(String($0))! }\n    let n2_digits = Array(String(n2)).map { Int(String($0))! }\n    let diffs = zip(n1_digits, n2_digits).map { abs($0 - $1) }\n    return diffs.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmp6tcg6cy9.swift:7:24: error: extraneous argument label 'combine:' in call\n    return diffs.reduce(0, combine: +)\n                       ^   ~~~~~~~~~\n                           \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        } else {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmp1rwy74ee/tmp1rwy74ee.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab5d5487c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab5d517eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab5d517e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab5d517d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1rwy74ee                        0x0000558f13d2833a <unavailable> + 4922\n5    libc.so.6                          0x00002ab5d5673460 __libc_start_main + 245\n6    tmp1rwy74ee                        0x0000558f13d27fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    var sum = 0\n    for i in 0..<n1_digits.count {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpduyu2_nl.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpduyu2_nl.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    for i in 0..<max(String(n1).count, String(n2).count) {\n        let d1 = Int(String(n1).get(i) ?? \"0\") ?? 0\n        let d2 = Int(String(n2).get(i) ?? \"0\") ?? 0\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmp4g3shr1q.swift:6:33: error: value of type 'String' has no member 'get'\n        let d1 = Int(String(n1).get(i) ?? \"0\") ?? 0\n                     ~~~~~~~~~~ ^~~\n/tmp/tmp4g3shr1q.swift:7:33: error: value of type 'String' has no member 'get'\n        let d2 = Int(String(n2).get(i) ?? \"0\") ?? 0\n                     ~~~~~~~~~~ ^~~\n/tmp/tmp4g3shr1q.swift:8:23: error: cannot convert value of type 'Duration' to expected argument type 'Int'\n        sum += abs(d1 - d2)\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    for i in 0..<max(n1_digits.count, n2_digits.count) {\n        let n1_digit = i < n1_digits.count ? n1_digits[i] : 0\n        let n2_digit = i < n2_digits.count ? n2_digits[i] : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpgse82mqu.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpgse82mqu.swift:6:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    let n1_len = n1_str.count\n    let n2_len = n2_str.count\n    let max_len = max(n1_len, n2_len)\n    var sum = 0\n    for i in 0..<max_len {\n        let n1_char = i < n1_len ? n1_str[i] : \"0\"\n        let n2_char = i < n2_len ? n2_str[i] : \"0\"\n        let n1_digit = Int(String(n1_char))!\n        let n2_digit = Int(String(n2_char))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmp2da_h9hj.swift:11:36: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        let n1_char = i < n1_len ? n1_str[i] : \"0\"\n                                   ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2da_h9hj.swift:12:36: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        let n2_char = i < n2_len ? n2_str[i] : \"0\"\n                                   ^~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = Array(String(n1)).map { Int(String($0))! }\n    let n2_digits = Array(String(n2)).map { Int(String($0))! }\n    var sum = 0\n    for i in 0..<n1_digits.count {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmpmzkdfazr/tmpmzkdfazr.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b757c721c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b757c418b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b757c418988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b757c4177b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmzkdfazr                        0x000055a3f9e9c24a <unavailable> + 4682\n5    libc.so.6                          0x00002b757c90d460 __libc_start_main + 245\n6    tmpmzkdfazr                        0x000055a3f9e9bef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    for i in 0..<n1_digits.count {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpb6uiaotw.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpb6uiaotw.swift:6:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - (n2 % 10))\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - (n2 % 10))\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmpoybqyf39/tmpoybqyf39.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b94cec5cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b94ce953b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b94ce953988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b94ce9527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoybqyf39                        0x000056284ec4733a <unavailable> + 4922\n5    libc.so.6                          0x00002b94cee48460 __libc_start_main + 245\n6    tmpoybqyf39                        0x000056284ec46fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    let n1_len = n1_str.count\n    let n2_len = n2_str.count\n    var sum = 0\n    let max_len = max(n1_len, n2_len)\n    for i in 0..<max_len {\n        let n1_digit = i < n1_len ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = i < n2_len ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    let n1_len = n1_str.count\n    let n2_len = n2_str.count\n    let min_len = min(n1_len, n2_len)\n    var sum = 0\n    for i in 0..<min_len {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    if n1_len > min_len {\n        for i in min_len..<n1_len {\n            let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n            sum += n1_digit\n        }\n    }\n    if n2_len > min_len {\n        for i in min_len..<n2_len {\n            let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n            sum += n2_digit\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs((n1 % 10) - (n2 % 10))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmpfr8tll5d/tmpfr8tll5d.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8377102c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8376df9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8376df9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8376df87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfr8tll5d                        0x0000559158b8a33a <unavailable> + 4922\n5    libc.so.6                          0x00002b83772ee460 __libc_start_main + 245\n6    tmpfr8tll5d                        0x0000559158b89fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    var sum = 0\n    for i in 0..<max(n1_digits.count, n2_digits.count) {\n        let n1_digit = i < n1_digits.count ? n1_digits[i] : 0\n        let n2_digit = i < n2_digits.count ? n2_digits[i] : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmph7zwdi4i.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmph7zwdi4i.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    let diffs = zip(n1_digits, n2_digits).map { abs($0 - $1) }\n    return diffs.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpga9jgqwl.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpga9jgqwl.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpga9jgqwl.swift:7:24: error: extraneous argument label 'combine:' in call\n    return diffs.reduce(0, combine: +)\n                       ^   ~~~~~~~~~\n                           \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        sum += abs((n1 % 10) - (n2 % 10))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    let n1_len = n1_str.count\n    let n2_len = n2_str.count\n    let len = max(n1_len, n2_len)\n    for i in 0..<len {\n        let n1_digit = i < n1_len ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = i < n2_len ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs((n1 % 10) - (n2 % 10))\n            n1 /= 10\n        } else {\n            sum += abs((n1 % 10) - (n2 % 10))\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmpqq70uy2g/tmpqq70uy2g.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1584fe8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1584cdfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1584cdf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1584cde7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqq70uy2g                        0x000055625367633a <unavailable> + 4922\n5    libc.so.6                          0x00002b15851d4460 __libc_start_main + 245\n6    tmpqq70uy2g                        0x0000556253675fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<max(n1_str.count, n2_str.count) {\n        let n1_digit = n1_str.count > i ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = n2_str.count > i ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = Array(String(n1)).map { Int(String($0))! }\n    let n2_digits = Array(String(n2)).map { Int(String($0))! }\n    var sum = 0\n    for i in 0..<n1_digits.count {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = n1.digits\n    let n2_digits = n2.digits\n    let n1_digits_count = n1_digits.count\n    let n2_digits_count = n2_digits.count\n    let max_digits_count = max(n1_digits_count, n2_digits_count)\n    var sum = 0\n    for i in 0..<max_digits_count {\n        let n1_digit = i < n1_digits_count ? n1_digits[i] : 0\n        let n2_digit = i < n2_digits_count ? n2_digits[i] : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpn0hlfltc.swift:4:24: error: value of type 'Int' has no member 'digits'\n    let n1_digits = n1.digits\n                    ~~ ^~~~~~\n/tmp/tmpn0hlfltc.swift:5:24: error: value of type 'Int' has no member 'digits'\n    let n2_digits = n2.digits\n                    ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    let diffs = zip(n1_digits, n2_digits).map { abs($0 - $1) }\n    return diffs.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpga9jgqwl.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpga9jgqwl.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpga9jgqwl.swift:7:24: error: extraneous argument label 'combine:' in call\n    return diffs.reduce(0, combine: +)\n                       ^   ~~~~~~~~~\n                           \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmpmzkdfazr/tmpmzkdfazr.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b757c721c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b757c418b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b757c418988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b757c4177b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmzkdfazr                        0x000055a3f9e9c24a <unavailable> + 4682\n5    libc.so.6                          0x00002b757c90d460 __libc_start_main + 245\n6    tmpmzkdfazr                        0x000055a3f9e9bef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    let n1_len = n1_str.count\n    let n2_len = n2_str.count\n    let len = max(n1_len, n2_len)\n    for i in 0..<len {\n        let n1_digit = i < n1_len ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = i < n2_len ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs((n1 % 10) - (n2 % 10))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "tmp3zykdooq/tmp3zykdooq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19155fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19152f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19152f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19152f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3zykdooq                        0x00005587ed09b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19157e7460 __libc_start_main + 245\n6    tmp3zykdooq                        0x00005587ed09afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let d1 = String(n1).characters.map { Int(String($0))! }\n    let d2 = String(n2).characters.map { Int(String($0))! }\n    let diff = zip(d1, d2).map { abs($0 - $1) }\n    return diff.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpwielcvj0.swift:4:25: error: 'characters' is unavailable: Please use String directly\n    let d1 = String(n1).characters.map { Int(String($0))! }\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwielcvj0.swift:5:25: error: 'characters' is unavailable: Please use String directly\n    let d2 = String(n2).characters.map { Int(String($0))! }\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwielcvj0.swift:7:23: error: extraneous argument label 'combine:' in call\n    return diff.reduce(0, combine: +)\n                      ^   ~~~~~~~~~\n                          \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    \n    let max_len = max(n1_digits.count, n2_digits.count)\n    \n    var sum = 0\n    for i in 0..<max_len {\n        let n1_digit = i < n1_digits.count ? n1_digits[i] : 0\n        let n2_digit = i < n2_digits.count ? n2_digits[i] : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmp5xt50vl1.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5xt50vl1.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmpmzkdfazr/tmpmzkdfazr.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b757c721c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b757c418b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b757c418988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b757c4177b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmzkdfazr                        0x000055a3f9e9c24a <unavailable> + 4682\n5    libc.so.6                          0x00002b757c90d460 __libc_start_main + 245\n6    tmpmzkdfazr                        0x000055a3f9e9bef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "tmp3zykdooq/tmp3zykdooq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19155fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19152f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19152f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19152f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3zykdooq                        0x00005587ed09b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19157e7460 __libc_start_main + 245\n6    tmp3zykdooq                        0x00005587ed09afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = Array(String(n1)).map { Int(String($0))! }\n    let n2_digits = Array(String(n2)).map { Int(String($0))! }\n    var sum = 0\n    for i in 0..<n1_digits.count {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    for i in 0..<n1_digits.count {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpb6uiaotw.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpb6uiaotw.swift:6:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = Array(String(n1)).map { Int(String($0))! }\n    let n2_digits = Array(String(n2)).map { Int(String($0))! }\n    var sum = 0\n    for i in 0..<n1_digits.count {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    return zip(n1_digits, n2_digits).map { abs($0 - $1) }.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmprj_dx9k9.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprj_dx9k9.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprj_dx9k9.swift:6:65: error: extraneous argument label 'combine:' in call\n    return zip(n1_digits, n2_digits).map { abs($0 - $1) }.reduce(0, combine: +)\n                                                                ^   ~~~~~~~~~\n                                                                    \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    var sum = 0\n    for i in 0..<max(n1_digits.count, n2_digits.count) {\n        let n1_digit = i < n1_digits.count ? n1_digits[i] : 0\n        let n2_digit = i < n2_digits.count ? n2_digits[i] : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmph7zwdi4i.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmph7zwdi4i.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    let n1_len = n1_str.count\n    let n2_len = n2_str.count\n    let len = max(n1_len, n2_len)\n    for i in 0..<len {\n        let n1_digit = i < n1_len ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = i < n2_len ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - (n2 % 10))\n            n1 /= 10\n        } else {\n            sum += abs(n1 % 10 - (n2 % 10))\n            n2 /= 10\n        }\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var sum = 0\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<max(n1_str.count, n2_str.count) {\n        let n1_digit = n1_str.count > i ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = n2_str.count > i ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs((n1 % 10) - (n2 % 10))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "tmp3zykdooq/tmp3zykdooq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19155fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19152f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19152f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19152f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3zykdooq                        0x00005587ed09b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19157e7460 __libc_start_main + 245\n6    tmp3zykdooq                        0x00005587ed09afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    var sum = 0\n    for (i, _) in n1_digits.enumerated() {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmp1ik9buuy.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1ik9buuy.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmptd32q55k/tmptd32q55k.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab837d57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab837a4eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab837a4e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab837a4d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptd32q55k                        0x000055f0897ef1ba <unavailable> + 4538\n5    libc.so.6                          0x00002ab837f43460 __libc_start_main + 245\n6    tmptd32q55k                        0x000055f0897eee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    let n1_len = n1_str.count\n    let n2_len = n2_str.count\n    let max_len = max(n1_len, n2_len)\n    for i in 0..<max_len {\n        let n1_digit = i < n1_len ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = i < n2_len ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<max(n1_str.count, n2_str.count) {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)])) ?? 0\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)])) ?? 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let num1 = String(n1)\n    let num2 = String(n2)\n    for i in 0..<num1.count {\n        let index1 = num1.index(num1.startIndex, offsetBy: i)\n        let index2 = num2.index(num2.startIndex, offsetBy: i)\n        let digit1 = Int(String(num1[index1]))!\n        let digit2 = Int(String(num2[index2]))!\n        sum += abs(digit1 - digit2)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    let diffs = zip(n1_digits, n2_digits).map { abs($0 - $1) }\n    return diffs.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpga9jgqwl.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpga9jgqwl.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpga9jgqwl.swift:7:24: error: extraneous argument label 'combine:' in call\n    return diffs.reduce(0, combine: +)\n                       ^   ~~~~~~~~~\n                           \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "tmpfr8tll5d/tmpfr8tll5d.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8377102c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8376df9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8376df9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8376df87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfr8tll5d                        0x0000559158b8a33a <unavailable> + 4922\n5    libc.so.6                          0x00002b83772ee460 __libc_start_main + 245\n6    tmpfr8tll5d                        0x0000559158b89fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    let n1_len = n1_str.count\n    let n2_len = n2_str.count\n    var i = 0\n    while i < n1_len || i < n2_len {\n        let n1_digit = i < n1_len ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = i < n2_len ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n        i += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs((n1 % 10) - (n2 % 10))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let s1 = String(n1)\n    let s2 = String(n2)\n    var sum = 0\n    for i in 0..<max(s1.count, s2.count) {\n        let c1 = s1.count > i ? Int(String(s1[s1.index(s1.startIndex, offsetBy: i)]))! : 0\n        let c2 = s2.count > i ? Int(String(s2[s2.index(s2.startIndex, offsetBy: i)]))! : 0\n        sum += abs(c1 - c2)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var result = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        result += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n    let diffs = zip(n1_digits, n2_digits).map { abs($0 - $1) }\n    return diffs.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpga9jgqwl.swift:4:32: error: 'characters' is unavailable: Please use String directly\n    let n1_digits = String(n1).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpga9jgqwl.swift:5:32: error: 'characters' is unavailable: Please use String directly\n    let n2_digits = String(n2).characters.map { Int(String($0))! }\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpga9jgqwl.swift:7:24: error: extraneous argument label 'combine:' in call\n    return diffs.reduce(0, combine: +)\n                       ^   ~~~~~~~~~\n                           \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "tmp3zykdooq/tmp3zykdooq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19155fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19152f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19152f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19152f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3zykdooq                        0x00005587ed09b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19157e7460 __libc_start_main + 245\n6    tmp3zykdooq                        0x00005587ed09afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    let n1_len = n1_str.count\n    let n2_len = n2_str.count\n    let max_len = max(n1_len, n2_len)\n    var sum = 0\n    for i in 0..<max_len {\n        let n1_digit = i < n1_len ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = i < n2_len ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        sum += abs((n1 % 10) - (n2 % 10))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += abs(n1 % 10 - n2 % 10)\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "tmp3zykdooq/tmp3zykdooq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19155fbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19152f2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19152f2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19152f17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3zykdooq                        0x00005587ed09b33a <unavailable> + 4922\n5    libc.so.6                          0x00002b19157e7460 __libc_start_main + 245\n6    tmp3zykdooq                        0x00005587ed09afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<max(n1_str.count, n2_str.count) {\n        let n1_digit = n1_str.count > i ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = n2_str.count > i ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    var n1 = n1\n    var n2 = n2\n    while n1 > 0 || n2 > 0 {\n        let d1 = n1 % 10\n        let d2 = n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510377,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    var sum = 0\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    let n1_len = n1_str.count\n    let n2_len = n2_str.count\n    let max_len = max(n1_len, n2_len)\n    for i in 0..<max_len {\n        let n1_digit = i < n1_len ? Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))! : 0\n        let n2_digit = i < n2_len ? Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))! : 0\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1: Int, n2: Int) -> Int {\n    let n1_str = String(n1)\n    let n2_str = String(n2)\n    var sum = 0\n    for i in 0..<n1_str.count {\n        let n1_digit = Int(String(n1_str[n1_str.index(n1_str.startIndex, offsetBy: i)]))!\n        let n2_digit = Int(String(n2_str[n2_str.index(n2_str.startIndex, offsetBy: i)]))!\n        sum += abs(n1_digit - n2_digit)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(digit_distance_nums(n1: 1, n2: 2) == 1)\nassert(digit_distance_nums(n1: 23, n2: 56) == 6)\nassert(digit_distance_nums(n1: 123, n2: 256) == 7)",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}