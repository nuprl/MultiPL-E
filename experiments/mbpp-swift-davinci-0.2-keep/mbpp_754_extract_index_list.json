{
  "name": "mbpp_754_extract_index_list",
  "language": "swift",
  "prompt": "\n/// We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nfunc extract_index_list(l1: [Int], l2: [Int], l3: [Int]) -> AnyHashable {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 7])\nassert(extract_index_list(l1: [1, 1, 3, 4, 5, 6, 7], l2: [0, 1, 2, 3, 4, 6, 5], l3: [0, 1, 2, 3, 4, 6, 7]) == [1, 6])\nassert(extract_index_list(l1: [1, 1, 3, 4, 6, 5, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [1, 5])\nassert(extract_index_list(l1: [1, 2, 3, 4, 6, 6, 6], l2: [0, 1, 2, 3, 4, 5, 7], l3: [0, 1, 2, 3, 4, 5, 7]) == [] as [AnyHashable])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = [Int]()\n    for (index, _) in l1.enumerated() {\n        if l1[index] == l2[index] && l2[index] == l3[index] {\n            result.append(l1[index])\n        }\n    }\n    return result",
    "    var result = [Int]()\n    var index = 0\n    while index < l1.count && index < l2.count && index < l3.count {\n        if l1[index] == l2[index] && l2[index] == l3[index] {\n            result.append(l1[index])\n        }\n        index += 1\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result",
    "    var common_elements = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            common_elements.append(l1[i])\n        }\n    }\n    return common_elements",
    "    var list: [Int] = []\n    var i = 0\n    while i < l1.count && i < l2.count && i < l3.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            list.append(l1[i])\n        }\n        i += 1\n    }\n    return list",
    "    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result",
    "    var l1_index = 0\n    var l2_index = 0\n    var l3_index = 0\n    var result = [Int]()\n    while l1_index < l1.count && l2_index < l2.count && l3_index < l3.count {\n        if l1[l1_index] == l2[l2_index] && l2[l2_index] == l3[l3_index] {\n            result.append(l1[l1_index])\n            l1_index += 1\n            l2_index += 1\n            l3_index += 1\n        } else if l1[l1_index] < l2[l2_index] {\n            l1_index += 1\n        } else if l2[l2_index] < l3[l3_index] {\n            l2_index += 1\n        } else {\n            l3_index += 1\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result"
  ]
}