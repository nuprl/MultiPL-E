{
  "name": "mbpp_245_max_sum",
  "language": "swift",
  "prompt": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(max_sum_left[i-1] + arr[i], arr[i])\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        if i == arr.count - 1 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(max_sum_right[i+1] + arr[i], arr[i])\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum",
    "    var max_sum = 0\n    var max_sum_till_now = 0\n    for i in 0..<arr.count {\n        max_sum_till_now = max(arr[i], max_sum_till_now + arr[i])\n        max_sum = max(max_sum, max_sum_till_now)\n    }\n    return max_sum",
    "    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum",
    "    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 1..<arr.count {\n        if arr[i] > arr[i-1] {\n            max_sum_left[i] = max_sum_left[i-1] + arr[i]\n        } else {\n            max_sum_left[i] = arr[i]\n        }\n    }\n    \n    for i in (0..<arr.count-1).reversed() {\n        if arr[i] > arr[i+1] {\n            max_sum_right[i] = max_sum_right[i+1] + arr[i]\n        } else {\n            max_sum_right[i] = arr[i]\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum",
    "    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum = 0\n        for j in i..<arr.count {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum",
    "    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum",
    "    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        var sum = 0\n        var sum_arr = [Int]()\n        for j in i..<arr.count {\n            if sum_arr.count == 0 {\n                sum_arr.append(arr[j])\n                sum += arr[j]\n            } else {\n                if sum_arr.last! < arr[j] {\n                    sum_arr.append(arr[j])\n                    sum += arr[j]\n                } else {\n                    break\n                }\n            }\n        }\n        for j in (0..<i).reversed() {\n            if sum_arr.count == 0 {\n                sum_arr.append(arr[j])\n                sum += arr[j]\n            } else {\n                if sum_arr.last! > arr[j] {\n                    sum_arr.append(arr[j])\n                    sum += arr[j]\n                } else {\n                    break\n                }\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_sum_arr = sum_arr\n        }\n    }\n    print(max_sum_arr)\n    return max_sum",
    "    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    var max_sum = 0\n    var max_sum_ending_here = 0\n    var max_sum_starting_here = 0\n    var max_sum_ending_here_reverse = 0\n    var max_sum_starting_here_reverse = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here = max(max_sum_ending_here + arr[i], arr[i])\n        max_sum_starting_here = max(max_sum_starting_here + arr[arr.count - i - 1], arr[arr.count - i - 1])\n        max_sum = max(max_sum, max_sum_ending_here)\n        max_sum = max(max_sum, max_sum_starting_here)\n    }\n    return max_sum",
    "    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var sum = 0\n    var sum_arr = [Int]()\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        sum_arr.append(arr[i])\n        if sum > max_sum {\n            max_sum = sum\n            max_sum_arr = sum_arr\n        }\n        if sum < 0 {\n            sum = 0\n            sum_arr = []\n        }\n        i += 1\n    }\n    print(max_sum_arr)\n    return max_sum",
    "    var max_sum = 0\n    var max_sum_arr = [Int](repeating: 0, count: arr.count)\n    var max_sum_arr_rev = [Int](repeating: 0, count: arr.count)\n    var max_sum_arr_rev_rev = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_arr[i] = arr[i]\n        max_sum_arr_rev[i] = arr[i]\n        max_sum_arr_rev_rev[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_arr[i] < max_sum_arr[j] + arr[i] {\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in (0..<arr.count-1).reversed() {\n        for j in (i+1..<arr.count).reversed() {\n            if arr[i] > arr[j] && max_sum_arr_rev[i] < max_sum_arr_rev[j] + arr[i] {\n                max_sum_arr_rev[i] = max_sum_arr_rev[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum_arr_rev_rev[i] = max_sum_arr_rev[arr.count - 1 - i]\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_arr[i] + max_sum_arr_rev_rev[i] - arr[i] {\n            max_sum = max_sum_arr[i] + max_sum_arr_rev_rev[i] - arr[i]\n        }\n    }\n    \n    return max_sum",
    "    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumSoFar2 = 0\n    for i in 0..<arr.count {\n        maxSumSoFar = max(maxSumSoFar + arr[i], arr[i])\n        maxSum = max(maxSum, maxSumSoFar)\n        maxSumSoFar2 = max(maxSumSoFar2 + arr[arr.count - 1 - i], arr[arr.count - 1 - i])\n        maxSum = max(maxSum, maxSumSoFar2)\n    }\n    return maxSum",
    "    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        if i > 0 && arr[i] > arr[i-1] {\n            max_sum_left[i] += max_sum_left[i-1]\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        max_sum_right[i] = arr[i]\n        if i < arr.count-1 && arr[i] > arr[i+1] {\n            max_sum_right[i] += max_sum_right[i+1]\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum",
    "    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far += arr[i]\n        if max_sum_so_far < 0 {\n            max_sum_so_far = 0\n        }\n        if max_sum < max_sum_so_far {\n            max_sum = max_sum_so_far\n        }\n    }\n    return max_sum",
    "    var max_sum = 0\n    var max_sum_inc = [Int](repeating: 0, count: arr.count)\n    var max_sum_dec = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_inc[i] = arr[i]\n        max_sum_dec[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_inc[i] < max_sum_inc[j] + arr[i] {\n                max_sum_inc[i] = max_sum_inc[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in (0..<arr.count-1).reversed() {\n        for j in (i+1..<arr.count).reversed() {\n            if arr[i] > arr[j] && max_sum_dec[i] < max_sum_dec[j] + arr[i] {\n                max_sum_dec[i] = max_sum_dec[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_inc[i] + max_sum_dec[i] - arr[i] {\n            max_sum = max_sum_inc[i] + max_sum_dec[i] - arr[i]\n        }\n    }\n    \n    return max_sum",
    "    var sum = 0\n    var maxSum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > maxSum {\n            maxSum = sum\n        }\n    }\n    return maxSum",
    "    var maxSum = 0\n    var maxSumSoFar = 0\n    for i in 0..<arr.count {\n        maxSumSoFar += arr[i]\n        if maxSumSoFar < 0 {\n            maxSumSoFar = 0\n        }\n        if maxSum < maxSumSoFar {\n            maxSum = maxSumSoFar\n        }\n    }\n    return maxSum",
    "    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum",
    "    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_so_far = 0\n    var max_sum_ending_here_so_far_index = 0\n    var max_sum_ending_here_index = 0\n    var max_sum_ending_here_index_so_far = 0\n    var max_sum_ending_here_index_so_far_index = 0\n    var max_sum_ending_here_index_so_far_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index_index",
    "    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum"
  ]
}