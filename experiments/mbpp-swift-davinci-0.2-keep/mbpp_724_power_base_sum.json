{
  "name": "mbpp_724_power_base_sum",
  "language": "swift",
  "prompt": "\n/// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunc power_base_sum(base: Int, power: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(power_base_sum(base: 2, power: 100) == 115)\nassert(power_base_sum(base: 8, power: 10) == 37)\nassert(power_base_sum(base: 8, power: 15) == 62)\nassert(power_base_sum(base: 3, power: 3) == 9)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var sum = 0\n    var power_base = base\n    for _ in 1..<power {\n        power_base *= base\n    }\n    while power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum",
    "    var sum = 0\n    for i in 1...power {\n        sum += base.to_the_power(i)\n    }\n    return sum",
    "    var sum = 0\n    var base = base\n    var power = power\n    while power > 0 {\n        sum += base\n        base *= base\n        power -= 1\n    }\n    return sum",
    "    var sum = 0\n    var power_base = base\n    for _ in 1..<power {\n        power_base *= base\n    }\n    while power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum",
    "    var result = 1\n    for _ in 0..<power {\n        result *= base\n    }\n    return result.digits.reduce(0, +)",
    "    let result = pow(Double(base), Double(power))\n    return result.description.compactMap{ Int(String($0)) }.reduce(0, +)",
    "    var result = 1\n    for _ in 1...power {\n        result *= base\n    }\n    return result.digits.reduce(0, +)",
    "    var sum = 0\n    var base_copy = base\n    var power_copy = power\n    while power_copy > 0 {\n        sum += Int(pow(Double(base_copy), Double(power_copy)))\n        power_copy -= 1\n    }\n    return sum",
    "    var sum = 0\n    var base_copy = base\n    while base_copy > 0 {\n        sum += base_copy % 10\n        base_copy /= 10\n    }\n    var power_copy = power\n    while power_copy > 1 {\n        var temp_sum = 0\n        var base_copy = base\n        while base_copy > 0 {\n            temp_sum += base_copy % 10\n            base_copy /= 10\n        }\n        sum *= temp_sum\n        power_copy -= 1\n    }\n    return sum",
    "    var sum: Int = 0\n    var base_copy: Int = base\n    var power_copy: Int = power\n    var power_sum: Int = 0\n    var base_sum: Int = 0\n    \n    while base_copy > 0 {\n        base_sum += base_copy % 10\n        base_copy = base_copy / 10\n    }\n    \n    while power_copy > 0 {\n        power_sum += power_copy % 10\n        power_copy = power_copy / 10\n    }\n    \n    sum = base_sum + power_sum\n    \n    return sum",
    "    var sum = 0\n    var base = base\n    for _ in 0..<power {\n        while base > 0 {\n            sum += base % 10\n            base /= 10\n        }\n        base = sum\n        sum = 0\n    }\n    return base",
    "    var sum = 0\n    var base = base\n    for _ in 0..<power {\n        while base > 0 {\n            sum += base % 10\n            base /= 10\n        }\n        base = sum\n        sum = 0\n    }\n    return base",
    "    var sum = 0\n    var base = base\n    for _ in 0..<power {\n        sum += base % 10\n        base /= 10\n    }\n    return sum",
    "    var sum = 0\n    var base = base\n    for _ in 0..<power {\n        while base > 0 {\n            sum += base % 10\n            base /= 10\n        }\n        base = sum\n        sum = 0\n    }\n    return base",
    "    let result = pow(Double(base), Double(power))\n    return result.description.reduce(0) { $0 + Int(String($1))! }",
    "    var sum = 0\n    var base = base\n    for _ in 0..<power {\n        while base > 0 {\n            sum += base % 10\n            base /= 10\n        }\n        base = sum\n        sum = 0\n    }\n    return base",
    "    var result = 0\n    var base_copy = base\n    var power_copy = power\n    while power_copy > 0 {\n        result += Int(pow(Double(base_copy), Double(power_copy)))\n        power_copy -= 1\n    }\n    return result",
    "    var sum = 0\n    var base_copy = base\n    while base_copy > 0 {\n        sum += base_copy % 10\n        base_copy /= 10\n    }\n    var result = sum\n    for _ in 1..<power {\n        result *= sum\n    }\n    return result",
    "    return 0",
    "    var sum = 0\n    var power_base = base\n    for _ in 1..<power {\n        power_base *= base\n    }\n    var power_base_str = String(power_base)\n    for i in power_base_str {\n        sum += Int(String(i))!\n    }\n    return sum"
  ]
}