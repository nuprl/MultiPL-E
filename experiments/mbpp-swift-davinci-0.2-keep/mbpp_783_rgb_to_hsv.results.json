{
  "name": "mbpp_783_rgb_to_hsv",
  "language": "swift",
  "prompt": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    let h: Double\n    let s: Double\n    let v: Double\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / (max - min)\n    } else if max == g {\n        h = 60 * (b - r) / (max - min) + 120\n    } else {\n        h = 60 * (r - g) / (max - min) + 240\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = 1 - min / max\n    }\n    \n    v = max\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmpubi4ewd5.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpubi4ewd5.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpubi4ewd5.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    let max_ = max(r_, max(g_, b_))\n    let min_ = min(r_, min(g_, b_))\n    let diff = max_ - min_\n    if max_ == min_ {\n        h = 0.0\n    } else if max_ == r_ {\n        h = 60.0 * ((g_ - b_) / diff)\n    } else if max_ == g_ {\n        h = 60.0 * ((b_ - r_) / diff) + 120.0\n    } else if max_ == b_ {\n        h = 60.0 * ((r_ - g_) / diff) + 240.0\n    }\n    if h < 0.0 {\n        h += 360.0\n    }\n    if max_ == 0.0 {\n        s = 0.0\n    } else {\n        s = diff / max_\n    }\n    v = max_\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmpf0eo9t1d.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpf0eo9t1d.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpf0eo9t1d.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var rr: Double = Double(r) / 255.0\n    var gg: Double = Double(g) / 255.0\n    var bb: Double = Double(b) / 255.0\n    let min: Double = min(rr, gg, bb)\n    let max: Double = max(rr, gg, bb)\n    let delta: Double = max - min\n    v = max\n    if max != 0.0 {\n        s = delta / max\n    } else {\n        s = 0.0\n        h = -1.0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if rr == max {\n        h = (gg - bb) / delta\n    } else if gg == max {\n        h = 2.0 + (bb - rr) / delta\n    } else {\n        h = 4.0 + (rr - gg) / delta\n    }\n    h *= 60.0\n    if h < 0.0 {\n        h += 360.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmpm1wfhn35.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpm1wfhn35.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpm1wfhn35.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpm1wfhn35.swift:7:9: warning: variable 'rr' was never mutated; consider changing to 'let' constant\n    var rr: Double = Double(r) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpm1wfhn35.swift:8:9: warning: variable 'gg' was never mutated; consider changing to 'let' constant\n    var gg: Double = Double(g) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpm1wfhn35.swift:9:9: warning: variable 'bb' was never mutated; consider changing to 'let' constant\n    var bb: Double = Double(b) / 255.0\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    let cmax = max(r_, g_, b_)\n    let cmin = min(r_, g_, b_)\n    let delta = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * ((g_ - b_) / delta)\n    } else if cmax == g_ {\n        h = 60 * ((b_ - r_) / delta + 2)\n    } else if cmax == b_ {\n        h = 60 * ((r_ - g_) / delta + 4)\n    }\n    if h < 0 {\n        h += 360\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    v = cmax\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmpcb0jkux0.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpcb0jkux0.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpcb0jkux0.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    \n    let rf: Float = Float(r) / 255.0\n    let gf: Float = Float(g) / 255.0\n    let bf: Float = Float(b) / 255.0\n    \n    let max: Float = max(rf, max(gf, bf))\n    let min: Float = min(rf, min(gf, bf))\n    \n    let diff: Float = max - min\n    \n    if max == min {\n        h = 0\n    } else if max == rf {\n        h = 60 * ((gf - bf) / diff)\n    } else if max == gf {\n        h = 60 * ((bf - rf) / diff) + 120\n    } else if max == bf {\n        h = 60 * ((rf - gf) / diff) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    \n    v = max\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmptuy_mfwp.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmptuy_mfwp.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmptuy_mfwp.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    \n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n    }\n    \n    h /= 6.0\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmpiim310ha.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpiim310ha.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpiim310ha.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    let diff = max - min\n    var h = 0.0\n    var s = 0.0\n    var v = max\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmp55yyoxe4.swift:46:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp55yyoxe4.swift:47:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp55yyoxe4.swift:48:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp55yyoxe4.swift:12:9: warning: variable 'v' was never mutated; consider changing to 'let' constant\n    var v = max\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    let r_ = Double(r) / 255\n    let g_ = Double(g) / 255\n    let b_ = Double(b) / 255\n    let max_ = max(r_, max(g_, b_))\n    let min_ = min(r_, min(g_, b_))\n    let diff = max_ - min_\n    if max_ == min_ {\n        h = 0\n    } else if max_ == r_ {\n        h = 60 * (g_ - b_) / diff\n    } else if max_ == g_ {\n        h = 60 * (b_ - r_) / diff + 120\n    } else if max_ == b_ {\n        h = 60 * (r_ - g_) / diff + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if max_ == 0 {\n        s = 0\n    } else {\n        s = diff / max_\n    }\n    v = max_\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmpofq6su0e.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpofq6su0e.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpofq6su0e.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r = r / 255\n    let g = g / 255\n    let b = b / 255\n    \n    let cmax = max(r, max(g, b))\n    let cmin = min(r, min(g, b))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r {\n        h = 60 * (((g - b) / delta) % 6)\n    } else if cmax == g {\n        h = 60 * (((b - r) / delta) + 2)\n    } else if cmax == b {\n        h = 60 * (((r - g) / delta) + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    \n    v = cmax\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmpx2krtkaf.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpx2krtkaf.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpx2krtkaf.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let rr = Double(r) / 255.0\n    let gg = Double(g) / 255.0\n    let bb = Double(b) / 255.0\n    let cmax = max(rr, max(gg, bb))\n    let cmin = min(rr, min(gg, bb))\n    let diff = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == rr {\n        h = 60 * ((Int(gg - bb) / Int(diff)) % 6)\n    } else if cmax == gg {\n        h = 60 * ((Int(bb - rr) / Int(diff)) + 2)\n    } else if cmax == bb {\n        h = 60 * ((Int(rr - gg) / Int(diff)) + 4)\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(diff / cmax * 100)\n    }\n    v = Int(cmax * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmplvjlzras.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmplvjlzras.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmplvjlzras.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h: Double = 0\n    var s: Double = 0\n    let v = max\n    \n    let d = max - min\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = d / max\n    }\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / d)\n    } else if max == g {\n        h = 60 * ((b - r) / d) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / d) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmpsj_r0sz8.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpsj_r0sz8.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpsj_r0sz8.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = Float(r)\n    let g = Float(g)\n    let b = Float(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    v = Int(max)\n    if max != 0 {\n        s = Int(diff / max * 100)\n    } else {\n        s = 0\n    }\n    if s != 0 {\n        if r == max {\n            h = Int((g - b) / diff * 60)\n        } else if g == max {\n            h = Int(2 + (b - r) / diff * 60)\n        } else if b == max {\n            h = Int(4 + (r - g) / diff * 60)\n        }\n    } else {\n        h = 0\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmppunz9mkf.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmppunz9mkf.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmppunz9mkf.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    var hh: Int = 0\n    var ss: Int = 0\n    var vv: Int = 0\n    var result: AnyHashable = [:]\n    rr = r\n    gg = g\n    bb = b\n    max = max(rr, gg, bb)\n    min = min(rr, gg, bb)\n    diff = max - min\n    if max == min {\n        h = 0\n    } else if max == rr {\n        h = 60 * (gg - bb) / diff\n    } else if max == gg {\n        h = 60 * (bb - rr) / diff + 120\n    } else if max == bb {\n        h = 60 * (rr - gg) / diff + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff * 100 / max\n    }\n    v = max * 100 / 255\n    hh = h\n    ss = s\n    vv = v\n    result[\"h\"] = hh\n    result[\"s\"] = ss\n    result[\"v\"] = vv\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmpuogbja4p.swift:63:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpuogbja4p.swift:64:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpuogbja4p.swift:65:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpuogbja4p.swift:16:31: error: type 'Any' cannot conform to 'Hashable'\n    var result: AnyHashable = [:]\n                              ^\n/tmp/tmpuogbja4p.swift:16:31: note: only concrete types such as structs, enums and classes can conform to protocols\n    var result: AnyHashable = [:]\n                              ^\n/tmp/tmpuogbja4p.swift:16:31: note: requirement from conditional conformance of '[AnyHashable : Any]' to 'Hashable'\n    var result: AnyHashable = [:]\n                              ^\n/tmp/tmpuogbja4p.swift:20:11: error: cannot call value of non-function type 'Int'\n    max = max(rr, gg, bb)\n          ^\n/tmp/tmpuogbja4p.swift:21:11: error: cannot call value of non-function type 'Int'\n    min = min(rr, gg, bb)\n          ^\n/tmp/tmpuogbja4p.swift:44:11: error: value of type 'AnyHashable' has no subscripts\n    result[\"h\"] = hh\n    ~~~~~~^\n/tmp/tmpuogbja4p.swift:45:11: error: value of type 'AnyHashable' has no subscripts\n    result[\"s\"] = ss\n    ~~~~~~^\n/tmp/tmp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let delta = max - min\n    var h = 0.0\n    var s = 0.0\n    var v = max\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmp_0ux4g80.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp_0ux4g80.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp_0ux4g80.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp_0ux4g80.swift:12:9: warning: variable 'v' was never mutated; consider changing to 'let' constant\n    var v = max\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime: Float = Float(r) / 255.0\n    let g_prime: Float = Float(g) / 255.0\n    let b_prime: Float = Float(b) / 255.0\n    \n    let c_max: Float = max(r_prime, max(g_prime, b_prime))\n    let c_min: Float = min(r_prime, min(g_prime, b_prime))\n    let delta: Float = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n    } else if c_max == g_prime {\n        h = Int(60 * (((b_prime - r_prime) / delta) + 2))\n    } else if c_max == b_prime {\n        h = Int(60 * (((r_prime - g_prime) / delta) + 4))\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510601,
      "stdout": "",
      "stderr": "/tmp/tmp4gsw6yfn.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp4gsw6yfn.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp4gsw6yfn.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp4gsw6yfn.swift:19:53: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n                                                    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    let rd: Double = Double(r) / 255\n    let gd: Double = Double(g) / 255\n    let bd: Double = Double(b) / 255\n    let max: Double = max(rd, max(gd, bd))\n    let min: Double = min(rd, min(gd, bd))\n    v = max\n    let diff: Double = max - min\n    s = max == 0 ? 0 : diff / max\n    if max == min {\n        h = 0\n    } else if max == rd {\n        h = (gd - bd) / diff + (gd < bd ? 6 : 0)\n    } else if max == gd {\n        h = (bd - rd) / diff + 2\n    } else if max == bd {\n        h = (rd - gd) / diff + 4\n    }\n    h /= 6\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmp2tqw9cr3.swift:41:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp2tqw9cr3.swift:42:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp2tqw9cr3.swift:43:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let cmax = max(r_, max(g_, b_))\n    let cmin = min(r_, min(g_, b_))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = Int(((g_ - b_) / delta) * 60)\n    } else if cmax == g_ {\n        h = Int(((b_ - r_) / delta) * 60) + 120\n    } else if cmax == b_ {\n        h = Int(((r_ - g_) / delta) * 60) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmpsi9sfnvo.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpsi9sfnvo.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpsi9sfnvo.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255\n    let g_prime = Double(g) / 255\n    let b_prime = Double(b) / 255\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510604,
      "stdout": "",
      "stderr": "/tmp/tmp047myc37.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp047myc37.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp047myc37.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp047myc37.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let cmax = max(r_, max(g_, b_))\n    let cmin = min(r_, min(g_, b_))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = Int(((g_ - b_) / delta) * 60)\n    } else if cmax == g_ {\n        h = Int((((b_ - r_) / delta) + 2) * 60)\n    } else if cmax == b_ {\n        h = Int((((r_ - g_) / delta) + 4) * 60)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmps3w_bv9m.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmps3w_bv9m.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmps3w_bv9m.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n    }\n    \n    h /= 6\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510597,
      "stdout": "",
      "stderr": "/tmp/tmp73oz61kf.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp73oz61kf.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp73oz61kf.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp73oz61kf.swift:16:20: error: cannot assign value of type 'Float' to type 'Double'\n    s = max == 0.0 ? 0.0 : d / max\n        ~~~~~~~~~~~^~~~~~~~~~~~~~~\n        Double(                   )\n/tmp/tmp73oz61kf.swift:22:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (g - b) / d + (g < b ? 6 : 0)\n                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n                Double(                      )\n/tmp/tmp73oz61kf.swift:24:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (b - r) / d + 2\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmp73oz61kf.swift:26:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (r - g) / d + 4\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmp73oz61kf.swift:32:34: error: cannot convert value of type 'Float' to expected dictionary value type 'Double'\n    return [\"h\": h, \"s\": s, \"v\": v]\n                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    var v = max\n    \n    let d = max - min\n    \n    if max != 0 {\n        s = d / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if r == max {\n        h = (g - b) / d\n    } else if g == max {\n        h = 2 + (b - r) / d\n    } else {\n        h = 4 + (r - g) / d\n    }\n    \n    h *= 60\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp0knci89w.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp0knci89w.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp0knci89w.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp0knci89w.swift:13:9: warning: variable 'v' was never mutated; consider changing to 'let' constant\n    var v = max\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = Float(r)\n    let g = Float(g)\n    let b = Float(b)\n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    let delta = max - min\n    v = Int(max)\n    if delta == 0 {\n        h = 0\n        s = 0\n    } else {\n        s = Int(delta / max * 100)\n        if r == max {\n            h = Int((g - b) / delta)\n        } else if g == max {\n            h = Int(2 + (b - r) / delta)\n        } else {\n            h = Int(4 + (r - g) / delta)\n        }\n        h = h * 60\n        if h < 0 {\n            h = h + 360\n        }\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmps49njjjq.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmps49njjjq.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmps49njjjq.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let delta = max - min\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    if max != 0.0 {\n        s = delta / max\n    }\n    if delta == 0.0 {\n        h = 0.0\n    } else if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2.0 + (b - r) / delta\n    } else if b == max {\n        h = 4.0 + (r - g) / delta\n    }\n    h *= 60.0\n    if h < 0.0 {\n        h += 360.0\n    }\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp_8llfvut.swift:45:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp_8llfvut.swift:46:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp_8llfvut.swift:47:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n        h /= 6.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpojq2jqa0.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpojq2jqa0.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpojq2jqa0.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h: Double\n    let s: Double\n    let v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else {\n            h = (r - g) / d + 4.0\n        }\n        h /= 6.0\n    }\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp1en9ngmu.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1en9ngmu.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1en9ngmu.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var min: Double = 0.0\n    var max: Double = 0.0\n    var delta: Double = 0.0\n    \n    min = Double(min(r, min(g, b)))\n    max = Double(max(r, max(g, b)))\n    v = max\n    delta = max - min\n    \n    if max != 0.0 {\n        s = delta / max\n    } else {\n        s = 0.0\n        h = -1.0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if r == Int(max) {\n        h = (Double(g) - Double(b)) / delta\n    } else if g == Int(max) {\n        h = 2.0 + (Double(b) - Double(r)) / delta\n    } else {\n        h = 4.0 + (Double(r) - Double(g)) / delta\n    }\n    \n    h *= 60.0\n    \n    if h < 0.0 {\n        h += 360.0\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp83f7a0xl.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp83f7a0xl.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp83f7a0xl.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp83f7a0xl.swift:11:25: error: cannot call value of non-function type 'Double'\n    min = Double(min(r, min(g, b)))\n                        ^\n/tmp/tmp83f7a0xl.swift:11:18: error: cannot call value of non-function type 'Double'\n    min = Double(min(r, min(g, b)))\n                 ^\n/tmp/tmp83f7a0xl.swift:12:25: error: cannot call value of non-function type 'Double'\n    max = Double(max(r, max(g, b)))\n                        ^\n/tmp/tmp83f7a0xl.swift:12:18: error: cannot call value of non-function type 'Double'\n    max = Double(max(r, max(g, b)))\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h = 0.0\n    var s = 0.0\n    var v = 0.0\n    var max = 0.0\n    var min = 0.0\n    var diff = 0.0\n    var r = r\n    var g = g\n    var b = b\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    max = max(max(r, g), b)\n    min = min(min(r, g), b)\n    diff = max - min\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = 1 - (min / max)\n    }\n    v = max\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123530,
      "stdout": "",
      "stderr": "/tmp/tmp9s6kknzp.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp9s6kknzp.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp9s6kknzp.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp9s6kknzp.swift:16:11: error: cannot call value of non-function type 'Double'\n    max = max(max(r, g), b)\n          ^\n/tmp/tmp9s6kknzp.swift:16:15: error: cannot call value of non-function type 'Double'\n    max = max(max(r, g), b)\n              ^\n/tmp/tmp9s6kknzp.swift:17:11: error: cannot call value of non-function type 'Double'\n    min = min(min(r, g), b)\n          ^\n/tmp/tmp9s6kknzp.swift:17:15: error: cannot call value of non-function type 'Double'\n    min = min(min(r, g), b)\n              ^\n/tmp/tmp9s6kknzp.swift:21:19: error: binary operator '==' cannot be applied to operands of type 'Double' and 'Int'\n    } else if max == r {\n              ~~~ ^  ~\n/tmp/tmp9s6kknzp.swift:21:19: note: overloads for '==' exist with these partially matching parameter lists: (Int, Int)\n    } else if max == r {\n                  ^\n/tmp/tmp9s6kknzp.swift:22:22: error: cannot convert value of type 'Int' to expected argument type 'Double'\n        h = 60 * ((g - b) / diff)\n           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var min: Int = 0\n    var max: Int = 0\n    var diff: Int = 0\n    \n    min = min(r, g, b)\n    max = max(r, g, b)\n    v = max\n    diff = max - min\n    if max != 0 {\n        s = diff * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) * 60 / diff\n    } else if g == max {\n        h = 120 + (b - r) * 60 / diff\n    } else {\n        h = 240 + (r - g) * 60 / diff\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp88se_xrd.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp88se_xrd.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp88se_xrd.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp88se_xrd.swift:11:11: error: cannot call value of non-function type 'Int'\n    min = min(r, g, b)\n          ^\n/tmp/tmp88se_xrd.swift:12:11: error: cannot call value of non-function type 'Int'\n    max = max(r, g, b)\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n    }\n    \n    h /= 6\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpy9_xi7tn.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpy9_xi7tn.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpy9_xi7tn.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpy9_xi7tn.swift:16:20: error: cannot assign value of type 'Float' to type 'Double'\n    s = max == 0.0 ? 0.0 : d / max\n        ~~~~~~~~~~~^~~~~~~~~~~~~~~\n        Double(                   )\n/tmp/tmpy9_xi7tn.swift:22:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (g - b) / d + (g < b ? 6 : 0)\n                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n                Double(                      )\n/tmp/tmpy9_xi7tn.swift:24:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (b - r) / d + 2\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmpy9_xi7tn.swift:26:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (r - g) / d + 4\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmpy9_xi7tn.swift:32:19: error: cannot convert value of type 'Float' to expected element type 'Double'\n    return [h, s, v]\n                  ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / diff\n    } else if max == g {\n        h = 60 * (b - r) / diff + 120\n    } else if max == b {\n        h = 60 * (r - g) / diff + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpu5n5je76.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpu5n5je76.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpu5n5je76.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var max: Double = 0.0\n    var min: Double = 0.0\n    var diff: Double = 0.0\n    var r: Double = Double(r)\n    var g: Double = Double(g)\n    var b: Double = Double(b)\n    max = max(r, max(g, b))\n    min = min(r, min(g, b))\n    diff = max - min\n    v = max\n    if (max == 0.0) {\n        s = 0.0\n    } else {\n        s = diff / max\n    }\n    if (s == 0.0) {\n        h = 0.0\n    } else {\n        if (r == max) {\n            h = (g - b) / diff\n        } else if (g == max) {\n            h = 2.0 + (b - r) / diff\n        } else if (b == max) {\n            h = 4.0 + (r - g) / diff\n        }\n        h = h * 60.0\n        if (h < 0.0) {\n            h = h + 360.0\n        }\n    }\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmphw6vq51k.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmphw6vq51k.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmphw6vq51k.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmphw6vq51k.swift:13:11: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n          ^\n/tmp/tmphw6vq51k.swift:13:18: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n                 ^\n/tmp/tmphw6vq51k.swift:14:11: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n          ^\n/tmp/tmphw6vq51k.swift:14:18: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let delta = max - min\n    var h = 0.0\n    var s = 0.0\n    var v = max\n    if delta == 0 {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / delta)\n    } else if max == g {\n        h = 60 * ((b - r) / delta) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / delta) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpv6j25rwi.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpv6j25rwi.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpv6j25rwi.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpv6j25rwi.swift:12:9: warning: variable 'v' was never mutated; consider changing to 'let' constant\n    var v = max\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    let max_ = max(r_, max(g_, b_))\n    let min_ = min(r_, min(g_, b_))\n    let diff = max_ - min_\n    if max_ == min_ {\n        h = 0\n    } else if max_ == r_ {\n        h = 60 * ((g_ - b_) / diff)\n    } else if max_ == g_ {\n        h = 60 * ((b_ - r_) / diff) + 120\n    } else if max_ == b_ {\n        h = 60 * ((r_ - g_) / diff) + 240\n    }\n    if max_ == 0 {\n        s = 0\n    } else {\n        s = diff / max_\n    }\n    v = max_\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpji4w46ms.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpji4w46ms.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpji4w46ms.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    let rf: Float = Float(r) / 255.0\n    let gf: Float = Float(g) / 255.0\n    let bf: Float = Float(b) / 255.0\n    let max: Float = max(rf, max(gf, bf))\n    let min: Float = min(rf, min(gf, bf))\n    if max == min {\n        h = 0\n    } else if max == rf {\n        h = 60 * (gf - bf) / (max - min)\n    } else if max == gf {\n        h = 60 * (bf - rf) / (max - min) + 120\n    } else if max == bf {\n        h = 60 * (rf - gf) / (max - min) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = 1 - min / max\n    }\n    v = max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp1rt4xtmj.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1rt4xtmj.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1rt4xtmj.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123486,
      "stdout": "",
      "stderr": "/tmp/tmptzx92m9z.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmptzx92m9z.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmptzx92m9z.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmptzx92m9z.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, max(g_prime, b_prime))\n    let c_min = min(r_prime, min(g_prime, b_prime))\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "/tmp/tmpng5123a1.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpng5123a1.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpng5123a1.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpng5123a1.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let diff = max - min\n    \n    if max != 0 {\n        s = diff / max\n    } else {\n        s = 0\n        h = -1\n    }\n    \n    if r == max {\n        h = (g - b) / diff\n    } else if g == max {\n        h = 2 + (b - r) / diff\n    } else if b == max {\n        h = 4 + (r - g) / diff\n    }\n    \n    h *= 60\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpqpgny_nj.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpqpgny_nj.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpqpgny_nj.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, max(g_prime, b_prime))\n    let c_min = min(r_prime, min(g_prime, b_prime))\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123532,
      "stdout": "",
      "stderr": "/tmp/tmpw4mn_lbu.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpw4mn_lbu.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpw4mn_lbu.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpw4mn_lbu.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let cmax = max(r_prime, max(g_prime, b_prime))\n    let cmin = min(r_prime, min(g_prime, b_prime))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if cmax == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if cmax == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123534,
      "stdout": "",
      "stderr": "/tmp/tmp89osbeac.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp89osbeac.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp89osbeac.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp89osbeac.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, max(g_prime, b_prime))\n    let c_min = min(r_prime, min(g_prime, b_prime))\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int((g_prime - b_prime) / delta * 60)\n    } else if c_max == g_prime {\n        h = Int((b_prime - r_prime) / delta * 60) + 120\n    } else if c_max == b_prime {\n        h = Int((r_prime - g_prime) / delta * 60) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp2x63b3f9.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp2x63b3f9.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp2x63b3f9.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r1 = Double(r) / 255\n    let g1 = Double(g) / 255\n    let b1 = Double(b) / 255\n    \n    let cmax = max(r1, max(g1, b1))\n    let cmin = min(r1, min(g1, b1))\n    let delta = cmax - cmin\n    \n    var hue = 0.0\n    if delta == 0 {\n        hue = 0\n    } else if cmax == r1 {\n        hue = 60 * ((g1 - b1) / delta)\n    } else if cmax == g1 {\n        hue = 60 * ((b1 - r1) / delta + 2)\n    } else if cmax == b1 {\n        hue = 60 * ((r1 - g1) / delta + 4)\n    }\n    \n    if hue < 0 {\n        hue += 360\n    }\n    \n    var saturation = 0.0\n    if cmax == 0 {\n        saturation = 0\n    } else {\n        saturation = delta / cmax\n    }\n    \n    let value = cmax\n    \n    return [\"hue\": hue, \"saturation\": saturation, \"value\": value]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp0ws8qj8u.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp0ws8qj8u.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp0ws8qj8u.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int((g_prime - b_prime) / delta * 60)\n    } else if c_max == g_prime {\n        h = Int((b_prime - r_prime) / delta * 60 + 120)\n    } else if c_max == b_prime {\n        h = Int((r_prime - g_prime) / delta * 60 + 240)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpr2dbdp3t.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpr2dbdp3t.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpr2dbdp3t.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    let h: Double\n    let s: Double\n    let v: Double\n    \n    v = max\n    \n    let d = max - min\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = d / max\n    }\n    \n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpkb4eb73m.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpkb4eb73m.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpkb4eb73m.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var max: Double = 0.0\n    var min: Double = 0.0\n    var diff: Double = 0.0\n    var r_: Double = 0.0\n    var g_: Double = 0.0\n    var b_: Double = 0.0\n    var r_dash: Double = 0.0\n    var g_dash: Double = 0.0\n    var b_dash: Double = 0.0\n    var h_dash: Double = 0.0\n    var s_dash: Double = 0.0\n    var v_dash: Double = 0.0\n    var h_dash_: Double = 0.0\n    var s_dash_: Double = 0.0\n    var v_dash_: Double = 0.0\n    var h_dash__: Double = 0.0\n    var s_dash__: Double = 0.0\n    var v_dash__: Double = 0.0\n    var h_dash___: Double = 0.0\n    var s_dash___: Double = 0.0\n    var v_dash___: Double = 0.0\n    var h_dash____: Double = 0.0\n    var s_dash____: Double = 0.0\n    var v_dash____: Double = 0.0\n    var h_dash_____: Double = 0.0\n    var s_dash_____: Double = 0.0\n    var v_dash_____: Double = 0.0\n    var h_dash______: Double = 0.0\n    var s_dash______: Double = 0.0\n    var v_dash______: Double = 0.0\n    var h_dash_______: Double = 0.0\n    var s_dash_______: Double = 0.0\n    var v_dash_______: Double = 0.0\n    var h_dash________: Double = 0.0\n    var s_dash________: Double = 0.0\n    var v_dash________: Double = 0.0\n    var h_dash_________: Double = 0.0\n    var s_dash_________: Double = 0.0\n    var v_dash________\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpeuur2rw8.swift:61:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpeuur2rw8.swift:62:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpeuur2rw8.swift:63:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpeuur2rw8.swift:45:9: error: type annotation missing in pattern\n    var v_dash________\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = r / 255.0\n    let g_ = g / 255.0\n    let b_ = b / 255.0\n    \n    let cmax = max(r_, max(g_, b_))\n    let cmin = min(r_, min(g_, b_))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * (((g_ - b_) / delta) % 6)\n    } else if cmax == g_ {\n        h = 60 * (((b_ - r_) / delta) + 2)\n    } else if cmax == b_ {\n        h = 60 * (((r_ - g_) / delta) + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp__oclysu.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp__oclysu.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp__oclysu.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp__oclysu.swift:8:16: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let r_ = r / 255.0\n             ~ ^ ~~~~~\n/tmp/tmp__oclysu.swift:8:16: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let r_ = r / 255.0\n               ^\n/tmp/tmp__oclysu.swift:9:16: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let g_ = g / 255.0\n             ~ ^ ~~~~~\n/tmp/tmp__oclysu.swift:9:16: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let g_ = g / 255.0\n               ^\n/tmp/tmp__oclysu.swift:10:16: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let b_ = b / 255.0\n             ~ ^ ~~~~~\n/tmp/tmp__oclysu.swift:10:16: note: overloads for '/' exist with these partially matching parameter lists: (Double, Dou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h: Double\n    let s: Double\n    let v: Double\n    v = max\n    let diff = max - min\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpzd96351x.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpzd96351x.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpzd96351x.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let max_ = max(r_, max(g_, b_))\n    let min_ = min(r_, min(g_, b_))\n    \n    if max_ == min_ {\n        h = 0\n    } else if max_ == r_ {\n        h = 60 * (Int((g_ - b_) / (max_ - min_)))\n    } else if max_ == g_ {\n        h = 60 * (Int((b_ - r_) / (max_ - min_)) + 2)\n    } else if max_ == b_ {\n        h = 60 * (Int((r_ - g_) / (max_ - min_)) + 4)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if max_ == 0 {\n        s = 0\n    } else {\n        s = Int(100 * (max_ - min_) / max_)\n    }\n    \n    v = Int(max_ * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpowgl03cb.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpowgl03cb.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpowgl03cb.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    var rr_percent: Int = 0\n    var gg_percent: Int = 0\n    var bb_percent: Int = 0\n    var hh: Int = 0\n    var ss: Int = 0\n    var vv: Int = 0\n    var hh_percent: Int = 0\n    var ss_percent: Int = 0\n    var vv_percent: Int = 0\n    var hh_index: Int = 0\n    var hh_fraction: Int = 0\n    var hh_fraction_percent: Int = 0\n    var hh_fraction_percent_index: Int = 0\n    var hh_fraction_percent_index_fraction: Int = 0\n    var hh_fraction_percent_index_fraction_percent: Int = 0\n    var hh_fraction_percent_index_fraction_percent_index: Int = 0\n    var hh_fraction_percent_index_fraction_percent_index_fraction: Int = 0\n    var hh_fraction_percent_index_fraction_percent_index_fraction_percent: Int = 0\n    var hh_fraction_percent_index_fraction_percent_index_fraction_percent_index: Int = 0\n    var hh_fraction_percent_index_fraction_percent_index_fraction_percent_index_fraction: Int = 0\n    var hh_fraction_percent_index_fraction_percent_index_fraction_percent_index_fraction_percent: Int = 0\n    var hh_fraction_percent_index_fraction_percent_index_fraction_percent_index_fraction_percent_index: Int = 0\n    var hh_fraction_percent_index_fraction_percent_index_fraction_percent_index_fraction_percent_index_fraction: Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpxg_y471l.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpxg_y471l.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpxg_y471l.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpxg_y471l.swift:4:9: warning: variable 'h' was never used; consider replacing with '_' or removing it\n    var h: Int = 0\n        ^\n        _\n/tmp/tmpxg_y471l.swift:5:9: warning: variable 's' was never used; consider replacing with '_' or removing it\n    var s: Int = 0\n        ^\n        _\n/tmp/tmpxg_y471l.swift:6:9: warning: variable 'v' was never used; consider replacing with '_' or removing it\n    var v: Int = 0\n        ^\n        _\n/tmp/tmpxg_y471l.swift:7:9: warning: variable 'max' was never used; consider replacing with '_' or removing it\n    var max: Int = 0\n        ^~~\n        _\n/tmp/tmpxg_y471l.swift:8:9: warning: variable 'min' was never used; consider replacing with '_' or removing it\n    var min: Int = 0\n        ^~~\n        _\n/tmp/tmpxg_y471l.swift:9:9: warning: variable 'diff' was never used; consider replacing with '_' or removing it\n    var diff: Int = 0\n        ^~~~\n        _\n/tmp/tmpxg_y471l.swift:10:9: warning: variable 'rr' was never used; consider r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r = r / 255.0\n    let g = g / 255.0\n    let b = b / 255.0\n    \n    let min = min(r, g, b)\n    let max = max(r, g, b)\n    let delta = max - min\n    \n    v = Int(max * 100)\n    \n    if max != 0 {\n        s = Int(delta / max * 100)\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if r == max {\n        h = Int((g - b) / delta * 60)\n    } else if g == max {\n        h = Int(2 + (b - r) / delta * 60)\n    } else {\n        h = Int(4 + (r - g) / delta * 60)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp5gx5ohif.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp5gx5ohif.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp5gx5ohif.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp5gx5ohif.swift:8:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let r = r / 255.0\n            ~ ^ ~~~~~\n/tmp/tmp5gx5ohif.swift:8:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let r = r / 255.0\n              ^\n/tmp/tmp5gx5ohif.swift:9:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let g = g / 255.0\n            ~ ^ ~~~~~\n/tmp/tmp5gx5ohif.swift:9:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let g = g / 255.0\n              ^\n/tmp/tmp5gx5ohif.swift:10:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let b = b / 255.0\n            ~ ^ ~~~~~\n/tmp/tmp5gx5ohif.swift:10:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Dur",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var min: Int = 0\n    var max: Int = 0\n    var delta: Int = 0\n    \n    min = min(r, min(g, b))\n    max = max(r, max(g, b))\n    \n    v = max\n    delta = max - min\n    \n    if (max != 0) {\n        s = delta * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if (r == max) {\n        h = (g - b) * 60 / delta\n    } else if (g == max) {\n        h = 120 + (b - r) * 60 / delta\n    } else {\n        h = 240 + (r - g) * 60 / delta\n    }\n    \n    if (h < 0) {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp1vwyevph.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1vwyevph.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1vwyevph.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp1vwyevph.swift:11:11: error: cannot call value of non-function type 'Int'\n    min = min(r, min(g, b))\n          ^\n/tmp/tmp1vwyevph.swift:11:18: error: cannot call value of non-function type 'Int'\n    min = min(r, min(g, b))\n                 ^\n/tmp/tmp1vwyevph.swift:12:11: error: cannot call value of non-function type 'Int'\n    max = max(r, max(g, b))\n          ^\n/tmp/tmp1vwyevph.swift:12:18: error: cannot call value of non-function type 'Int'\n    max = max(r, max(g, b))\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h: Double = 0.0\n    var s: Double = 0.0\n    let v = max\n    \n    let d = max - min\n    \n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n    }\n    \n    h /= 6.0\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp1bkzeb8y.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1bkzeb8y.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1bkzeb8y.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let rgb_min: Int = min(r, g, b)\n    let rgb_max: Int = max(r, g, b)\n    \n    v = rgb_max\n    \n    let diff: Int = rgb_max - rgb_min\n    \n    if (rgb_max != 0) {\n        s = diff * 100 / rgb_max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if (r == rgb_max) {\n        h = (g - b) * 60 / diff\n    } else if (g == rgb_max) {\n        h = 120 + (b - r) * 60 / diff\n    } else {\n        h = 240 + (r - g) * 60 / diff\n    }\n    \n    if (h < 0) {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp0o8ikhjb.swift:51:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp0o8ikhjb.swift:52:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp0o8ikhjb.swift:53:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r1: Int = r / 255\n    let g1: Int = g / 255\n    let b1: Int = b / 255\n    let cmax: Int = max(r1, g1, b1)\n    let cmin: Int = min(r1, g1, b1)\n    let diff: Int = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == r1 {\n        h = 60 * ((g1 - b1) / diff)\n    } else if cmax == g1 {\n        h = 60 * ((b1 - r1) / diff) + 120\n    } else if cmax == b1 {\n        h = 60 * ((r1 - g1) / diff) + 240\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff / cmax\n    }\n    v = cmax\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpsczm23gx.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpsczm23gx.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpsczm23gx.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let max_ = max(r_, max(g_, b_))\n    let min_ = min(r_, min(g_, b_))\n    \n    if max_ == min_ {\n        h = 0\n    } else if max_ == r_ {\n        h = 60 * Int((g_ - b_) / (max_ - min_))\n    } else if max_ == g_ {\n        h = 60 * Int((b_ - r_) / (max_ - min_)) + 120\n    } else if max_ == b_ {\n        h = 60 * Int((r_ - g_) / (max_ - min_)) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if max_ == 0 {\n        s = 0\n    } else {\n        s = Int(100 * (max_ - min_) / max_)\n    }\n    \n    v = Int(max_ * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpyiev2mg3.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpyiev2mg3.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpyiev2mg3.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var rgbMin: Int = 0\n    var rgbMax: Int = 0\n    \n    rgbMin = min(r, g, b)\n    rgbMax = max(r, g, b)\n    \n    //Calculate value\n    v = rgbMax\n    \n    //Calculate saturation\n    if v == 0 {\n        s = 0\n    } else {\n        s = 255 * (rgbMax - rgbMin) / v\n    }\n    \n    //Calculate hue\n    if s == 0 {\n        h = 0\n    } else {\n        if r == rgbMax {\n            h = 0 + 43 * (g - b) / (rgbMax - rgbMin)\n        } else if g == rgbMax {\n            h = 85 + 43 * (b - r) / (rgbMax - rgbMin)\n        } else {\n            h = 171 + 43 * (r - g) / (rgbMax - rgbMin)\n        }\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpdv4ogaba.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpdv4ogaba.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpdv4ogaba.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    var min: Double = 0\n    var max: Double = 0\n    var delta: Double = 0\n    var r: Double = Double(r)\n    var g: Double = Double(g)\n    var b: Double = Double(b)\n    r /= 255\n    g /= 255\n    b /= 255\n    min = r\n    if g < min {\n        min = g\n    }\n    if b < min {\n        min = b\n    }\n    max = r\n    if g > max {\n        max = g\n    }\n    if b > max {\n        max = b\n    }\n    v = max\n    delta = max - min\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpj472m54z.swift:66:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpj472m54z.swift:67:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpj472m54z.swift:68:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    var h: Double = 0\n    var s: Double = 0\n    let v = max\n    \n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    \n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpaaqb14kd.swift:51:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpaaqb14kd.swift:52:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpaaqb14kd.swift:53:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    \n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        switch max {\n        case r:\n            h = (g - b) / d + (g < b ? 6 : 0)\n        case g:\n            h = (b - r) / d + 2\n        case b:\n            h = (r - g) / d + 4\n        default:\n            break\n        }\n        h /= 6\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpr91j75jo.swift:51:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpr91j75jo.swift:52:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpr91j75jo.swift:53:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = r / 255\n    let g = g / 255\n    let b = b / 255\n    let cmax = max(r, max(g, b))\n    let cmin = min(r, min(g, b))\n    let diff = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == r {\n        h = 60 * ((g - b) / diff) % 6\n    } else if cmax == g {\n        h = 60 * ((b - r) / diff) + 2\n    } else if cmax == b {\n        h = 60 * ((r - g) / diff) + 4\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff / cmax * 100\n    }\n    v = cmax * 100\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp1sq6u8x2.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1sq6u8x2.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1sq6u8x2.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = Float(r)\n    let g = Float(g)\n    let b = Float(b)\n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    let delta = max - min\n    v = Int(max)\n    if (max != 0) {\n        s = Int(delta / max * 100)\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if (r == max) {\n        h = Int((g - b) / delta)\n    } else if (g == max) {\n        h = Int(2 + (b - r) / delta)\n    } else {\n        h = Int(4 + (r - g) / delta)\n    }\n    h *= 60\n    if (h < 0) {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmplkjmnyvy.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmplkjmnyvy.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmplkjmnyvy.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h = max - min\n    var s = 0.0\n    var v = max\n    if max != 0 {\n        s = h / max\n    }\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / h\n        if g < b {\n            h += 360\n        }\n    } else if max == g {\n        h = 60 * (b - r) / h + 120\n    } else if max == b {\n        h = 60 * (r - g) / h + 240\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp12kkjo8v.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp12kkjo8v.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp12kkjo8v.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp12kkjo8v.swift:16:9: error: cannot assign to value: 'h' is a 'let' constant\n        h = 0\n        ^\n/tmp/tmp12kkjo8v.swift:9:5: note: change 'let' to 'var' to make it mutable\n    let h = max - min\n    ^~~\n    var\n/tmp/tmp12kkjo8v.swift:18:9: error: cannot assign to value: 'h' is a 'let' constant\n        h = 60 * (g - b) / h\n        ^\n/tmp/tmp12kkjo8v.swift:9:5: note: change 'let' to 'var' to make it mutable\n    let h = max - min\n    ^~~\n    var\n/tmp/tmp12kkjo8v.swift:20:15: error: left side of mutating operator isn't mutable: 'h' is a 'let' constant\n            h += 360\n            ~ ^\n/tmp/tmp12kkjo8v.swift:9:5: note: change 'let' to 'var' to make it mutable\n    let h = max - min\n    ^~~\n    var\n/tmp/tmp12kkjo8v.swift:23:9: error: cannot assign to value: 'h' is a 'let' constant\n        h = 60 * (b - r) / h + 120\n        ^\n/tmp/tmp12kkjo8v.swift:9:5: note: change 'let' to 'var' to make it mutable\n    let h = max - min\n    ^~~\n    var\n/tmp/tmp12kkjo8v.swift:25:9: er",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    \n    let rf: Float = Float(r) / 255.0\n    let gf: Float = Float(g) / 255.0\n    let bf: Float = Float(b) / 255.0\n    \n    let max: Float = max(rf, max(gf, bf))\n    let min: Float = min(rf, min(gf, bf))\n    \n    let diff: Float = max - min\n    \n    if max == min {\n        h = 0\n    } else if max == rf {\n        h = 60 * ((gf - bf) / diff)\n    } else if max == gf {\n        h = 60 * ((bf - rf) / diff) + 120\n    } else if max == bf {\n        h = 60 * ((rf - gf) / diff) + 240\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    \n    v = max\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpfe3owuxq.swift:51:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpfe3owuxq.swift:52:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpfe3owuxq.swift:53:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var rgbMin: Int = 0\n    var rgbMax: Int = 0\n    \n    rgbMin = min(r, g, b)\n    rgbMax = max(r, g, b)\n    \n    // Calculation of V\n    v = rgbMax\n    \n    if (v == 0) {\n        h = 0\n        s = 0\n        return [h, s, v]\n    }\n    \n    // Calculation of S\n    s = 255 * (rgbMax - rgbMin) / v\n    \n    if (s == 0) {\n        h = 0\n        return [h, s, v]\n    }\n    \n    // Calculation of H\n    if (rgbMax == r) {\n        h = 0 + 43 * (g - b) / (rgbMax - rgbMin)\n    }\n    else if (rgbMax == g) {\n        h = 85 + 43 * (b - r) / (rgbMax - rgbMin)\n    }\n    else {\n        h = 171 + 43 * (r - g) / (rgbMax - rgbMin)\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp3p5sm740.swift:57:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp3p5sm740.swift:58:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp3p5sm740.swift:59:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let cmax = max(r_, g_, b_)\n    let cmin = min(r_, g_, b_)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * ((g_ - b_) / delta).truncatingRemainder(dividingBy: 6)\n    } else if cmax == g_ {\n        h = 60 * ((b_ - r_) / delta + 2)\n    } else if cmax == b_ {\n        h = 60 * ((r_ - g_) / delta + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    \n    v = cmax\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpugwlqrul.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpugwlqrul.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpugwlqrul.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    rr = r\n    gg = g\n    bb = b\n    if rr > gg {\n        max = rr\n        if bb > max {\n            max = bb\n        }\n    } else {\n        max = gg\n        if bb > max {\n            max = bb\n        }\n    }\n    if rr < gg {\n        min = rr\n        if bb < min {\n            min = bb\n        }\n    } else {\n        min = gg\n        if bb < min {\n            min = bb\n        }\n    }\n    diff = max - min\n    v = max\n    if max != 0 {\n        s = diff * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if rr == max {\n        h = (gg - bb) * 60 / diff\n    } else if gg == max {\n        h = 120 + (bb - rr) * 60 / diff\n    } else {\n        h = 240 + (rr - gg) * 60 / diff\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp5lx7pqqs.swift:73:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp5lx7pqqs.swift:74:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp5lx7pqqs.swift:75:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    \n    max = max_of_three(a: r, b: g, c: b)\n    min = min_of_three(a: r, b: g, c: b)\n    diff = max - min\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    \n    v = max\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpou5tag9e.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpou5tag9e.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpou5tag9e.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpou5tag9e.swift:11:11: error: cannot find 'max_of_three' in scope\n    max = max_of_three(a: r, b: g, c: b)\n          ^~~~~~~~~~~~\n/tmp/tmpou5tag9e.swift:12:11: error: cannot find 'min_of_three' in scope\n    min = min_of_three(a: r, b: g, c: b)\n          ^~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    \n    let cmax = max(r, max(g, b))\n    let cmin = min(r, min(g, b))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r {\n        h = Int((g - b) / delta) % 6\n    } else if cmax == g {\n        h = Int((b - r) / delta) + 2\n    } else if cmax == b {\n        h = Int((r - g) / delta) + 4\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax / 255 * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp2_bx39k_.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp2_bx39k_.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp2_bx39k_.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    var max: Float = 0.0\n    var min: Float = 0.0\n    var diff: Float = 0.0\n    var r: Float = 0.0\n    var g: Float = 0.0\n    var b: Float = 0.0\n    var h_temp: Float = 0.0\n    var s_temp: Float = 0.0\n    var v_temp: Float = 0.0\n    var r_temp: Float = 0.0\n    var g_temp: Float = 0.0\n    var b_temp: Float = 0.0\n    var hsv_color: AnyHashable = [:]\n    r_temp = Float(r)\n    g_temp = Float(g)\n    b_temp = Float(b)\n    max = max(max(r_temp, g_temp), b_temp)\n    min = min(min(r_temp, g_temp), b_temp)\n    diff = max - min\n    v = max\n    if max != 0.0 {\n        s = diff / max\n    } else {\n        s = 0.0\n        h = -1.0\n        return hsv_color\n    }\n    if r_temp == max {\n        h_temp = (g_temp - b_temp) / diff\n    } else if g_temp == max {\n        h_temp = 2.0 + (b_temp - r_temp) / diff\n    } else {\n        h_temp = 4.0 + (r_temp - g_temp) / diff\n    }\n    h = h_temp * 60.0\n    if h < 0.0 {\n        h += 360.0\n    }\n    hsv_color = [\"h\": h, \"s\": s, \"v\": v]\n    return hsv_color\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp19zin9jx.swift:62:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp19zin9jx.swift:63:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp19zin9jx.swift:64:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp19zin9jx.swift:19:34: error: type 'Any' cannot conform to 'Hashable'\n    var hsv_color: AnyHashable = [:]\n                                 ^\n/tmp/tmp19zin9jx.swift:19:34: note: only concrete types such as structs, enums and classes can conform to protocols\n    var hsv_color: AnyHashable = [:]\n                                 ^\n/tmp/tmp19zin9jx.swift:19:34: note: requirement from conditional conformance of '[AnyHashable : Any]' to 'Hashable'\n    var hsv_color: AnyHashable = [:]\n                                 ^\n/tmp/tmp19zin9jx.swift:23:11: error: cannot call value of non-function type 'Float'\n    max = max(max(r_temp, g_temp), b_temp)\n          ^\n/tmp/tmp19zin9jx.swift:23:15: error: cannot call value of non-function type 'Float'\n    max = max(max(r_temp, g_temp), b_temp)\n              ^\n/tmp/tmp19zin9jx.swift:24:11: error: cannot call value of non-function type 'Float'\n    min = min(min(r_temp, g_temp), b_temp)\n          ^\n/tmp/tmp19zin9jx.swift:24:15: error: cann",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0\n    var s: Float = 0\n    var v: Float = 0\n    var min: Float = 0\n    var max: Float = 0\n    var delta: Float = 0\n    var rf: Float = 0\n    var gf: Float = 0\n    var bf: Float = 0\n    rf = Float(r) / 255\n    gf = Float(g) / 255\n    bf = Float(b) / 255\n    min = min(rf, min(gf, bf))\n    max = max(rf, max(gf, bf))\n    v = max\n    delta = max - min\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if rf == max {\n        h = (gf - bf) / delta\n    } else if gf == max {\n        h = 2 + (bf - rf) / delta\n    } else {\n        h = 4 + (rf - gf) / delta\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpg66egmik.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpg66egmik.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpg66egmik.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpg66egmik.swift:16:11: error: cannot call value of non-function type 'Float'\n    min = min(rf, min(gf, bf))\n          ^\n/tmp/tmpg66egmik.swift:16:19: error: cannot call value of non-function type 'Float'\n    min = min(rf, min(gf, bf))\n                  ^\n/tmp/tmpg66egmik.swift:17:11: error: cannot call value of non-function type 'Float'\n    max = max(rf, max(gf, bf))\n          ^\n/tmp/tmpg66egmik.swift:17:19: error: cannot call value of non-function type 'Float'\n    max = max(rf, max(gf, bf))\n                  ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255.0\n    let g = Float(g) / 255.0\n    let b = Float(b) / 255.0\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    let delta = max - min\n    v = max\n    if max != 0.0 {\n        s = delta / max\n    } else {\n        s = 0.0\n        h = -1.0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2.0 + (b - r) / delta\n    } else {\n        h = 4.0 + (r - g) / delta\n    }\n    h *= 60.0\n    if h < 0.0 {\n        h += 360.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpt7pcyz1j.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpt7pcyz1j.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpt7pcyz1j.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255.0\n    let g = Float(g) / 255.0\n    let b = Float(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h: Float = 0.0\n    var s: Float = 0.0\n    let v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n        h /= 6.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpgvbu2x56.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpgvbu2x56.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpgvbu2x56.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    var h = 0\n    var s = 0\n    var v = max\n    let d = max - min\n    if d != 0 {\n        s = d * 100 / max\n        if r == max {\n            h = (g - b) * 60 / d\n        } else if g == max {\n            h = (b - r) * 60 / d + 120\n        } else if b == max {\n            h = (r - g) * 60 / d + 240\n        }\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpshhdith6.swift:36:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpshhdith6.swift:37:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpshhdith6.swift:38:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpshhdith6.swift:8:9: warning: variable 'v' was never mutated; consider changing to 'let' constant\n    var v = max\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = r / 255.0\n    let g_ = g / 255.0\n    let b_ = b / 255.0\n    \n    let cmax = max(r_, g_, b_)\n    let cmin = min(r_, g_, b_)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * (((g_ - b_) / delta) % 6)\n    } else if cmax == g_ {\n        h = 60 * (((b_ - r_) / delta) + 2)\n    } else if cmax == b_ {\n        h = 60 * (((r_ - g_) / delta) + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpzlfq3fpz.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpzlfq3fpz.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpzlfq3fpz.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpzlfq3fpz.swift:8:16: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let r_ = r / 255.0\n             ~ ^ ~~~~~\n/tmp/tmpzlfq3fpz.swift:8:16: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let r_ = r / 255.0\n               ^\n/tmp/tmpzlfq3fpz.swift:9:16: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let g_ = g / 255.0\n             ~ ^ ~~~~~\n/tmp/tmpzlfq3fpz.swift:9:16: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let g_ = g / 255.0\n               ^\n/tmp/tmpzlfq3fpz.swift:10:16: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let b_ = b / 255.0\n             ~ ^ ~~~~~\n/tmp/tmpzlfq3fpz.swift:10:16: note: overloads for '/' exist with these partially matching parameter lists: (Double, Dou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255\n    let g_prime = Double(g) / 255\n    let b_prime = Double(b) / 255\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123533,
      "stdout": "",
      "stderr": "/tmp/tmpi87qy39h.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpi87qy39h.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpi87qy39h.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpi87qy39h.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    let h: Double\n    let s: Double\n    let v: Double\n    \n    v = max\n    \n    let diff = max - min\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp5rqodpnf.swift:59:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp5rqodpnf.swift:60:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp5rqodpnf.swift:61:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let cmax = max(r_, max(g_, b_))\n    let cmin = min(r_, min(g_, b_))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * ((Int(g_ - b_) / Int(delta)) % 6)\n    } else if cmax == g_ {\n        h = 60 * (((b_ - r_) / delta) + 2)\n    } else if cmax == b_ {\n        h = 60 * (((r_ - g_) / delta) + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123531,
      "stdout": "",
      "stderr": "/tmp/tmpm6yyqjxs.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpm6yyqjxs.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpm6yyqjxs.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpm6yyqjxs.swift:21:16: error: cannot assign value of type 'Double' to type 'Int'\n        h = 60 * (((b_ - r_) / delta) + 2)\n            ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n            Int(                          )\n/tmp/tmpm6yyqjxs.swift:23:16: error: cannot assign value of type 'Double' to type 'Int'\n        h = 60 * (((r_ - g_) / delta) + 4)\n            ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~\n            Int(                          )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, max(g_prime, b_prime))\n    let c_min = min(r_prime, min(g_prime, b_prime))\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int((g_prime - b_prime) / delta * 60)\n    } else if c_max == g_prime {\n        h = Int((b_prime - r_prime) / delta * 60 + 120)\n    } else if c_max == b_prime {\n        h = Int((r_prime - g_prime) / delta * 60 + 240)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpjilmy5ou.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpjilmy5ou.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpjilmy5ou.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    \n    rr = r\n    gg = g\n    bb = b\n    \n    if rr > gg {\n        max = rr\n        if bb > max {\n            max = bb\n        }\n    } else {\n        max = gg\n        if bb > max {\n            max = bb\n        }\n    }\n    \n    if rr < gg {\n        min = rr\n        if bb < min {\n            min = bb\n        }\n    } else {\n        min = gg\n        if bb < min {\n            min = bb\n        }\n    }\n    \n    diff = max - min\n    v = max\n    \n    if max != 0 {\n        s = (255 * diff) / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if rr == max {\n        h = (gg - bb) * 60 / diff\n    } else if gg == max {\n        h = 120 + (bb - rr) * 60 / diff\n    } else {\n        h = 240 + (rr - gg) * 60 / diff\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp_uxfqcv4.swift:81:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp_uxfqcv4.swift:82:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp_uxfqcv4.swift:83:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255\n    let g_prime = Double(g) / 255\n    let b_prime = Double(b) / 255\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510604,
      "stdout": "",
      "stderr": "/tmp/tmp047myc37.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp047myc37.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp047myc37.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp047myc37.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpjz367uz1.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpjz367uz1.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpjz367uz1.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h = 0\n    var s = 0\n    var v = 0\n    let r = r / 255\n    let g = g / 255\n    let b = b / 255\n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    v = max\n    let delta = max - min\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpk5zcuzks.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpk5zcuzks.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpk5zcuzks.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    let diff = max - min\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    v = max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp75u4do4r.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp75u4do4r.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp75u4do4r.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n    } else if c_max == g_prime {\n        h = Int(60 * (((b_prime - r_prime) / delta) + 2))\n    } else if c_max == b_prime {\n        h = Int(60 * (((r_prime - g_prime) / delta) + 4))\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123531,
      "stdout": "",
      "stderr": "/tmp/tmpm1robjen.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpm1robjen.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpm1robjen.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpm1robjen.swift:19:53: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n                                                    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    let h: Float\n    let s: Float\n    let v: Float\n    \n    v = max\n    \n    let delta = max - min\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / delta)\n    } else if max == g {\n        h = 60 * ((b - r) / delta) + 120\n    } else {\n        h = 60 * ((r - g) / delta) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpsqtnmcpg.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpsqtnmcpg.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpsqtnmcpg.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var min: Int = 0\n    var max: Int = 0\n    var diff: Int = 0\n    \n    min = min(r, g, b)\n    max = max(r, g, b)\n    v = max\n    \n    diff = max - min\n    if (max != 0) {\n        s = diff * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if (r == max) {\n        h = (g - b) * 60 / diff\n    } else if (g == max) {\n        h = 120 + (b - r) * 60 / diff\n    } else {\n        h = 240 + (r - g) * 60 / diff\n    }\n    \n    if (h < 0) {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp4rzddapp.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp4rzddapp.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp4rzddapp.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp4rzddapp.swift:11:11: error: cannot call value of non-function type 'Int'\n    min = min(r, g, b)\n          ^\n/tmp/tmp4rzddapp.swift:12:11: error: cannot call value of non-function type 'Int'\n    max = max(r, g, b)\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h: Double\n    let s: Double\n    let v: Double\n    v = max\n    let diff = max - min\n    if max == 0.0 {\n        s = 0.0\n    } else {\n        s = diff / max\n    }\n    if max == min {\n        h = 0.0\n    } else if max == r {\n        h = 60.0 * (g - b) / diff\n    } else if max == g {\n        h = 60.0 * (b - r) / diff + 120.0\n    } else {\n        h = 60.0 * (r - g) / diff + 240.0\n    }\n    if h < 0.0 {\n        h += 360.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpkwrrjrdx.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpkwrrjrdx.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpkwrrjrdx.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    \n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpzy8bemtu.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpzy8bemtu.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpzy8bemtu.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpzy8bemtu.swift:16:18: error: cannot assign value of type 'Float' to type 'Double'\n    s = max == 0 ? 0 : d / max\n        ~~~~~~~~~^~~~~~~~~~~~~\n        Double(               )\n/tmp/tmpzy8bemtu.swift:22:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (g - b) / d + (g < b ? 6 : 0)\n                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n                Double(                      )\n/tmp/tmpzy8bemtu.swift:24:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (b - r) / d + 2\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmpzy8bemtu.swift:26:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (r - g) / d + 4\n                ~~~~~~~~~~~~^~~\n                Double(        )\n/tmp/tmpzy8bemtu.swift:31:34: error: cannot convert value of type 'Float' to expected dictionary value type 'Double'\n    return [\"h\": h, \"s\": s, \"v\": v]\n                                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r_: Double = Double(r) / 255.0\n    let g_: Double = Double(g) / 255.0\n    let b_: Double = Double(b) / 255.0\n    let cmax: Double = max(r_, max(g_, b_))\n    let cmin: Double = min(r_, min(g_, b_))\n    let delta: Double = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = Int(((g_ - b_) / delta) * 60)\n    } else if cmax == g_ {\n        h = Int(((b_ - r_) / delta) * 60) + 120\n    } else if cmax == b_ {\n        h = Int(((r_ - g_) / delta) * 60) + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int((delta / cmax) * 100)\n    }\n    v = Int(cmax * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp470pbuh9.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp470pbuh9.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp470pbuh9.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255.0\n    let g = Float(g) / 255.0\n    let b = Float(b) / 255.0\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h: Float = 0.0\n    var s: Float = 0.0\n    let v = max\n    \n    let d = max - min\n    \n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n    }\n    \n    h /= 6.0\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp4u52pi4m.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp4u52pi4m.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp4u52pi4m.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var min: Int = 0\n    var max: Int = 0\n    var diff: Int = 0\n    \n    min = min(r, g, b)\n    max = max(r, g, b)\n    v = max\n    diff = max - min\n    if (max != 0) {\n        s = diff * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if (r == max) {\n        h = (g - b) * 60 / diff\n    } else if (g == max) {\n        h = 120 + (b - r) * 60 / diff\n    } else {\n        h = 240 + (r - g) * 60 / diff\n    }\n    if (h < 0) {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpryz5f299.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpryz5f299.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpryz5f299.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpryz5f299.swift:11:11: error: cannot call value of non-function type 'Int'\n    min = min(r, g, b)\n          ^\n/tmp/tmpryz5f299.swift:12:11: error: cannot call value of non-function type 'Int'\n    max = max(r, g, b)\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    var rr_: Int = 0\n    var gg_: Int = 0\n    var bb_: Int = 0\n    var hh: Int = 0\n    var ss: Int = 0\n    var vv: Int = 0\n    var hh_: Int = 0\n    var ss_: Int = 0\n    var vv_: Int = 0\n    var hh__: Int = 0\n    var ss__: Int = 0\n    var vv__: Int = 0\n    var hh___: Int = 0\n    var ss___: Int = 0\n    var vv___: Int = 0\n    var hh____: Int = 0\n    var ss____: Int = 0\n    var vv____: Int = 0\n    var hh_____: Int = 0\n    var ss_____: Int = 0\n    var vv_____: Int = 0\n    var hh______: Int = 0\n    var ss______: Int = 0\n    var vv______: Int = 0\n    var hh_______: Int = 0\n    var ss_______: Int = 0\n    var vv_______: Int = 0\n    var hh________: Int = 0\n    var ss________: Int = 0\n    var vv________: Int = 0\n    var hh_________: Int = 0\n    var ss_________: Int = 0\n    var vv_________: Int = 0\n    var hh__________: Int = 0\n    var ss__________: Int = 0\n    var vv__________: Int = 0\n    var hh___________: Int = 0\n    var ss___________: Int = 0\n    var vv___________: Int = 0\n    var hh____________: Int = 0\n    var ss____________: Int = 0\n    var vv____________: Int = 0\n    var hh_____________: Int = 0\n    var ss_____________: Int = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpg7tbsi25.swift:72:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpg7tbsi25.swift:73:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpg7tbsi25.swift:74:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpg7tbsi25.swift:4:9: warning: variable 'h' was never used; consider replacing with '_' or removing it\n    var h: Int = 0\n        ^\n        _\n/tmp/tmpg7tbsi25.swift:5:9: warning: variable 's' was never used; consider replacing with '_' or removing it\n    var s: Int = 0\n        ^\n        _\n/tmp/tmpg7tbsi25.swift:6:9: warning: variable 'v' was never used; consider replacing with '_' or removing it\n    var v: Int = 0\n        ^\n        _\n/tmp/tmpg7tbsi25.swift:7:9: warning: variable 'max' was never used; consider replacing with '_' or removing it\n    var max: Int = 0\n        ^~~\n        _\n/tmp/tmpg7tbsi25.swift:8:9: warning: variable 'min' was never used; consider replacing with '_' or removing it\n    var min: Int = 0\n        ^~~\n        _\n/tmp/tmpg7tbsi25.swift:9:9: warning: variable 'diff' was never used; consider replacing with '_' or removing it\n    var diff: Int = 0\n        ^~~~\n        _\n/tmp/tmpg7tbsi25.swift:10:9: warning: variable 'rr' was never used; consider r",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp1ebwx0eu.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1ebwx0eu.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1ebwx0eu.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255\n    let g_prime = Double(g) / 255\n    let b_prime = Double(b) / 255\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n    } else if c_max == g_prime {\n        h = Int(60 * (((b_prime - r_prime) / delta) + 2))\n    } else if c_max == b_prime {\n        h = Int(60 * (((r_prime - g_prime) / delta) + 4))\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123531,
      "stdout": "",
      "stderr": "/tmp/tmpb1xw02hw.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpb1xw02hw.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpb1xw02hw.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpb1xw02hw.swift:19:53: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n                                                    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta.truncatingRemainder(dividingBy: 6)))\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta.truncatingRemainder(dividingBy: 6))) + 120\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta.truncatingRemainder(dividingBy: 6))) + 240\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp4iphm8en.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp4iphm8en.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp4iphm8en.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let rf: Float = Float(r)\n    let gf: Float = Float(g)\n    let bf: Float = Float(b)\n    \n    let max: Float = max(rf, max(gf, bf))\n    let min: Float = min(rf, min(gf, bf))\n    \n    v = Int(max)\n    \n    if (max == 0.0) {\n        s = 0\n        h = 0\n    } else if (max - min == 0.0) {\n        s = 0\n        h = 0\n    } else {\n        s = Int((max - min) / max * 100)\n        \n        if (max == rf) {\n            h = Int((gf - bf) / (max - min) * 60)\n        } else if (max == gf) {\n            h = Int((bf - rf) / (max - min) * 60) + 120\n        } else if (max == bf) {\n            h = Int((rf - gf) / (max - min) * 60) + 240\n        }\n        \n        if (h < 0) {\n            h += 360\n        }\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp3c3sqvwq.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp3c3sqvwq.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp3c3sqvwq.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let rf = Float(r) / 255\n    let gf = Float(g) / 255\n    let bf = Float(b) / 255\n    let cmax = max(rf, max(gf, bf))\n    let cmin = min(rf, min(gf, bf))\n    let delta = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == rf {\n        h = Int((gf - bf) / delta * 60)\n    } else if cmax == gf {\n        h = Int((bf - rf) / delta * 60 + 120)\n    } else if cmax == bf {\n        h = Int((rf - gf) / delta * 60 + 240)\n    }\n    if h < 0 {\n        h += 360\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    v = Int(cmax * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpo1c6pnmv.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpo1c6pnmv.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpo1c6pnmv.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    var cmax: Int = 0\n    var cmin: Int = 0\n    var diff: Int = 0\n    var rr_: Int = 0\n    var gg_: Int = 0\n    var bb_: Int = 0\n    rr = r\n    gg = g\n    bb = b\n    cmax = max(rr, gg, bb)\n    cmin = min(rr, gg, bb)\n    diff = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == rr {\n        h = 60 * ((gg - bb) / diff)\n    } else if cmax == gg {\n        h = 60 * ((bb - rr) / diff + 2)\n    } else if cmax == bb {\n        h = 60 * ((rr - gg) / diff + 4)\n    }\n    if h < 0 {\n        h += 360\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff * 100 / cmax\n    }\n    v = cmax * 100 / 255\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpn_kvs6m2.swift:56:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpn_kvs6m2.swift:57:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpn_kvs6m2.swift:58:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpn_kvs6m2.swift:13:9: warning: variable 'rr_' was never used; consider replacing with '_' or removing it\n    var rr_: Int = 0\n        ^~~\n        _\n/tmp/tmpn_kvs6m2.swift:14:9: warning: variable 'gg_' was never used; consider replacing with '_' or removing it\n    var gg_: Int = 0\n        ^~~\n        _\n/tmp/tmpn_kvs6m2.swift:15:9: warning: variable 'bb_' was never used; consider replacing with '_' or removing it\n    var bb_: Int = 0\n        ^~~\n        _\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    var h: Double = 0\n    var s: Double = 0\n    let v = max\n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp8fm8nfuk.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp8fm8nfuk.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp8fm8nfuk.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    \n    let rd = Double(r) / 255\n    let gd = Double(g) / 255\n    let bd = Double(b) / 255\n    \n    let max = max(rd, gd, bd)\n    let min = min(rd, gd, bd)\n    \n    v = max\n    \n    let delta = max - min\n    \n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if rd == max {\n        h = (gd - bd) / delta\n    } else if gd == max {\n        h = 2 + (bd - rd) / delta\n    } else {\n        h = 4 + (rd - gd) / delta\n    }\n    \n    h *= 60\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpc_j5_cnh.swift:57:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpc_j5_cnh.swift:58:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpc_j5_cnh.swift:59:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    var max: Float = 0.0\n    var min: Float = 0.0\n    var diff: Float = 0.0\n    var r1: Float = 0.0\n    var g1: Float = 0.0\n    var b1: Float = 0.0\n    var h1: Float = 0.0\n    var s1: Float = 0.0\n    var v1: Float = 0.0\n    var h2: Float = 0.0\n    var s2: Float = 0.0\n    var v2: Float = 0.0\n    var h3: Float = 0.0\n    var s3: Float = 0.0\n    var v3: Float = 0.0\n    var h4: Float = 0.0\n    var s4: Float = 0.0\n    var v4: Float = 0.0\n    var h5: Float = 0.0\n    var s5: Float = 0.0\n    var v5: Float = 0.0\n    var h6: Float = 0.0\n    var s6: Float = 0.0\n    var v6: Float = 0.0\n    var h7: Float = 0.0\n    var s7: Float = 0.0\n    var v7: Float = 0.0\n    var h8: Float = 0.0\n    var s8: Float = 0.0\n    var v8: Float = 0.0\n    var h9: Float = 0.0\n    var s9: Float = 0.0\n    var v9: Float = 0.0\n    var h10: Float = 0.0\n    var s10: Float = 0.0\n    var v10: Float = 0.0\n    var h11: Float = 0.0\n    var s11: Float = 0.0\n    var v11: Float = 0.0\n    var h12: Float = 0.0\n    var s12: Float = 0.0\n    var v12: Float = 0.0\n    var h13: Float = 0.0\n    var s13: Float = 0.0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp548o6doq.swift:67:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp548o6doq.swift:68:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp548o6doq.swift:69:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp548o6doq.swift:4:9: warning: variable 'h' was never used; consider replacing with '_' or removing it\n    var h: Float = 0.0\n        ^\n        _\n/tmp/tmp548o6doq.swift:5:9: warning: variable 's' was never used; consider replacing with '_' or removing it\n    var s: Float = 0.0\n        ^\n        _\n/tmp/tmp548o6doq.swift:6:9: warning: variable 'v' was never used; consider replacing with '_' or removing it\n    var v: Float = 0.0\n        ^\n        _\n/tmp/tmp548o6doq.swift:7:9: warning: variable 'max' was never used; consider replacing with '_' or removing it\n    var max: Float = 0.0\n        ^~~\n        _\n/tmp/tmp548o6doq.swift:8:9: warning: variable 'min' was never used; consider replacing with '_' or removing it\n    var min: Float = 0.0\n        ^~~\n        _\n/tmp/tmp548o6doq.swift:9:9: warning: variable 'diff' was never used; consider replacing with '_' or removing it\n    var diff: Float = 0.0\n        ^~~~\n        _\n/tmp/tmp548o6doq.swift:10:9: warning: variable 'r1' wa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h = 0.0\n    let s = 0.0\n    let v = 0.0\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / (max - min)\n    } else if max == g {\n        h = 60 * (b - r) / (max - min) + 120\n    } else if max == b {\n        h = 60 * (r - g) / (max - min) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = 1 - min / max\n    }\n    v = max / 255\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp6ogzqwl3.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp6ogzqwl3.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp6ogzqwl3.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp6ogzqwl3.swift:13:9: error: cannot assign to value: 'h' is a 'let' constant\n        h = 0\n        ^\n/tmp/tmp6ogzqwl3.swift:9:5: note: change 'let' to 'var' to make it mutable\n    let h = 0.0\n    ^~~\n    var\n/tmp/tmp6ogzqwl3.swift:15:9: error: cannot assign to value: 'h' is a 'let' constant\n        h = 60 * (g - b) / (max - min)\n        ^\n/tmp/tmp6ogzqwl3.swift:9:5: note: change 'let' to 'var' to make it mutable\n    let h = 0.0\n    ^~~\n    var\n/tmp/tmp6ogzqwl3.swift:17:9: error: cannot assign to value: 'h' is a 'let' constant\n        h = 60 * (b - r) / (max - min) + 120\n        ^\n/tmp/tmp6ogzqwl3.swift:9:5: note: change 'let' to 'var' to make it mutable\n    let h = 0.0\n    ^~~\n    var\n/tmp/tmp6ogzqwl3.swift:19:9: error: cannot assign to value: 'h' is a 'let' constant\n        h = 60 * (r - g) / (max - min) + 240\n        ^\n/tmp/tmp6ogzqwl3.swift:9:5: note: change 'let' to 'var' to make it mutable\n    let h = 0.0\n    ^~~\n    var\n/tmp/tmp6ogzqwl3.swift:22:9: error: cann",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    var h = 0.0\n    var s = 0.0\n    var v = max\n    if max == min {\n        h = 0.0\n    } else if max == r {\n        h = 60.0 * (g - b) / diff\n    } else if max == g {\n        h = 60.0 * (b - r) / diff + 120.0\n    } else if max == b {\n        h = 60.0 * (r - g) / diff + 240.0\n    }\n    if h < 0.0 {\n        h += 360.0\n    }\n    if max == 0.0 {\n        s = 0.0\n    } else {\n        s = diff / max\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp_b2oopbh.swift:46:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp_b2oopbh.swift:47:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp_b2oopbh.swift:48:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp_b2oopbh.swift:12:9: warning: variable 'v' was never mutated; consider changing to 'let' constant\n    var v = max\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = r / 255\n    let g = g / 255\n    let b = b / 255\n    let cmax = max(r, g, b)\n    let cmin = min(r, g, b)\n    let diff = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == r {\n        h = 60 * ((g - b) / diff)\n    } else if cmax == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if cmax == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff / cmax\n    }\n    v = cmax\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmppg31v46w.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmppg31v46w.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmppg31v46w.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var rgbMin: Int = 0\n    var rgbMax: Int = 0\n    \n    rgbMin = min(r, g, b)\n    rgbMax = max(r, g, b)\n    \n    // calculate value\n    v = rgbMax\n    \n    // calculate saturation\n    if v == 0 {\n        s = 0\n    } else {\n        s = Int(Double(rgbMax - rgbMin) / Double(v) * 255.0)\n    }\n    \n    // calculate hue\n    if s == 0 {\n        h = 0\n    } else {\n        if r == rgbMax {\n            h = Int(Double(g - b) / Double(rgbMax - rgbMin) * 60.0)\n        } else if g == rgbMax {\n            h = Int(Double(b - r) / Double(rgbMax - rgbMin) * 60.0) + 120\n        } else if b == rgbMax {\n            h = Int(Double(r - g) / Double(rgbMax - rgbMin) * 60.0) + 240\n        }\n        \n        if h < 0 {\n            h += 360\n        }\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpjm0srk1x.swift:56:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpjm0srk1x.swift:57:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpjm0srk1x.swift:58:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    var max: Double = 0\n    var min: Double = 0\n    var diff: Double = 0\n    var r: Double = Double(r)\n    var g: Double = Double(g)\n    var b: Double = Double(b)\n    max = r\n    if g > max {\n        max = g\n    }\n    if b > max {\n        max = b\n    }\n    min = r\n    if g < min {\n        min = g\n    }\n    if b < min {\n        min = b\n    }\n    diff = max - min\n    v = max\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    if s == 0 {\n        h = 0\n    } else {\n        if r == max {\n            h = (g - b) / diff\n        } else if g == max {\n            h = 2 + (b - r) / diff\n        } else if b == max {\n            h = 4 + (r - g) / diff\n        }\n        h *= 60\n        if h < 0 {\n            h += 360\n        }\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpy7lux40w.swift:65:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpy7lux40w.swift:66:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpy7lux40w.swift:67:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpy7lux40w.swift:10:9: warning: variable 'r' was never mutated; consider changing to 'let' constant\n    var r: Double = Double(r)\n    ~~~ ^\n    let\n/tmp/tmpy7lux40w.swift:11:9: warning: variable 'g' was never mutated; consider changing to 'let' constant\n    var g: Double = Double(g)\n    ~~~ ^\n    let\n/tmp/tmpy7lux40w.swift:12:9: warning: variable 'b' was never mutated; consider changing to 'let' constant\n    var b: Double = Double(b)\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var r = r\n    var g = g\n    var b = b\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var min: Int = 0\n    var max: Int = 0\n    var delta: Int = 0\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    min = min(r, g, b)\n    max = max(r, g, b)\n    v = Double(max)\n    delta = max - min\n    if max != 0 {\n        s = Double(delta) / Double(max)\n    } else {\n        s = 0.0\n        h = -1.0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = Double(g - b) / Double(delta)\n    } else if g == max {\n        h = 2.0 + Double(b - r) / Double(delta)\n    } else {\n        h = 4.0 + Double(r - g) / Double(delta)\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpckc3ai7j.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpckc3ai7j.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpckc3ai7j.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpckc3ai7j.swift:16:11: error: cannot call value of non-function type 'Int'\n    min = min(r, g, b)\n          ^\n/tmp/tmpckc3ai7j.swift:17:11: error: cannot call value of non-function type 'Int'\n    max = max(r, g, b)\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    var rr_: Int = 0\n    var gg_: Int = 0\n    var bb_: Int = 0\n    var hh: Int = 0\n    var ss: Int = 0\n    var vv: Int = 0\n    var rr_1: Int = 0\n    var gg_1: Int = 0\n    var bb_1: Int = 0\n    var rr_2: Int = 0\n    var gg_2: Int = 0\n    var bb_2: Int = 0\n    var rr_3: Int = 0\n    var gg_3: Int = 0\n    var bb_3: Int = 0\n    var rr_4: Int = 0\n    var gg_4: Int = 0\n    var bb_4: Int = 0\n    var rr_5: Int = 0\n    var gg_5: Int = 0\n    var bb_5: Int = 0\n    var rr_6: Int = 0\n    var gg_6: Int = 0\n    var bb_6: Int = 0\n    var rr_7: Int = 0\n    var gg_7: Int = 0\n    var bb_7: Int = 0\n    var rr_8: Int = 0\n    var gg_8: Int = 0\n    var bb_8: Int = 0\n    var rr_9: Int = 0\n    var gg_9: Int = 0\n    var bb_9: Int = 0\n    var rr_10: Int = 0\n    var gg_10: Int = 0\n    var bb_10: Int = 0\n    var rr_11: Int = 0\n    var gg_11: Int = 0\n    var bb_11: Int = 0\n    var rr_12: Int = 0\n    var gg_12\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp0n1i5z5a.swift:69:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp0n1i5z5a.swift:70:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp0n1i5z5a.swift:71:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp0n1i5z5a.swift:53:9: error: type annotation missing in pattern\n    var gg_12\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    var h: Float = 0\n    var s: Float = 0\n    let v = max\n    \n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    \n    if max == min {\n        h = 0\n    } else {\n        switch max {\n        case r:\n            h = (g - b) / d + (g < b ? 6 : 0)\n        case g:\n            h = (b - r) / d + 2\n        case b:\n            h = (r - g) / d + 4\n        default:\n            break\n        }\n        h /= 6\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmppq5xgs11.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmppq5xgs11.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmppq5xgs11.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    // TODO: Implement\n    return [:]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpdsixrmbz.swift:21:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpdsixrmbz.swift:22:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpdsixrmbz.swift:23:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpdsixrmbz.swift:5:12: error: type 'Any' cannot conform to 'Hashable'\n    return [:]\n           ^\n/tmp/tmpdsixrmbz.swift:5:12: note: only concrete types such as structs, enums and classes can conform to protocols\n    return [:]\n           ^\n/tmp/tmpdsixrmbz.swift:5:12: note: requirement from conditional conformance of '[AnyHashable : Any]' to 'Hashable'\n    return [:]\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r)\n    let g = Float(g)\n    let b = Float(b)\n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    let diff = max - min\n    var h: Float = 0\n    var s: Float = 0\n    let v = max\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpuue0sx8i.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpuue0sx8i.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpuue0sx8i.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let rr = Double(r) / 255.0\n    let gg = Double(g) / 255.0\n    let bb = Double(b) / 255.0\n    \n    let minValue = min(rr, gg, bb)\n    let maxValue = max(rr, gg, bb)\n    let delta = maxValue - minValue\n    \n    v = Int(maxValue * 100)\n    \n    if delta == 0 {\n        h = 0\n        s = 0\n    } else {\n        s = Int(delta / maxValue * 100)\n        \n        if rr == maxValue {\n            h = Int((gg - bb) / delta * 60)\n        } else if gg == maxValue {\n            h = Int(120 + (bb - rr) / delta * 60)\n        } else {\n            h = Int(240 + (rr - gg) / delta * 60)\n        }\n        \n        if h < 0 {\n            h += 360\n        }\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpcmtnc8mr.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpcmtnc8mr.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpcmtnc8mr.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / diff\n    } else if max == g {\n        h = 60 * (b - r) / diff + 120\n    } else if max == b {\n        h = 60 * (r - g) / diff + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpu5n5je76.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpu5n5je76.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpu5n5je76.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var cmax: Int = 0\n    var cmin: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    \n    rr = r\n    gg = g\n    bb = b\n    cmax = max(max(rr, gg), bb)\n    cmin = min(min(rr, gg), bb)\n    diff = cmax - cmin\n    \n    if cmax == cmin {\n        h = 0\n    } else if cmax == rr {\n        h = 60 * ((gg - bb) / diff)\n    } else if cmax == gg {\n        h = 60 * ((bb - rr) / diff + 2)\n    } else if cmax == bb {\n        h = 60 * ((rr - gg) / diff + 4)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff * 100 / cmax\n    }\n    \n    v = cmax * 100 / 255\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpsvcc2_fz.swift:59:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpsvcc2_fz.swift:60:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpsvcc2_fz.swift:61:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, max(g_prime, b_prime))\n    let c_min = min(r_prime, min(g_prime, b_prime))\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if c_max == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123487,
      "stdout": "",
      "stderr": "/tmp/tmpng5123a1.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpng5123a1.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpng5123a1.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpng5123a1.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0\n    var s: Float = 0\n    var v: Float = 0\n    let rf: Float = Float(r) / 255.0\n    let gf: Float = Float(g) / 255.0\n    let bf: Float = Float(b) / 255.0\n    let cmax: Float = max(rf, max(gf, bf))\n    let cmin: Float = min(rf, min(gf, bf))\n    let delta: Float = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == rf {\n        h = 60 * ((gf - bf) / delta)\n    } else if cmax == gf {\n        h = 60 * ((bf - rf) / delta + 2)\n    } else if cmax == bf {\n        h = 60 * ((rf - gf) / delta + 4)\n    }\n    if h < 0 {\n        h += 360\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    v = cmax\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp0brrx90c.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp0brrx90c.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp0brrx90c.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h: Double = 0\n    var s: Double = 0\n    let v = max\n    \n    let d = max - min\n    \n    if max != 0 {\n        s = d / max\n    } else {\n        s = 0\n        h = -1\n    }\n    \n    if r == max {\n        h = (g - b) / d\n    } else if g == max {\n        h = 2 + (b - r) / d\n    } else {\n        h = 4 + (r - g) / d\n    }\n    \n    h *= 60\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp5xz7erj1.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp5xz7erj1.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp5xz7erj1.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    var v = 0.0\n    \n    v = max\n    \n    let delta = max - min\n    \n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [h, s, v]\n    }\n    \n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    \n    h *= 60\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpfc_5qh2u.swift:57:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpfc_5qh2u.swift:58:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpfc_5qh2u.swift:59:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r = r / 255\n    let g = g / 255\n    let b = b / 255\n    \n    let min = min(r, g, b)\n    let max = max(r, g, b)\n    let delta = max - min\n    \n    v = max\n    \n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    \n    h *= 60\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpodso2n5p.swift:56:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpodso2n5p.swift:57:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpodso2n5p.swift:58:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, max(g_prime, b_prime))\n    let c_min = min(r_prime, min(g_prime, b_prime))\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int((g_prime - b_prime) / delta * 60)\n    } else if c_max == g_prime {\n        h = Int((b_prime - r_prime) / delta * 60 + 120)\n    } else if c_max == b_prime {\n        h = Int((r_prime - g_prime) / delta * 60 + 240)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpjilmy5ou.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpjilmy5ou.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpjilmy5ou.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    let cmax = max(r_, max(g_, b_))\n    let cmin = min(r_, min(g_, b_))\n    let delta = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = Int(60 * ((g_ - b_) / delta) + 360) % 360\n    } else if cmax == g_ {\n        h = Int(60 * ((b_ - r_) / delta) + 120)\n    } else if cmax == b_ {\n        h = Int(60 * ((r_ - g_) / delta) + 240)\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    v = Int(cmax * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpdsfq4htv.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpdsfq4htv.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpdsfq4htv.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r1 = Double(r) / 255\n    let g1 = Double(g) / 255\n    let b1 = Double(b) / 255\n    \n    let cmax = max(r1, max(g1, b1))\n    let cmin = min(r1, min(g1, b1))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r1 {\n        h = 60 * ((Int(g1 - b1) / Int(delta)) % 6)\n    } else if cmax == g1 {\n        h = 60 * ((Int(b1 - r1) / Int(delta)) + 2)\n    } else if cmax == b1 {\n        h = 60 * ((Int(r1 - g1) / Int(delta)) + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp2v_kvru8.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp2v_kvru8.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp2v_kvru8.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    var max: Float = 0.0\n    var min: Float = 0.0\n    var diff: Float = 0.0\n    var r: Float = Float(r)\n    var g: Float = Float(g)\n    var b: Float = Float(b)\n    max = max(max(r, g), b)\n    min = min(min(r, g), b)\n    diff = max - min\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    v = max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp51siyxqq.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp51siyxqq.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp51siyxqq.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp51siyxqq.swift:13:11: error: cannot call value of non-function type 'Float'\n    max = max(max(r, g), b)\n          ^\n/tmp/tmp51siyxqq.swift:13:15: error: cannot call value of non-function type 'Float'\n    max = max(max(r, g), b)\n              ^\n/tmp/tmp51siyxqq.swift:14:11: error: cannot call value of non-function type 'Float'\n    min = min(min(r, g), b)\n          ^\n/tmp/tmp51siyxqq.swift:14:15: error: cannot call value of non-function type 'Float'\n    min = min(min(r, g), b)\n              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp64fma5g0.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp64fma5g0.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp64fma5g0.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let cmax = max(r_, g_, b_)\n    let cmin = min(r_, g_, b_)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * ((g_ - b_) / delta)\n    } else if cmax == g_ {\n        h = 60 * ((b_ - r_) / delta + 2)\n    } else if cmax == b_ {\n        h = 60 * ((r_ - g_) / delta + 4)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    \n    v = cmax\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpnbr8odag.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpnbr8odag.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpnbr8odag.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    var h: Double = 0.0\n    var s: Double = 0.0\n    let v = max\n    \n    let diff = max - min\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (g - b) / diff\n    } else if max == g {\n        h = 60 * (b - r) / diff + 120\n    } else if max == b {\n        h = 60 * (r - g) / diff + 240\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    \n    h = h.truncatingRemainder(dividingBy: 360)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp9p5brw2y.swift:51:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp9p5brw2y.swift:52:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp9p5brw2y.swift:53:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpm_2k4s_q.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpm_2k4s_q.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpm_2k4s_q.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    rr = r\n    gg = g\n    bb = b\n    if rr > gg {\n        max = rr\n        if bb > max {\n            max = bb\n        }\n    } else {\n        max = gg\n        if bb > max {\n            max = bb\n        }\n    }\n    if rr < gg {\n        min = rr\n        if bb < min {\n            min = bb\n        }\n    } else {\n        min = gg\n        if bb < min {\n            min = bb\n        }\n    }\n    diff = max - min\n    v = max\n    if max != 0 {\n        s = (255 * diff) / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if rr == max {\n        h = (gg - bb) * 60 / diff\n    } else if gg == max {\n        h = 120 + (bb - rr) * 60 / diff\n    } else {\n        h = 240 + (rr - gg) * 60 / diff\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpoxnu6n76.swift:73:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpoxnu6n76.swift:74:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpoxnu6n76.swift:75:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let rf: Float = Float(r) / 255.0\n    let gf: Float = Float(g) / 255.0\n    let bf: Float = Float(b) / 255.0\n    let max_val: Float = max(rf, max(gf, bf))\n    let min_val: Float = min(rf, min(gf, bf))\n    let diff: Float = max_val - min_val\n    if max_val == min_val {\n        h = 0\n    } else if max_val == rf {\n        h = Int(60 * ((gf - bf) / diff) + 360) % 360\n    } else if max_val == gf {\n        h = Int(60 * ((bf - rf) / diff) + 120)\n    } else if max_val == bf {\n        h = Int(60 * ((rf - gf) / diff) + 240)\n    }\n    if max_val == 0 {\n        s = 0\n    } else {\n        s = Int(diff / max_val * 100)\n    }\n    v = Int(max_val * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpxjz42ibn.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpxjz42ibn.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpxjz42ibn.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h = 0\n    var s = 0\n    var v = 0\n    \n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    \n    let cmax = max(r, max(g, b))\n    let cmin = min(r, min(g, b))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r {\n        h = Int((g - b) / delta) % 6\n    } else if cmax == g {\n        h = Int((b - r) / delta) + 2\n    } else if cmax == b {\n        h = Int((r - g) / delta) + 4\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax / 255 * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp2qrdzpwi.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp2qrdzpwi.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp2qrdzpwi.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h: Double = 0\n    var s: Double = 0\n    let v = max\n    \n    let diff = max - min\n    s = max == 0 ? 0 : diff / max\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = (g - b) / diff + (g < b ? 6 : 0)\n    } else if max == g {\n        h = (b - r) / diff + 2\n    } else if max == b {\n        h = (r - g) / diff + 4\n    }\n    \n    h /= 6\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp62vdh4y9.swift:45:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp62vdh4y9.swift:46:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp62vdh4y9.swift:47:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var min: Int = 0\n    var max: Int = 0\n    var diff: Int = 0\n    \n    min = min(r, min(g, b))\n    max = max(r, max(g, b))\n    diff = max - min\n    v = max\n    \n    if max != 0 {\n        s = diff * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if r == max {\n        h = (g - b) * 60 / diff\n    } else if g == max {\n        h = 120 + (b - r) * 60 / diff\n    } else {\n        h = 240 + (r - g) * 60 / diff\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp_e9rzl43.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp_e9rzl43.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp_e9rzl43.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp_e9rzl43.swift:11:11: error: cannot call value of non-function type 'Int'\n    min = min(r, min(g, b))\n          ^\n/tmp/tmp_e9rzl43.swift:11:18: error: cannot call value of non-function type 'Int'\n    min = min(r, min(g, b))\n                 ^\n/tmp/tmp_e9rzl43.swift:12:11: error: cannot call value of non-function type 'Int'\n    max = max(r, max(g, b))\n          ^\n/tmp/tmp_e9rzl43.swift:12:18: error: cannot call value of non-function type 'Int'\n    max = max(r, max(g, b))\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: CGFloat = 0\n    var s: CGFloat = 0\n    var v: CGFloat = 0\n    let color = UIColor(red: CGFloat(r) / 255, green: CGFloat(g) / 255, blue: CGFloat(b) / 255, alpha: 1)\n    color.getHue(&h, saturation: &s, brightness: &v, alpha: nil)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpwqka48dr.swift:25:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpwqka48dr.swift:26:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpwqka48dr.swift:27:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpwqka48dr.swift:4:12: error: cannot find type 'CGFloat' in scope\n    var h: CGFloat = 0\n           ^~~~~~~\n/tmp/tmpwqka48dr.swift:5:12: error: cannot find type 'CGFloat' in scope\n    var s: CGFloat = 0\n           ^~~~~~~\n/tmp/tmpwqka48dr.swift:6:12: error: cannot find type 'CGFloat' in scope\n    var v: CGFloat = 0\n           ^~~~~~~\n/tmp/tmpwqka48dr.swift:7:17: error: cannot find 'UIColor' in scope\n    let color = UIColor(red: CGFloat(r) / 255, green: CGFloat(g) / 255, blue: CGFloat(b) / 255, alpha: 1)\n                ^~~~~~~\n/tmp/tmpwqka48dr.swift:7:30: error: cannot find 'CGFloat' in scope\n    let color = UIColor(red: CGFloat(r) / 255, green: CGFloat(g) / 255, blue: CGFloat(b) / 255, alpha: 1)\n                             ^~~~~~~\n/tmp/tmpwqka48dr.swift:7:55: error: cannot find 'CGFloat' in scope\n    let color = UIColor(red: CGFloat(r) / 255, green: CGFloat(g) / 255, blue: CGFloat(b) / 255, alpha: 1)\n                                                      ^~~~~~~\n/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, max(g_prime, b_prime))\n    let c_min = min(r_prime, min(g_prime, b_prime))\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = Int(((g_prime - b_prime) / delta) * 60)\n    } else if c_max == g_prime {\n        h = Int((((b_prime - r_prime) / delta) + 2) * 60)\n    } else if c_max == b_prime {\n        h = Int((((r_prime - g_prime) / delta) + 4) * 60)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpwc_1uvj_.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpwc_1uvj_.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpwc_1uvj_.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n    }\n    \n    h /= 6.0\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpqqj1b9wy.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpqqj1b9wy.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpqqj1b9wy.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    \n    let r_f = Float(r) / 255.0\n    let g_f = Float(g) / 255.0\n    let b_f = Float(b) / 255.0\n    \n    let cmax = max(r_f, max(g_f, b_f))\n    let cmin = min(r_f, min(g_f, b_f))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_f {\n        h = 60 * ((g_f - b_f) / delta)\n    } else if cmax == g_f {\n        h = 60 * ((b_f - r_f) / delta + 2)\n    } else if cmax == b_f {\n        h = 60 * ((r_f - g_f) / delta + 4)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    \n    v = cmax\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpfa_w1_0s.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpfa_w1_0s.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpfa_w1_0s.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = d / max\n    }\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / d)\n    } else if max == g {\n        h = 60 * ((b - r) / d) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / d) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp9kjsm9j6.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp9kjsm9j6.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp9kjsm9j6.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    let delta = max - min\n    v = max\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp7ebwowj4.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp7ebwowj4.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp7ebwowj4.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    \n    let r_ = Float(r)\n    let g_ = Float(g)\n    let b_ = Float(b)\n    \n    let max_ = max(r_, max(g_, b_))\n    let min_ = min(r_, min(g_, b_))\n    \n    if max_ == min_ {\n        h = 0\n    } else if max_ == r_ {\n        h = 60 * (g_ - b_) / (max_ - min_)\n    } else if max_ == g_ {\n        h = 60 * (b_ - r_) / (max_ - min_) + 120\n    } else if max_ == b_ {\n        h = 60 * (r_ - g_) / (max_ - min_) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if max_ == 0 {\n        s = 0\n    } else {\n        s = 1 - min_ / max_\n    }\n    \n    v = max_\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmppkbzhh_7.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmppkbzhh_7.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmppkbzhh_7.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    \n    let rd = Double(r)\n    let gd = Double(g)\n    let bd = Double(b)\n    \n    let cmax = max(rd, gd, bd)\n    let cmin = min(rd, gd, bd)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == rd {\n        h = 60 * ((gd - bd) / delta).truncatingRemainder(dividingBy: 6)\n    } else if cmax == gd {\n        h = 60 * ((bd - rd) / delta + 2)\n    } else if cmax == bd {\n        h = 60 * ((rd - gd) / delta + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    \n    v = cmax\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmphmyit4wn.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmphmyit4wn.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmphmyit4wn.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var max: Double = 0.0\n    var min: Double = 0.0\n    var diff: Double = 0.0\n    var r: Double = Double(r)\n    var g: Double = Double(g)\n    var b: Double = Double(b)\n    max = max(r, max(g, b))\n    min = min(r, min(g, b))\n    diff = max - min\n    v = max\n    if max == 0.0 {\n        s = 0.0\n    } else {\n        s = diff / max\n    }\n    if s == 0.0 {\n        h = 0.0\n    } else {\n        if r == max {\n            h = (g - b) / diff\n        } else if g == max {\n            h = 2.0 + (b - r) / diff\n        } else if b == max {\n            h = 4.0 + (r - g) / diff\n        }\n        h = h * 60.0\n        if h < 0.0 {\n            h = h + 360.0\n        }\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmptrl_cgt9.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmptrl_cgt9.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmptrl_cgt9.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmptrl_cgt9.swift:13:11: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n          ^\n/tmp/tmptrl_cgt9.swift:13:18: error: cannot call value of non-function type 'Double'\n    max = max(r, max(g, b))\n                 ^\n/tmp/tmptrl_cgt9.swift:14:11: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n          ^\n/tmp/tmptrl_cgt9.swift:14:18: error: cannot call value of non-function type 'Double'\n    min = min(r, min(g, b))\n                 ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var rr: Double = Double(r) / 255.0\n    var gg: Double = Double(g) / 255.0\n    var bb: Double = Double(b) / 255.0\n    let minVal: Double = min(rr, min(gg, bb))\n    let maxVal: Double = max(rr, max(gg, bb))\n    let delta: Double = maxVal - minVal\n    v = maxVal\n    if delta == 0 {\n        h = 0\n        s = 0\n    } else {\n        s = delta / maxVal\n        var del_r: Double = (((maxVal - rr) / 6) + (delta / 2)) / delta\n        var del_g: Double = (((maxVal - gg) / 6) + (delta / 2)) / delta\n        var del_b: Double = (((maxVal - bb) / 6) + (delta / 2)) / delta\n        if rr == maxVal {\n            h = del_b - del_g\n        } else if gg == maxVal {\n            h = (1 / 3) + del_r - del_b\n        } else if bb == maxVal {\n            h = (2 / 3) + del_g - del_r\n        }\n        if h < 0 {\n            h += 1\n        }\n        if h > 1 {\n            h -= 1\n        }\n    }\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpxhvlid3v.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpxhvlid3v.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpxhvlid3v.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpxhvlid3v.swift:7:9: warning: variable 'rr' was never mutated; consider changing to 'let' constant\n    var rr: Double = Double(r) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpxhvlid3v.swift:8:9: warning: variable 'gg' was never mutated; consider changing to 'let' constant\n    var gg: Double = Double(g) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpxhvlid3v.swift:9:9: warning: variable 'bb' was never mutated; consider changing to 'let' constant\n    var bb: Double = Double(b) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpxhvlid3v.swift:19:13: warning: variable 'del_r' was never mutated; consider changing to 'let' constant\n        var del_r: Double = (((maxVal - rr) / 6) + (delta / 2)) / delta\n        ~~~ ^\n        let\n/tmp/tmpxhvlid3v.swift:20:13: warning: variable 'del_g' was never mutated; consider changing to 'let' constant\n        var del_g: Double = (((maxVal - gg) / 6) + (delta / 2)) / delta\n        ~~~ ^\n        let\n/tmp/tmpxhvlid3v.swift:21:13: warning: variable 'del_b' was never mutated; consi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    let cmax = max(r_, max(g_, b_))\n    let cmin = min(r_, min(g_, b_))\n    let delta = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * Int((g_ - b_) / delta)\n    } else if cmax == g_ {\n        h = 60 * Int((b_ - r_) / delta + 2)\n    } else if cmax == b_ {\n        h = 60 * Int((r_ - g_) / delta + 4)\n    }\n    if h < 0 {\n        h += 360\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(100 * delta / cmax)\n    }\n    v = Int(cmax * 100)\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpxpl7ax3b.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpxpl7ax3b.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpxpl7ax3b.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    let h: Double\n    let s: Double\n    let v: Double\n    \n    v = max\n    \n    let delta = max - min\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / delta)\n    } else if max == g {\n        h = 60 * ((b - r) / delta) + 120\n    } else {\n        h = 60 * ((r - g) / delta) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp20exgxzn.swift:55:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp20exgxzn.swift:56:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp20exgxzn.swift:57:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n    }\n    \n    h /= 6.0\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpm0u_wupp.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpm0u_wupp.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpm0u_wupp.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    if max == min {\n        h = 0.0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if max == 0 {\n        s = 0.0\n    } else {\n        s = 1 - (min / max)\n    }\n    v = max / 255\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpho6ov7ty.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpho6ov7ty.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpho6ov7ty.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let min_ = min(r_, g_, b_)\n    let max_ = max(r_, g_, b_)\n    let delta = max_ - min_\n    \n    v = Int(max_ * 100)\n    \n    if delta == 0 {\n        h = 0\n        s = 0\n    } else {\n        s = Int(delta / max_ * 100)\n        \n        if r_ == max_ {\n            h = Int((g_ - b_) / delta * 60)\n        } else if g_ == max_ {\n            h = Int((b_ - r_) / delta * 60) + 120\n        } else if b_ == max_ {\n            h = Int((r_ - g_) / delta * 60) + 240\n        }\n        \n        if h < 0 {\n            h += 360\n        }\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpzm9s4mjk.swift:53:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpzm9s4mjk.swift:54:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpzm9s4mjk.swift:55:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255.0\n    let g = Float(g) / 255.0\n    let b = Float(b) / 255.0\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    let h: Float\n    let s: Float\n    let v: Float\n    \n    v = max\n    let delta = max - min\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    \n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp0ghegix4.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp0ghegix4.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp0ghegix4.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n    }\n    \n    h /= 6\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpd_4balmd.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpd_4balmd.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpd_4balmd.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h: Double\n    let s: Double\n    let v = max\n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpyoumnss0.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpyoumnss0.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpyoumnss0.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    let rf = Float(r) / 255.0\n    let gf = Float(g) / 255.0\n    let bf = Float(b) / 255.0\n    let cmax = max(rf, max(gf, bf))\n    let cmin = min(rf, min(gf, bf))\n    let delta = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == rf {\n        h = 60 * ((gf - bf) / delta)\n    } else if cmax == gf {\n        h = 60 * ((bf - rf) / delta + 2)\n    } else if cmax == bf {\n        h = 60 * ((rf - gf) / delta + 4)\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    v = cmax\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp26wzt5fs.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp26wzt5fs.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp26wzt5fs.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var max: Double = 0.0\n    var min: Double = 0.0\n    var diff: Double = 0.0\n    var r_: Double = 0.0\n    var g_: Double = 0.0\n    var b_: Double = 0.0\n    var r_dash: Double = 0.0\n    var g_dash: Double = 0.0\n    var b_dash: Double = 0.0\n    var h_dash: Double = 0.0\n    r_ = Double(r)\n    g_ = Double(g)\n    b_ = Double(b)\n    max = max(r_, max(g_, b_))\n    min = min(r_, min(g_, b_))\n    diff = max - min\n    if max == min {\n        h = 0.0\n    } else if max == r_ {\n        h_dash = (g_ - b_) / diff\n        if h_dash < 0 {\n            h_dash += 6.0\n        }\n        h = 60.0 * h_dash\n    } else if max == g_ {\n        h_dash = (b_ - r_) / diff + 2.0\n        h = 60.0 * h_dash\n    } else if max == b_ {\n        h_dash = (r_ - g_) / diff + 4.0\n        h = 60.0 * h_dash\n    }\n    if max == 0 {\n        s = 0.0\n    } else {\n        s = diff / max\n    }\n    v = max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpcmofvr64.swift:60:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpcmofvr64.swift:61:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpcmofvr64.swift:62:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpcmofvr64.swift:20:11: error: cannot call value of non-function type 'Double'\n    max = max(r_, max(g_, b_))\n          ^\n/tmp/tmpcmofvr64.swift:20:19: error: cannot call value of non-function type 'Double'\n    max = max(r_, max(g_, b_))\n                  ^\n/tmp/tmpcmofvr64.swift:21:11: error: cannot call value of non-function type 'Double'\n    min = min(r_, min(g_, b_))\n          ^\n/tmp/tmpcmofvr64.swift:21:19: error: cannot call value of non-function type 'Double'\n    min = min(r_, min(g_, b_))\n                  ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = 60 * ((Int(g_prime - b_prime) / Int(delta)) % 6)\n    } else if c_max == g_prime {\n        h = 60 * ((Int(b_prime - r_prime) / Int(delta)) + 2)\n    } else if c_max == b_prime {\n        h = 60 * ((Int(r_prime - g_prime) / Int(delta)) + 4)\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpibjqbqlr.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpibjqbqlr.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpibjqbqlr.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let cmax = max(r, max(g, b))\n    let cmin = min(r, min(g, b))\n    let delta = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == r {\n        h = 60 * ((g - b) / delta).truncatingRemainder(dividingBy: 6)\n    } else if cmax == g {\n        h = 60 * ((b - r) / delta + 2)\n    } else if cmax == b {\n        h = 60 * ((r - g) / delta + 4)\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    v = cmax\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp9f4tn_hg.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp9f4tn_hg.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp9f4tn_hg.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var cmax: Int = 0\n    var cmin: Int = 0\n    var diff: Int = 0\n    \n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax - cmin\n    \n    if cmax == cmin {\n        h = 0\n    } else if cmax == r {\n        h = 60 * ((g - b) / diff) % 360\n    } else if cmax == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if cmax == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff / cmax\n    }\n    \n    v = cmax\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmps57dmhld.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmps57dmhld.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmps57dmhld.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let cmax = max(r, max(g, b))\n    let cmin = min(r, min(g, b))\n    let diff = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == r {\n        h = 60 * Int((g - b) / diff)\n    } else if cmax == g {\n        h = 60 * Int((b - r) / diff) + 120\n    } else if cmax == b {\n        h = 60 * Int((r - g) / diff) + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(diff / cmax * 100)\n    }\n    v = Int(cmax / 255 * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpf9ylw827.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpf9ylw827.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpf9ylw827.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r_prime: Double = Double(r) / 255.0\n    let g_prime: Double = Double(g) / 255.0\n    let b_prime: Double = Double(b) / 255.0\n    let c_max: Double = max(r_prime, g_prime, b_prime)\n    let c_min: Double = min(r_prime, g_prime, b_prime)\n    let delta: Double = c_max - c_min\n    if delta == 0.0 {\n        h = 0.0\n    } else if c_max == r_prime {\n        h = 60.0 * ((g_prime - b_prime) / delta).truncatingRemainder(dividingBy: 6.0)\n    } else if c_max == g_prime {\n        h = 60.0 * ((b_prime - r_prime) / delta + 2.0)\n    } else if c_max == b_prime {\n        h = 60.0 * ((r_prime - g_prime) / delta + 4.0)\n    }\n    if c_max == 0.0 {\n        s = 0.0\n    } else {\n        s = delta / c_max\n    }\n    v = c_max\n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v,\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpxfghb97r.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpxfghb97r.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpxfghb97r.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    \n    rr = r\n    gg = g\n    bb = b\n    \n    if rr > gg {\n        max = rr\n        if bb > max {\n            max = bb\n        }\n    } else {\n        max = gg\n        if bb > max {\n            max = bb\n        }\n    }\n    \n    if rr < gg {\n        min = rr\n        if bb < min {\n            min = bb\n        }\n    } else {\n        min = gg\n        if bb < min {\n            min = bb\n        }\n    }\n    \n    diff = max - min\n    v = max\n    if max != 0 {\n        s = diff * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return [h, s, v]\n    }\n    \n    if rr == max {\n        h = (gg - bb) * 60 / diff\n    } else if gg == max {\n        h = 120 + (bb - rr) * 60 / diff\n    } else {\n        h = 240 + (rr - gg) * 60 / diff\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp1khywpzl.swift:80:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1khywpzl.swift:81:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1khywpzl.swift:82:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    \n    max = max(r, g, b)\n    min = min(r, g, b)\n    diff = max - min\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    \n    v = max\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp9qhl8l3b.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp9qhl8l3b.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp9qhl8l3b.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp9qhl8l3b.swift:11:11: error: cannot call value of non-function type 'Int'\n    max = max(r, g, b)\n          ^\n/tmp/tmp9qhl8l3b.swift:12:11: error: cannot call value of non-function type 'Int'\n    min = min(r, g, b)\n          ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0\n    var s: Double = 0\n    var v: Double = 0\n    let r_ = Double(r) / 255\n    let g_ = Double(g) / 255\n    let b_ = Double(b) / 255\n    let cmax = max(r_, max(g_, b_))\n    let cmin = min(r_, min(g_, b_))\n    let delta = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * ((g_ - b_) / delta)\n    } else if cmax == g_ {\n        h = 60 * ((b_ - r_) / delta) + 120\n    } else if cmax == b_ {\n        h = 60 * ((r_ - g_) / delta) + 240\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    v = cmax\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpgd2_fflx.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpgd2_fflx.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpgd2_fflx.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    var v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n        h /= 6.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpkm95wwmn.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpkm95wwmn.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpkm95wwmn.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpkm95wwmn.swift:11:9: warning: variable 'v' was never mutated; consider changing to 'let' constant\n    var v = max\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let cmax = max(r_prime, g_prime, b_prime)\n    let cmin = min(r_prime, g_prime, b_prime)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_prime {\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n    } else if cmax == g_prime {\n        h = Int(60 * (((b_prime - r_prime) / delta) + 2))\n    } else if cmax == b_prime {\n        h = Int(60 * (((r_prime - g_prime) / delta) + 4))\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123532,
      "stdout": "",
      "stderr": "/tmp/tmpwx4cmlzh.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpwx4cmlzh.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpwx4cmlzh.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpwx4cmlzh.swift:19:53: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * (((g_prime - b_prime) / delta) % 6))\n                                                    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var min: Int = 0\n    var max: Int = 0\n    var diff: Int = 0\n    \n    min = r < g ? r : g\n    min = min < b ? min : b\n    \n    max = r > g ? r : g\n    max = max > b ? max : b\n    \n    diff = max - min\n    v = max\n    \n    if (max != 0) {\n        s = 255 * diff / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if (r == max) {\n        h = (g - b) * 60 / diff\n    } else if (g == max) {\n        h = 120 + (b - r) * 60 / diff\n    } else {\n        h = 240 + (r - g) * 60 / diff\n    }\n    \n    if (h < 0) {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmplt4eg5lb.swift:56:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmplt4eg5lb.swift:57:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmplt4eg5lb.swift:58:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var max: Int = 0\n    var min: Int = 0\n    var diff: Int = 0\n    var rr: Int = 0\n    var gg: Int = 0\n    var bb: Int = 0\n    var hh: Int = 0\n    var ss: Int = 0\n    var vv: Int = 0\n    var result: AnyHashable = [:]\n    rr = r\n    gg = g\n    bb = b\n    max = rr\n    if gg > max {\n        max = gg\n    }\n    if bb > max {\n        max = bb\n    }\n    min = rr\n    if gg < min {\n        min = gg\n    }\n    if bb < min {\n        min = bb\n    }\n    diff = max - min\n    v = max\n    if max != 0 {\n        s = diff * 100 / max\n    }\n    else {\n        s = 0\n        h = -1\n        return [:]\n    }\n    if rr == max {\n        h = (gg - bb) * 60 / diff\n    }\n    else if gg == max {\n        h = 120 + (bb - rr) * 60 / diff\n    }\n    else {\n        h = 240 + (rr - gg) * 60 / diff\n    }\n    if h < 0 {\n        h += 360\n    }\n    hh = h\n    ss = s\n    vv = v\n    result = [\"h\": hh, \"s\": ss, \"v\": vv]\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpj2hq8jt9.swift:76:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpj2hq8jt9.swift:77:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpj2hq8jt9.swift:78:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpj2hq8jt9.swift:16:31: error: type 'Any' cannot conform to 'Hashable'\n    var result: AnyHashable = [:]\n                              ^\n/tmp/tmpj2hq8jt9.swift:16:31: note: only concrete types such as structs, enums and classes can conform to protocols\n    var result: AnyHashable = [:]\n                              ^\n/tmp/tmpj2hq8jt9.swift:16:31: note: requirement from conditional conformance of '[AnyHashable : Any]' to 'Hashable'\n    var result: AnyHashable = [:]\n                              ^\n/tmp/tmpj2hq8jt9.swift:42:16: error: type 'Any' cannot conform to 'Hashable'\n        return [:]\n               ^\n/tmp/tmpj2hq8jt9.swift:42:16: note: only concrete types such as structs, enums and classes can conform to protocols\n        return [:]\n               ^\n/tmp/tmpj2hq8jt9.swift:42:16: note: requirement from conditional conformance of '[AnyHashable : Any]' to 'Hashable'\n        return [:]\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = r / 255\n    let g = g / 255\n    let b = b / 255\n    let cmax = max(r, max(g, b))\n    let cmin = min(r, min(g, b))\n    let diff = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == r {\n        h = 60 * ((g - b) / diff) % 6\n    } else if cmax == g {\n        h = 60 * ((b - r) / diff) + 2\n    } else if cmax == b {\n        h = 60 * ((r - g) / diff) + 4\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff / cmax * 100\n    }\n    v = cmax * 100\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmp1sq6u8x2.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp1sq6u8x2.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp1sq6u8x2.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let cmax = max(r_, max(g_, b_))\n    let cmin = min(r_, min(g_, b_))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * ((Int(g_) - Int(b_)) / Int(delta))\n    } else if cmax == g_ {\n        h = 60 * ((Int(b_) - Int(r_)) / Int(delta)) + 120\n    } else if cmax == b_ {\n        h = 60 * ((Int(r_) - Int(g_)) / Int(delta)) + 240\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpj6t3s5x3.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpj6t3s5x3.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpj6t3s5x3.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    var min: Float = 0.0\n    var max: Float = 0.0\n    var delta: Float = 0.0\n    var rf: Float = Float(r) / 255.0\n    var gf: Float = Float(g) / 255.0\n    var bf: Float = Float(b) / 255.0\n    min = rf\n    if gf < min {\n        min = gf\n    }\n    if bf < min {\n        min = bf\n    }\n    max = rf\n    if gf > max {\n        max = gf\n    }\n    if bf > max {\n        max = bf\n    }\n    v = max\n    delta = max - min\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [h, s, v]\n    }\n    if rf == max {\n        h = (gf - bf) / delta\n    } else if gf == max {\n        h = 2 + (bf - rf) / delta\n    } else {\n        h = 4 + (rf - gf) / delta\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp_4xvzr2q.swift:63:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp_4xvzr2q.swift:64:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp_4xvzr2q.swift:65:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp_4xvzr2q.swift:10:9: warning: variable 'rf' was never mutated; consider changing to 'let' constant\n    var rf: Float = Float(r) / 255.0\n    ~~~ ^\n    let\n/tmp/tmp_4xvzr2q.swift:11:9: warning: variable 'gf' was never mutated; consider changing to 'let' constant\n    var gf: Float = Float(g) / 255.0\n    ~~~ ^\n    let\n/tmp/tmp_4xvzr2q.swift:12:9: warning: variable 'bf' was never mutated; consider changing to 'let' constant\n    var bf: Float = Float(b) / 255.0\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let diff = max - min\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = Int(60 * ((g - b) / diff) + 360) % 360\n    } else if max == g {\n        h = Int(60 * ((b - r) / diff) + 120)\n    } else if max == b {\n        h = Int(60 * ((r - g) / diff) + 240)\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = Int(diff / max * 100)\n    }\n    v = Int(max / 255 * 100)\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp6sba7fmw.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp6sba7fmw.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp6sba7fmw.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    var v = 0.0\n    \n    v = max\n    \n    let d = max - min\n    \n    if max != 0.0 {\n        s = d / max\n    } else {\n        s = 0.0\n        h = -1.0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if r == max {\n        h = (g - b) / d\n    } else if g == max {\n        h = 2.0 + (b - r) / d\n    } else {\n        h = 4.0 + (r - g) / d\n    }\n    \n    h *= 60.0\n    \n    if h < 0.0 {\n        h += 360.0\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmplx7fg90y.swift:57:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmplx7fg90y.swift:58:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmplx7fg90y.swift:59:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255.0\n    let g = Float(g) / 255.0\n    let b = Float(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n        h /= 6.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmp0id9vwfx.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp0id9vwfx.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp0id9vwfx.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp0id9vwfx.swift:13:20: error: cannot assign value of type 'Float' to type 'Double'\n    s = max == 0.0 ? 0.0 : d / max\n        ~~~~~~~~~~~^~~~~~~~~~~~~~~\n        Double(                   )\n/tmp/tmp0id9vwfx.swift:18:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n                ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~\n                Double(                          )\n/tmp/tmp0id9vwfx.swift:20:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (b - r) / d + 2.0\n                ~~~~~~~~~~~~^~~~~\n                Double(          )\n/tmp/tmp0id9vwfx.swift:22:29: error: cannot assign value of type 'Float' to type 'Double'\n            h = (r - g) / d + 4.0\n                ~~~~~~~~~~~~^~~~~\n                Double(          )\n/tmp/tmp0id9vwfx.swift:26:34: error: cannot convert value of type 'Float' to expected dictionary value type 'Double'\n    return [\"h\": h, \"s\": s, \"v\": v]\n           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    let r = Float(r)\n    let g = Float(g)\n    let b = Float(b)\n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    let delta = max - min\n    v = max\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2 + (b - r) / delta\n    } else {\n        h = 4 + (r - g) / delta\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpi91tao4c.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpi91tao4c.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpi91tao4c.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    var rgbMin: Int = 0\n    var rgbMax: Int = 0\n    \n    rgbMin = min(r, g, b)\n    rgbMax = max(r, g, b)\n    \n    //calculate v\n    v = rgbMax\n    \n    if (v == 0) {\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    //calculate s\n    s = 255 * (rgbMax - rgbMin) / v\n    \n    if (s == 0) {\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    //calculate h\n    if (rgbMax == r) {\n        h = 0 + 43 * (g - b) / (rgbMax - rgbMin)\n    } else if (rgbMax == g) {\n        h = 85 + 43 * (b - r) / (rgbMax - rgbMin)\n    } else {\n        h = 171 + 43 * (r - g) / (rgbMax - rgbMin)\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp6w0g4ga8.swift:52:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp6w0g4ga8.swift:53:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp6w0g4ga8.swift:54:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var max: Double = 0.0\n    var min: Double = 0.0\n    var diff: Double = 0.0\n    var r_: Double = 0.0\n    var g_: Double = 0.0\n    var b_: Double = 0.0\n    var r_dash: Double = 0.0\n    var g_dash: Double = 0.0\n    var b_dash: Double = 0.0\n    var h_dash: Double = 0.0\n    var s_dash: Double = 0.0\n    var v_dash: Double = 0.0\n    r_ = Double(r)\n    g_ = Double(g)\n    b_ = Double(b)\n    max = max(max(r_, g_), b_)\n    min = min(min(r_, g_), b_)\n    diff = max - min\n    if diff == 0 {\n        h = 0\n    } else if max == r_ {\n        h = 60 * ((g_ - b_) / diff)\n    } else if max == g_ {\n        h = 60 * ((b_ - r_) / diff) + 120\n    } else if max == b_ {\n        h = 60 * ((r_ - g_) / diff) + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    v = max\n    h_dash = h / 360\n    s_dash = s\n    v_dash = v / 255\n    return [\"h\": h_dash, \"s\": s_dash, \"v\": v_dash]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpvodc6a5j.swift:62:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpvodc6a5j.swift:63:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpvodc6a5j.swift:64:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpvodc6a5j.swift:22:11: error: cannot call value of non-function type 'Double'\n    max = max(max(r_, g_), b_)\n          ^\n/tmp/tmpvodc6a5j.swift:22:15: error: cannot call value of non-function type 'Double'\n    max = max(max(r_, g_), b_)\n              ^\n/tmp/tmpvodc6a5j.swift:23:11: error: cannot call value of non-function type 'Double'\n    min = min(min(r_, g_), b_)\n          ^\n/tmp/tmpvodc6a5j.swift:23:15: error: cannot call value of non-function type 'Double'\n    min = min(min(r_, g_), b_)\n              ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255.0\n    let g_prime = Double(g) / 255.0\n    let b_prime = Double(b) / 255.0\n    \n    let cmax = max(r_prime, max(g_prime, b_prime))\n    let cmin = min(r_prime, min(g_prime, b_prime))\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_prime {\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n    } else if cmax == g_prime {\n        h = Int(60 * ((b_prime - r_prime) / delta) + 2)\n    } else if cmax == b_prime {\n        h = Int(60 * ((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(delta / cmax * 100)\n    }\n    \n    v = Int(cmax * 100)\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123534,
      "stdout": "",
      "stderr": "/tmp/tmpqroknuys.swift:50:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpqroknuys.swift:51:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpqroknuys.swift:52:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpqroknuys.swift:19:52: error: '%' is unavailable: For floating point numbers use truncatingRemainder instead\n        h = Int(60 * ((g_prime - b_prime) / delta) % 6)\n                                                   ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n            ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h = 0\n    var s = 0\n    var v = 0\n    var max = 0\n    var min = 0\n    var diff = 0\n    var rr = 0\n    var gg = 0\n    var bb = 0\n    \n    rr = r\n    gg = g\n    bb = b\n    \n    if rr > gg {\n        max = rr\n        if bb > max {\n            max = bb\n        }\n    } else {\n        max = gg\n        if bb > max {\n            max = bb\n        }\n    }\n    \n    if rr < gg {\n        min = rr\n        if bb < min {\n            min = bb\n        }\n    } else {\n        min = gg\n        if bb < min {\n            min = bb\n        }\n    }\n    \n    diff = max - min\n    v = max\n    \n    if max != 0 {\n        s = diff * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    \n    if rr == max {\n        h = (gg - bb) * 60 / diff\n    } else if gg == max {\n        h = 120 + (bb - rr) * 60 / diff\n    } else {\n        h = 240 + (rr - gg) * 60 / diff\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpowcsrjv3.swift:81:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpowcsrjv3.swift:82:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpowcsrjv3.swift:83:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    var h = 0.0\n    var s = 0.0\n    var v = 0.0\n    let min = min(r, g, b)\n    let max = max(r, g, b)\n    let delta = max - min\n    v = max\n    if delta == 0 {\n        h = 0\n        s = 0\n    } else {\n        s = delta / max\n        if r == max {\n            h = (g - b) / delta\n        } else if g == max {\n            h = 2 + (b - r) / delta\n        } else {\n            h = 4 + (r - g) / delta\n        }\n        h *= 60\n        if h < 0 {\n            h += 360\n        }\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmpg4n3s4yq.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpg4n3s4yq.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpg4n3s4yq.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpg4n3s4yq.swift:13:9: error: cannot assign value of type 'Float' to type 'Double'\n    v = max\n        ^~~\n        Double( )\n/tmp/tmpg4n3s4yq.swift:18:19: error: cannot assign value of type 'Float' to type 'Double'\n        s = delta / max\n            ~~~~~~^~~~~\n            Double(    )\n/tmp/tmpg4n3s4yq.swift:20:25: error: cannot assign value of type 'Float' to type 'Double'\n            h = (g - b) / delta\n                ~~~~~~~~^~~~~~~\n                Double(        )\n/tmp/tmpg4n3s4yq.swift:22:19: error: cannot assign value of type 'Float' to type 'Double'\n            h = 2 + (b - r) / delta\n                ~~^~~~~~~~~~~~~~~~~\n                Double(            )\n/tmp/tmpg4n3s4yq.swift:24:19: error: cannot assign value of type 'Float' to type 'Double'\n            h = 4 + (r - g) / delta\n                ~~^~~~~~~~~~~~~~~~~\n                Double(            )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    let h = max - min\n    let s = max - min\n    let v = max\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpem_cyffv.swift:31:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpem_cyffv.swift:32:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpem_cyffv.swift:33:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    \n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        switch max {\n        case r:\n            h = (g - b) / d + (g < b ? 6 : 0)\n        case g:\n            h = (b - r) / d + 2\n        case b:\n            h = (r - g) / d + 4\n        default:\n            break\n        }\n        h /= 6\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123524,
      "stdout": "",
      "stderr": "/tmp/tmpr91j75jo.swift:51:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpr91j75jo.swift:52:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpr91j75jo.swift:53:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    \n    let rd = Double(r) / 255.0\n    let gd = Double(g) / 255.0\n    let bd = Double(b) / 255.0\n    \n    let cmax = max(rd, gd, bd)\n    let cmin = min(rd, gd, bd)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == rd {\n        h = 60 * ((gd - bd) / delta)\n    } else if cmax == gd {\n        h = 60 * ((bd - rd) / delta + 2)\n    } else if cmax == bd {\n        h = 60 * ((rd - gd) / delta + 4)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    \n    v = cmax\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp_g1rb8xs.swift:54:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp_g1rb8xs.swift:55:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp_g1rb8xs.swift:56:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255.0\n    let g = Float(g) / 255.0\n    let b = Float(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let delta = max - min\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    if delta == 0 {\n        h = 0\n    } else if max == r {\n        h = (60 * ((g - b) / delta) + 360) % 360\n    } else if max == g {\n        h = (60 * ((b - r) / delta) + 120) % 360\n    } else if max == b {\n        h = (60 * ((r - g) / delta) + 240) % 360\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123601,
      "stdout": "",
      "stderr": "/tmp/tmpwic8cib0.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpwic8cib0.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpwic8cib0.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpwic8cib0.swift:16:9: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        h = (60 * ((g - b) / delta) + 360) % 360\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwic8cib0.swift:18:9: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        h = (60 * ((b - r) / delta) + 120) % 360\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwic8cib0.swift:20:9: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        h = (60 * ((r - g) / delta) + 240) % 360\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwic8cib0.swift:25:19: error: cannot assign value of type 'Float' to type 'Double'\n        s = delta / max\n            ~~~~~~^~~~~\n            Double(    )\n/tmp/tmpwic8cib0.swi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = r / 255.0\n    let g = g / 255.0\n    let b = b / 255.0\n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    v = Int(max * 100)\n    let delta = max - min\n    if max != 0 {\n        s = Int(delta / max * 100)\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = Int((g - b) / delta * 60)\n    } else if g == max {\n        h = Int(2 + (b - r) / delta * 60)\n    } else {\n        h = Int(4 + (r - g) / delta * 60)\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmpd89dn2pm.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpd89dn2pm.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpd89dn2pm.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpd89dn2pm.swift:7:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let r = r / 255.0\n            ~ ^ ~~~~~\n/tmp/tmpd89dn2pm.swift:7:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let r = r / 255.0\n              ^\n/tmp/tmpd89dn2pm.swift:8:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let g = g / 255.0\n            ~ ^ ~~~~~\n/tmp/tmpd89dn2pm.swift:8:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let g = g / 255.0\n              ^\n/tmp/tmpd89dn2pm.swift:9:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let b = b / 255.0\n            ~ ^ ~~~~~\n/tmp/tmpd89dn2pm.swift:9:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Durat",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmp64fma5g0.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp64fma5g0.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp64fma5g0.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let delta = max - min\n    \n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    if delta == 0 {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / delta)\n    } else if max == g {\n        h = 60 * ((b - r) / delta) + 120\n    } else if max == b {\n        h = 60 * ((r - g) / delta) + 240\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = delta / max\n    }\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpkm77spde.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpkm77spde.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpkm77spde.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    \n    let r_prime = Double(r) / 255\n    let g_prime = Double(g) / 255\n    let b_prime = Double(b) / 255\n    \n    let c_max = max(r_prime, g_prime, b_prime)\n    let c_min = min(r_prime, g_prime, b_prime)\n    let delta = c_max - c_min\n    \n    if delta == 0 {\n        h = 0\n    } else if c_max == r_prime {\n        h = 60 * Int((g_prime - b_prime) / delta.truncatingRemainder(dividingBy: 6))\n    } else if c_max == g_prime {\n        h = 60 * Int(((b_prime - r_prime) / delta) + 2)\n    } else if c_max == b_prime {\n        h = 60 * Int(((r_prime - g_prime) / delta) + 4)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if c_max == 0 {\n        s = 0\n    } else {\n        s = Int(delta / c_max * 100)\n    }\n    \n    v = Int(c_max * 100)\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmp6rf6dhad.swift:58:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp6rf6dhad.swift:59:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp6rf6dhad.swift:60:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    let diff = max - min\n    let h: Float\n    let s: Float\n    let v: Float\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * ((g - b) / diff)\n    } else if max == g {\n        h = 60 * ((b - r) / diff) + 120\n    } else {\n        h = 60 * ((r - g) / diff) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    v = max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "/tmp/tmpmiy_qos3.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpmiy_qos3.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpmiy_qos3.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    let h: Double\n    let s: Double\n    let v: Double\n    v = max\n    let delta = max - min\n    if max != 0.0 {\n        s = delta / max\n    } else {\n        s = 0.0\n        h = -1.0\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = (g - b) / delta\n    } else if g == max {\n        h = 2.0 + (b - r) / delta\n    } else {\n        h = 4.0 + (r - g) / delta\n    }\n    h *= 60.0\n    if h < 0.0 {\n        h += 360.0\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmp58euwpuq.swift:48:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp58euwpuq.swift:49:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp58euwpuq.swift:50:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    \n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    \n    let cmax = max(r_, g_, b_)\n    let cmin = min(r_, g_, b_)\n    let delta = cmax - cmin\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * ((g_ - b_) / delta)\n    } else if cmax == g_ {\n        h = 60 * ((b_ - r_) / delta + 2)\n    } else if cmax == b_ {\n        h = 60 * ((r_ - g_) / delta + 4)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    \n    v = cmax\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmprmfbp6zo.swift:58:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmprmfbp6zo.swift:59:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmprmfbp6zo.swift:60:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    \n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    \n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    \n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmpozo8vmuy.swift:46:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpozo8vmuy.swift:47:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpozo8vmuy.swift:48:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = r / 255.0\n    let g = g / 255.0\n    let b = b / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h = 0.0\n    var s = 0.0\n    let v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n    }\n    h /= 6.0\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmphgjgpmv5.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmphgjgpmv5.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmphgjgpmv5.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmphgjgpmv5.swift:4:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let r = r / 255.0\n            ~ ^ ~~~~~\n/tmp/tmphgjgpmv5.swift:4:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let r = r / 255.0\n              ^\n/tmp/tmphgjgpmv5.swift:5:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let g = g / 255.0\n            ~ ^ ~~~~~\n/tmp/tmphgjgpmv5.swift:5:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let g = g / 255.0\n              ^\n/tmp/tmphgjgpmv5.swift:6:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let b = b / 255.0\n            ~ ^ ~~~~~\n/tmp/tmphgjgpmv5.swift:6:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Durat",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r) / 255.0\n    let g = Double(g) / 255.0\n    let b = Double(b) / 255.0\n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    var h: Double = 0.0\n    var s: Double = 0.0\n    let v = max\n    let d = max - min\n    s = max == 0.0 ? 0.0 : d / max\n    if max == min {\n        h = 0.0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6.0 : 0.0)\n        } else if max == g {\n            h = (b - r) / d + 2.0\n        } else if max == b {\n            h = (r - g) / d + 4.0\n        }\n    }\n    h /= 6.0\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmp9_562_04.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp9_562_04.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp9_562_04.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = r / 255.0\n    let g = g / 255.0\n    let b = b / 255.0\n    let min = min(r, min(g, b))\n    let max = max(r, max(g, b))\n    let delta = max - min\n    v = Int(max * 100)\n    if max != 0 {\n        s = Int(delta / max * 100)\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if r == max {\n        h = Int((g - b) / delta * 60)\n    } else if g == max {\n        h = Int(2 + (b - r) / delta * 60)\n    } else {\n        h = Int(4 + (r - g) / delta * 60)\n    }\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmpo5xbfm91.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpo5xbfm91.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpo5xbfm91.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpo5xbfm91.swift:7:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let r = r / 255.0\n            ~ ^ ~~~~~\n/tmp/tmpo5xbfm91.swift:7:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let r = r / 255.0\n              ^\n/tmp/tmpo5xbfm91.swift:8:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let g = g / 255.0\n            ~ ^ ~~~~~\n/tmp/tmpo5xbfm91.swift:8:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let g = g / 255.0\n              ^\n/tmp/tmpo5xbfm91.swift:9:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let b = b / 255.0\n            ~ ^ ~~~~~\n/tmp/tmpo5xbfm91.swift:9:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Durat",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let rd = Double(r)\n    let gd = Double(g)\n    let bd = Double(b)\n    let max = max(rd, max(gd, bd))\n    let min = min(rd, min(gd, bd))\n    let diff = max - min\n    if max == min {\n        h = 0\n    } else if max == rd {\n        h = 60 * ((gd - bd) / diff)\n    } else if max == gd {\n        h = 60 * ((bd - rd) / diff) + 120\n    } else if max == bd {\n        h = 60 * ((rd - gd) / diff) + 240\n    }\n    if max == 0 {\n        s = 0\n    } else {\n        s = diff / max\n    }\n    v = max\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmp73ez8j5f.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp73ez8j5f.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp73ez8j5f.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r) / 255\n    let g = Float(g) / 255\n    let b = Float(b) / 255\n    \n    let max = max(r, max(g, b))\n    let min = min(r, min(g, b))\n    \n    var h = 0.0\n    var s = 0.0\n    var v = 0.0\n    \n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * (fmod((g - b) / (max - min), 6))\n    } else if max == g {\n        h = 60 * ((b - r) / (max - min) + 2)\n    } else if max == b {\n        h = 60 * ((r - g) / (max - min) + 4)\n    }\n    \n    if max == 0 {\n        s = 0\n    } else {\n        s = (max - min) / max\n    }\n    \n    v = max\n    \n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123566,
      "stdout": "",
      "stderr": "/tmp/tmpqxbsxsrh.swift:49:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpqxbsxsrh.swift:50:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpqxbsxsrh.swift:51:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpqxbsxsrh.swift:18:19: error: cannot find 'fmod' in scope\n        h = 60 * (fmod((g - b) / (max - min), 6))\n                  ^~~~\n/tmp/tmpqxbsxsrh.swift:20:9: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        h = 60 * ((b - r) / (max - min) + 2)\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqxbsxsrh.swift:22:9: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n        h = 60 * ((r - g) / (max - min) + 4)\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqxbsxsrh.swift:28:25: error: cannot assign value of type 'Float' to type 'Double'\n        s = (max - min) / max\n            ~~~~~~~~~~~~^~~~~\n            Double(          )\n/tmp/tmpqxbsxsrh.swift:31:9: error: cannot assign value of type 'Float' to type 'Double'\n    v = max\n        ^~~\n        Double( )\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Float(r)\n    let g = Float(g)\n    let b = Float(b)\n    let max = max(r, g, b)\n    let min = min(r, g, b)\n    var h: Float = 0\n    var s: Float = 0\n    let v = max\n    let d = max - min\n    s = max == 0 ? 0 : d / max\n    if max == min {\n        h = 0\n    } else {\n        if max == r {\n            h = (g - b) / d + (g < b ? 6 : 0)\n        } else if max == g {\n            h = (b - r) / d + 2\n        } else if max == b {\n            h = (r - g) / d + 4\n        }\n        h /= 6\n    }\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmpup7z008b.swift:42:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpup7z008b.swift:43:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpup7z008b.swift:44:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r = r / 255.0\n    let g = g / 255.0\n    let b = b / 255.0\n    let min = min(r, g, b)\n    let max = max(r, g, b)\n    let delta = max - min\n    v = Int(max * 100)\n    if delta == 0 {\n        h = 0\n        s = 0\n    } else {\n        s = Int(delta / max * 100)\n        if r == max {\n            h = Int((g - b) / delta * 60)\n        } else if g == max {\n            h = Int(120 + (b - r) / delta * 60)\n        } else {\n            h = Int(240 + (r - g) / delta * 60)\n        }\n        if h < 0 {\n            h += 360\n        }\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmpqiezk632.swift:46:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpqiezk632.swift:47:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpqiezk632.swift:48:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpqiezk632.swift:7:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let r = r / 255.0\n            ~ ^ ~~~~~\n/tmp/tmpqiezk632.swift:7:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let r = r / 255.0\n              ^\n/tmp/tmpqiezk632.swift:8:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let g = g / 255.0\n            ~ ^ ~~~~~\n/tmp/tmpqiezk632.swift:8:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Duration, Double), (Int, Int)\n    let g = g / 255.0\n              ^\n/tmp/tmpqiezk632.swift:9:15: error: binary operator '/' cannot be applied to operands of type 'Int' and 'Double'\n    let b = b / 255.0\n            ~ ^ ~~~~~\n/tmp/tmpqiezk632.swift:9:15: note: overloads for '/' exist with these partially matching parameter lists: (Double, Double), (Durat",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Float = 0.0\n    var s: Float = 0.0\n    var v: Float = 0.0\n    var min: Float = 0.0\n    var max: Float = 0.0\n    var delta: Float = 0.0\n    var rf: Float = Float(r) / 255.0\n    var gf: Float = Float(g) / 255.0\n    var bf: Float = Float(b) / 255.0\n    min = rf\n    if gf < min {\n        min = gf\n    }\n    if bf < min {\n        min = bf\n    }\n    max = rf\n    if gf > max {\n        max = gf\n    }\n    if bf > max {\n        max = bf\n    }\n    v = max\n    delta = max - min\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return [\"h\": h, \"s\": s, \"v\": v]\n    }\n    if rf == max {\n        h = (gf - bf) / delta\n    } else if gf == max {\n        h = 2 + (bf - rf) / delta\n    } else {\n        h = 4 + (rf - gf) / delta\n    }\n    h *= 60\n    if h < 0 {\n        h += 360\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmp0a4w4tdi.swift:63:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp0a4w4tdi.swift:64:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp0a4w4tdi.swift:65:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmp0a4w4tdi.swift:10:9: warning: variable 'rf' was never mutated; consider changing to 'let' constant\n    var rf: Float = Float(r) / 255.0\n    ~~~ ^\n    let\n/tmp/tmp0a4w4tdi.swift:11:9: warning: variable 'gf' was never mutated; consider changing to 'let' constant\n    var gf: Float = Float(g) / 255.0\n    ~~~ ^\n    let\n/tmp/tmp0a4w4tdi.swift:12:9: warning: variable 'bf' was never mutated; consider changing to 'let' constant\n    var bf: Float = Float(b) / 255.0\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r = Double(r)\n    let g = Double(g)\n    let b = Double(b)\n    let cmax = max(r, max(g, b))\n    let cmin = min(r, min(g, b))\n    let delta = cmax - cmin\n    var h = 0.0\n    var s = 0.0\n    let v = cmax\n    if delta == 0 {\n        h = 0\n    } else if cmax == r {\n        h = 60 * ((g - b) / delta)\n    } else if cmax == g {\n        h = 60 * ((b - r) / delta + 2)\n    } else if cmax == b {\n        h = 60 * ((r - g) / delta + 4)\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmp910cx7au.swift:43:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp910cx7au.swift:44:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp910cx7au.swift:45:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    let r_ = Double(r) / 255.0\n    let g_ = Double(g) / 255.0\n    let b_ = Double(b) / 255.0\n    let cmax = max(r_, g_, b_)\n    let cmin = min(r_, g_, b_)\n    let delta = cmax - cmin\n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * ((g_ - b_) / delta)\n    } else if cmax == g_ {\n        h = 60 * ((b_ - r_) / delta + 2)\n    } else if cmax == b_ {\n        h = 60 * ((r_ - g_) / delta + 4)\n    }\n    if h < 0 {\n        h += 360\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    v = cmax\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1665510596,
      "stdout": "",
      "stderr": "/tmp/tmpcb0jkux0.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpcb0jkux0.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpcb0jkux0.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Int = 0\n    var s: Int = 0\n    var v: Int = 0\n    let r_ = Double(r)\n    let g_ = Double(g)\n    let b_ = Double(b)\n    let cmax = max(r_, max(g_, b_))\n    let cmin = min(r_, min(g_, b_))\n    let diff = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * Int((g_ - b_) / diff)\n    } else if cmax == g_ {\n        h = 60 * Int((b_ - r_) / diff) + 120\n    } else if cmax == b_ {\n        h = 60 * Int((r_ - g_) / diff) + 240\n    }\n    if h < 0 {\n        h += 360\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = Int(diff / cmax * 100)\n    }\n    v = Int(cmax / 255 * 100)\n    return [h, s, v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmp7vg7iapr.swift:47:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmp7vg7iapr.swift:48:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmp7vg7iapr.swift:49:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    var h: Double = 0.0\n    var s: Double = 0.0\n    var v: Double = 0.0\n    var rr: Double = Double(r) / 255.0\n    var gg: Double = Double(g) / 255.0\n    var bb: Double = Double(b) / 255.0\n    var cmax: Double = max(rr, max(gg, bb))\n    var cmin: Double = min(rr, min(gg, bb))\n    var diff: Double = cmax - cmin\n    if cmax == cmin {\n        h = 0\n    } else if cmax == rr {\n        h = 60 * ((gg - bb) / diff)\n    } else if cmax == gg {\n        h = 60 * ((bb - rr) / diff) + 120\n    } else if cmax == bb {\n        h = 60 * ((rr - gg) / diff) + 240\n    }\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = diff / cmax\n    }\n    v = cmax\n    return [\"h\": h, \"s\": s, \"v\": v]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123526,
      "stdout": "",
      "stderr": "/tmp/tmpiqbphlpr.swift:44:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpiqbphlpr.swift:45:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpiqbphlpr.swift:46:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpiqbphlpr.swift:7:9: warning: variable 'rr' was never mutated; consider changing to 'let' constant\n    var rr: Double = Double(r) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpiqbphlpr.swift:8:9: warning: variable 'gg' was never mutated; consider changing to 'let' constant\n    var gg: Double = Double(g) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpiqbphlpr.swift:9:9: warning: variable 'bb' was never mutated; consider changing to 'let' constant\n    var bb: Double = Double(b) / 255.0\n    ~~~ ^\n    let\n/tmp/tmpiqbphlpr.swift:10:9: warning: variable 'cmax' was never mutated; consider changing to 'let' constant\n    var cmax: Double = max(rr, max(gg, bb))\n    ~~~ ^\n    let\n/tmp/tmpiqbphlpr.swift:11:9: warning: variable 'cmin' was never mutated; consider changing to 'let' constant\n    var cmin: Double = min(rr, min(gg, bb))\n    ~~~ ^\n    let\n/tmp/tmpiqbphlpr.swift:12:9: warning: variable 'diff' was never mutated; consider changing to 'let' constant\n    var diff: Double = cmax - cmin\n    ~~~ ^\n  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r: Int, g: Int, b: Int) -> AnyHashable {\n    let r_ = Float(r) / 255\n    let g_ = Float(g) / 255\n    let b_ = Float(b) / 255\n    \n    let cmax = max(r_, g_, b_)\n    let cmin = min(r_, g_, b_)\n    let delta = cmax - cmin\n    \n    var h = 0.0\n    var s = 0.0\n    let v = cmax\n    \n    if delta == 0 {\n        h = 0\n    } else if cmax == r_ {\n        h = 60 * ((g_ - b_) / delta)\n    } else if cmax == g_ {\n        h = 60 * ((b_ - r_) / delta + 2)\n    } else if cmax == b_ {\n        h = 60 * ((r_ - g_) / delta + 4)\n    }\n    \n    if h < 0 {\n        h += 360\n    }\n    \n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n    \n    return [\n        \"h\": h,\n        \"s\": s,\n        \"v\": v\n    ]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))",
      "timestamp": 1666123534,
      "stdout": "",
      "stderr": "/tmp/tmpy9ran7jf.swift:56:46: error: cannot convert value of type '(Int, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 255, g: 255, b: 255) == (0, 0.0, 100.0))\n                                             ^\n                                                             as! AnyHashable\n/tmp/tmpy9ran7jf.swift:57:42: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 0, g: 215, b: 0) == (120.0, 100.0, 84.31372549019608))\n                                         ^\n                                                                           as! AnyHashable\n/tmp/tmpy9ran7jf.swift:58:45: error: cannot convert value of type '(Double, Double, Double)' to expected argument type 'AnyHashable'\nassert(rgb_to_hsv(r: 10, g: 215, b: 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608))\n                                            ^\n                                                                                                       as! AnyHashable\n/tmp/tmpy9ran7jf.swift:19:16: error: cannot assign value of type 'Float' to type 'Double'\n        h = 60 * ((g_ - b_) / delta)\n            ~~~^~~~~~~~~~~~~~~~~~~~~\n            Double(                 )\n/tmp/tmpy9ran7jf.swift:21:16: error: cannot assign value of type 'Float' to type 'Double'\n        h = 60 * ((b_ - r_) / delta + 2)\n            ~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n            Double(                     )\n/tmp/tmpy9ran7jf.swift:23:16: error: cannot assign value of type 'Float' to type 'Double'\n        h = 60 * ((r_ - g_) / delta + 4)\n            ~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n            Double(                     )\n/tmp/tmpy9ran7jf.swift:33:19: error: cannot assign value of type 'Float' to type 'Double'\n        s = delta / cmax\n            ~~~~~~^~~~~~\n            Double(     )\n/tmp/tmpy9ran7jf.swift:39:14: error: cannot convert value of type 'Float' to expected dictionary value type 'Double'\n        \"v\": v\n             ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}