{
  "name": "mbpp_745_divisible_by_digits",
  "language": "swift",
  "prompt": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpcf039uuc.swift:6:14: error: value of type 'Int' has no member 'digits'\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n           ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmp2sd6yl37.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b13b596ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b13b5661561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b13b5661286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b13b566113c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b13b5660bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp8d712rlo                        0x000055894a0fdf37 <unavailable> + 7991\n6    tmp8d712rlo                        0x000055894a0fe3f0 <unavailable> + 9200\n7    libswiftCore.so                    0x00002b13b565e6e0 _ArrayProtocol.filter(_:) + 518\n8    tmp8d712rlo                        0x000055894a0fdd5f <unavailable> + 7519\n9    tmp8d712rlo                        0x000055894a0fd5b0 <unavailable> + 5552\n10   libc.so.6                          0x00002b13b5b56460 __libc_start_main + 245\n11   tmp8d712rlo                        0x000055894a0fd2c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3176dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb31464561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb31464286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb3146413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb31463bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpp9dc2ha6                        0x0000557a4e565eb7 <unavailable> + 7863\n6    tmpp9dc2ha6                        0x0000557a4e566590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002aeb31573200 Sequence.allSatisfy(_:) + 432\n8    tmpp9dc2ha6                        0x0000557a4e565d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002aeb314c7d70 Sequence.filter(_:) + 518\n10   tmpp9dc2ha6                        0x0000557a4e565b83 <unavailable> + 7043\n11   tmpp9dc2ha6                        0x0000557a4e565790 <unavailable> + 6032\n12   libc.so.6                          0x00002aeb31959460 __libc_start_main + 245\n13   tmpp9dc2ha6                        0x0000557a4e5654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter({\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && ($1 != 0) && ($0 % $1 == 0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "/tmp/tmp2pg5wwo5.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) { $0 && ($1 != 0) && ($0 % $1 == 0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var flag = true\n        for j in i.digits {\n            if i % j != 0 {\n                flag = false\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpnwap9yjw.swift:7:20: error: value of type 'Int' has no member 'digits'\n        for j in i.digits {\n                 ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 2 && $0 != 5 && $0 != 6 && $0 != 8 && $0 != 9\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665510208,
      "stdout": "",
      "stderr": "/tmp/tmpxlew164w.swift:4:12: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n    return (startnum...endnum).filter {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && ($1 != 0 && $0 % $1 == 0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "/tmp/tmppumtt2k_.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) { $0 && ($1 != 0 && $0 % $1 == 0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "/tmp/tmp4x9yi8sa.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpjanzznp7.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmp2sd6yl37.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isDivisible(by: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpoj6psi8l.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) { $0 && $1.isDivisible(by: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter { number in\n        Array(String(number)).map { Int(String($0))! }.reduce(true, { $0 && number % $1 == 0 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb205a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb2029b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb2029b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb2029b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb2029abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpym78uhoi                        0x00005568759bd16d <unavailable> + 8557\n6    tmpym78uhoi                        0x00005568759bd900 <unavailable> + 10496\n7    libswiftCore.so                    0x00002aeb203aa410 Sequence.reduce<A>(_:_:) + 530\n8    tmpym78uhoi                        0x00005568759bcf0a <unavailable> + 7946\n9    libswiftCore.so                    0x00002aeb202986e0 _ArrayProtocol.filter(_:) + 518\n10   tmpym78uhoi                        0x00005568759bcd36 <unavailable> + 7478\n11   tmpym78uhoi                        0x00005568759bc910 <unavailable> + 6416\n12   libc.so.6                          0x00002aeb20790460 __libc_start_main + 245\n13   tmpym78uhoi                        0x00005568759bc629 <unavailable> + 5673\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpcdhmohfm.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        let digits = String(i).compactMap { Int(String($0)) }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b505e0ffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b505ddf6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b505ddf6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b505ddf613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b505ddf5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpu_rip8ka                        0x0000561d54e21fc7 <unavailable> + 8135\n6    tmpu_rip8ka                        0x0000561d54e224a0 <unavailable> + 9376\n7    libswiftCore.so                    0x00002b505df05200 Sequence.allSatisfy(_:) + 432\n8    tmpu_rip8ka                        0x0000561d54e21dce <unavailable> + 7630\n9    tmpu_rip8ka                        0x0000561d54e217b0 <unavailable> + 6064\n10   libc.so.6                          0x00002b505e2eb460 __libc_start_main + 245\n11   tmpu_rip8ka                        0x0000561d54e214c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5de0944c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5de063b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5de063b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5de063b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5de063abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpnp7z6yw8                        0x000055dd67293f57 <unavailable> + 8023\n6    tmpnp7z6yw8                        0x000055dd67294670 <unavailable> + 9840\n7    libswiftCore.so                    0x00002b5de074a200 Sequence.allSatisfy(_:) + 432\n8    tmpnp7z6yw8                        0x000055dd67293d18 <unavailable> + 7448\n9    libswiftCore.so                    0x00002b5de069ed70 Sequence.filter(_:) + 518\n10   tmpnp7z6yw8                        0x000055dd67293b83 <unavailable> + 7043\n11   tmpnp7z6yw8                        0x000055dd67293790 <unavailable> + 6032\n12   libc.so.6                          0x00002b5de0b30460 __libc_start_main + 245\n13   tmpnp7z6yw8                        0x000055dd672934a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isDivisible(by: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpy3vkjzci.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) { $0 && $1.isDivisible(by: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5de0944c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5de063b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5de063b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5de063b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5de063abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpnp7z6yw8                        0x000055dd67293f57 <unavailable> + 8023\n6    tmpnp7z6yw8                        0x000055dd67294670 <unavailable> + 9840\n7    libswiftCore.so                    0x00002b5de074a200 Sequence.allSatisfy(_:) + 432\n8    tmpnp7z6yw8                        0x000055dd67293d18 <unavailable> + 7448\n9    libswiftCore.so                    0x00002b5de069ed70 Sequence.filter(_:) + 518\n10   tmpnp7z6yw8                        0x000055dd67293b83 <unavailable> + 7043\n11   tmpnp7z6yw8                        0x000055dd67293790 <unavailable> + 6032\n12   libc.so.6                          0x00002b5de0b30460 __libc_start_main + 245\n13   tmpnp7z6yw8                        0x000055dd672934a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpcf039uuc.swift:6:14: error: value of type 'Int' has no member 'digits'\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n           ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isDivisible(by: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmp546rcs47.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isDivisible(by: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmp2sd6yl37.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122651,
      "stdout": "",
      "stderr": "/tmp/tmpy20iwnzx.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num = num / 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5c07f07c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5c07bfe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5c07bfe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5c07bfe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5c07bfdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpe78zh820                        0x000055ddd9207f07 <unavailable> + 7943\n6    tmpe78zh820                        0x000055ddd92083c0 <unavailable> + 9152\n7    libswiftCore.so                    0x00002b5c07bfb6e0 _ArrayProtocol.filter(_:) + 518\n8    tmpe78zh820                        0x000055ddd9207d3c <unavailable> + 7484\n9    tmpe78zh820                        0x000055ddd92075b0 <unavailable> + 5552\n10   libc.so.6                          0x00002b5c080f3460 __libc_start_main + 245\n11   tmpe78zh820                        0x000055ddd92072c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = num.digits\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpcmfe20b6.swift:5:26: error: value of type 'Int' has no member 'digits'\n        let digits = num.digits\n                     ~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits = i.digits\n        var isDivisible = true\n        for j in digits {\n            if i % j != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmp8kqsgwbn.swift:6:24: error: value of type 'Int' has no member 'digits'\n        var digits = i.digits\n                     ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3176dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb31464561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb31464286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb3146413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb31463bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpp9dc2ha6                        0x0000557a4e565eb7 <unavailable> + 7863\n6    tmpp9dc2ha6                        0x0000557a4e566590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002aeb31573200 Sequence.allSatisfy(_:) + 432\n8    tmpp9dc2ha6                        0x0000557a4e565d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002aeb314c7d70 Sequence.filter(_:) + 518\n10   tmpp9dc2ha6                        0x0000557a4e565b83 <unavailable> + 7043\n11   tmpp9dc2ha6                        0x0000557a4e565790 <unavailable> + 6032\n12   libc.so.6                          0x00002aeb31959460 __libc_start_main + 245\n13   tmpp9dc2ha6                        0x0000557a4e5654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { number in\n        let digits = String(number).map { Int(String($0))! }\n        return digits.allSatisfy { number % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f6f5e2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f6f2d9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3f6f2d9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3f6f2d913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3f6f2d8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpg2g609it                        0x00005600d68eff57 <unavailable> + 8023\n6    tmpg2g609it                        0x00005600d68f0670 <unavailable> + 9840\n7    libswiftCore.so                    0x00002b3f6f3e8200 Sequence.allSatisfy(_:) + 432\n8    tmpg2g609it                        0x00005600d68efd18 <unavailable> + 7448\n9    libswiftCore.so                    0x00002b3f6f33cd70 Sequence.filter(_:) + 518\n10   tmpg2g609it                        0x00005600d68efb83 <unavailable> + 7043\n11   tmpg2g609it                        0x00005600d68ef790 <unavailable> + 6032\n12   libc.so.6                          0x00002b3f6f7ce460 __libc_start_main + 245\n13   tmpg2g609it                        0x00005600d68ef4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3176dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb31464561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb31464286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb3146413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb31463bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpp9dc2ha6                        0x0000557a4e565eb7 <unavailable> + 7863\n6    tmpp9dc2ha6                        0x0000557a4e566590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002aeb31573200 Sequence.allSatisfy(_:) + 432\n8    tmpp9dc2ha6                        0x0000557a4e565d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002aeb314c7d70 Sequence.filter(_:) + 518\n10   tmpp9dc2ha6                        0x0000557a4e565b83 <unavailable> + 7043\n11   tmpp9dc2ha6                        0x0000557a4e565790 <unavailable> + 6032\n12   libc.so.6                          0x00002aeb31959460 __libc_start_main + 245\n13   tmpp9dc2ha6                        0x0000557a4e5654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1.isMultiple(of: $0)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpiyqiowqj.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpcf039uuc.swift:6:14: error: value of type 'Int' has no member 'digits'\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n           ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var divisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpkuikqf6g.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmpkuikqf6g.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmpkuikqf6g.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        let digits = String(i).compactMap{Int(String($0))}\n        if digits.allSatisfy({i % $0 == 0}) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19aa12cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19a9e23561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b19a9e23286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b19a9e2313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b19a9e22bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpszdguu3y                        0x0000555c48477007 <unavailable> + 8199\n6    tmpszdguu3y                        0x0000555c484774e0 <unavailable> + 9440\n7    libswiftCore.so                    0x00002b19a9f32200 Sequence.allSatisfy(_:) + 432\n8    tmpszdguu3y                        0x0000555c48476e13 <unavailable> + 7699\n9    tmpszdguu3y                        0x0000555c48476800 <unavailable> + 6144\n10   libc.so.6                          0x00002b19aa318460 __libc_start_main + 245\n11   tmpszdguu3y                        0x0000555c48476519 <unavailable> + 5401\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122651,
      "stdout": "",
      "stderr": "/tmp/tmpy20iwnzx.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3176dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb31464561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb31464286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb3146413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb31463bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpp9dc2ha6                        0x0000557a4e565eb7 <unavailable> + 7863\n6    tmpp9dc2ha6                        0x0000557a4e566590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002aeb31573200 Sequence.allSatisfy(_:) + 432\n8    tmpp9dc2ha6                        0x0000557a4e565d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002aeb314c7d70 Sequence.filter(_:) + 518\n10   tmpp9dc2ha6                        0x0000557a4e565b83 <unavailable> + 7043\n11   tmpp9dc2ha6                        0x0000557a4e565790 <unavailable> + 6032\n12   libc.so.6                          0x00002aeb31959460 __libc_start_main + 245\n13   tmpp9dc2ha6                        0x0000557a4e5654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var divisible = true\n        for j in String(i) {\n            if i % Int(String(j))! != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8d5eb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8d5bab561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af8d5bab286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af8d5bab13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af8d5baabb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpr8vhjey1                        0x000055fea0ad5eae <unavailable> + 7854\n6    tmpr8vhjey1                        0x000055fea0ad5770 <unavailable> + 6000\n7    libc.so.6                          0x00002af8d60a0460 __libc_start_main + 245\n8    tmpr8vhjey1                        0x000055fea0ad5489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpjanzznp7.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpjanzznp7.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 1 && $0 != 8 && $0 != 9 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 2 && $0 != 5 && $0 != 6 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 2 && $0 != 7 && $0 != 8 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 3 && $0 != 5 && $0 != 6 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 3 && $0 != 7 && $0 != 8 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 4 && $0 != 5 && $0 != 6 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 4 && $0 != 7 && $0 != 8 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 4 && $0 != 9 } &&\n        $0.digits.allSatisfy { $0 != 0 && $0 != 6 && $0 != 9 } &&\n        $0.digits.allSatisfy { $0 != 1 && $0 != 2 && $0 != 3 && $0 != 4 } &&\n        $0.digits.allSatisfy { $0 != 1 && $0 != 2 && $0 != 5 && $0 != 6 } &&\n        $0.digits.allSatisfy { $0 != 1 && $0 != 2 && $0 != 7 && $0 != 8 } &&\n        $0.digits.allSatisfy { $0 != 1 && $0 != 3 && $0 != 5 && $0 != 6 } &&\n        $0.digits.allSatisfy { $0 != 1 && $0 != 3 && $0 != 7 && $0 != 8 } &&\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmp2w0uo45v.swift:20:1: error: expected expression after operator\n}\n^\n/tmp/tmp2w0uo45v.swift:37:66: error: expected '}' at end of brace statement\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])\n                                                                 ^\n/tmp/tmp2w0uo45v.swift:3:63: note: to match this opening '{'\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n                                                              ^\n/tmp/tmp2w0uo45v.swift:23:6: error: operator functions can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter { num in\n        let digits = Array(String(num)).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bbc389c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bbc080561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3bbc080286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3bbc08013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3bbc07fbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpruznqguj                        0x000055a478411107 <unavailable> + 8455\n6    tmpruznqguj                        0x000055a478411880 <unavailable> + 10368\n7    libswiftCore.so                    0x00002b3bbc18f200 Sequence.allSatisfy(_:) + 432\n8    tmpruznqguj                        0x000055a478410ec3 <unavailable> + 7875\n9    libswiftCore.so                    0x00002b3bbc07d6e0 _ArrayProtocol.filter(_:) + 518\n10   tmpruznqguj                        0x000055a478410cf6 <unavailable> + 7414\n11   tmpruznqguj                        0x000055a4784108d0 <unavailable> + 6352\n12   libc.so.6                          0x00002b3bbc575460 __libc_start_main + 245\n13   tmpruznqguj                        0x000055a4784105e9 <unavailable> + 5609\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpcdhmohfm.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter { (num) -> Bool in\n        return Array(String(num)).map { Int(String($0))! }.reduce(true, { (result, digit) -> Bool in\n            return result && num % digit == 0\n        })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acd21f58c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acd21c4f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002acd21c4f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002acd21c4f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002acd21c4ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpkgwlzxj2                        0x000055ba11c7b16d <unavailable> + 8557\n6    tmpkgwlzxj2                        0x000055ba11c7b900 <unavailable> + 10496\n7    libswiftCore.so                    0x00002acd21d5e410 Sequence.reduce<A>(_:_:) + 530\n8    tmpkgwlzxj2                        0x000055ba11c7af0a <unavailable> + 7946\n9    libswiftCore.so                    0x00002acd21c4c6e0 _ArrayProtocol.filter(_:) + 518\n10   tmpkgwlzxj2                        0x000055ba11c7ad36 <unavailable> + 7478\n11   tmpkgwlzxj2                        0x000055ba11c7a910 <unavailable> + 6416\n12   libc.so.6                          0x00002acd22144460 __libc_start_main + 245\n13   tmpkgwlzxj2                        0x000055ba11c7a629 <unavailable> + 5673\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpcf039uuc.swift:6:14: error: value of type 'Int' has no member 'digits'\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n           ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpjanzznp7.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5de0944c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5de063b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5de063b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5de063b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5de063abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpnp7z6yw8                        0x000055dd67293f57 <unavailable> + 8023\n6    tmpnp7z6yw8                        0x000055dd67294670 <unavailable> + 9840\n7    libswiftCore.so                    0x00002b5de074a200 Sequence.allSatisfy(_:) + 432\n8    tmpnp7z6yw8                        0x000055dd67293d18 <unavailable> + 7448\n9    libswiftCore.so                    0x00002b5de069ed70 Sequence.filter(_:) + 518\n10   tmpnp7z6yw8                        0x000055dd67293b83 <unavailable> + 7043\n11   tmpnp7z6yw8                        0x000055dd67293790 <unavailable> + 6032\n12   libc.so.6                          0x00002b5de0b30460 __libc_start_main + 245\n13   tmpnp7z6yw8                        0x000055dd672934a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "/tmp/tmp4x9yi8sa.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpvn9ubido.swift:6:14: error: value of type 'Int' has no member 'digits'\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n           ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpjanzznp7.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var flag = true\n        for digit in String(i) {\n            if i % Int(String(digit))! != 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1f068c5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1f065bc561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b1f065bc286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b1f065bc13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b1f065bbbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpufhsq3o1                        0x000055bb66833e69 <unavailable> + 7785\n6    tmpufhsq3o1                        0x000055bb66833720 <unavailable> + 5920\n7    libc.so.6                          0x00002b1f06ab1460 __libc_start_main + 245\n8    tmpufhsq3o1                        0x000055bb66833439 <unavailable> + 5177\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { $0.digits.allSatisfy { $0.isMultiple(of: $0) } }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpf2_wzel1.swift:4:44: error: value of type 'Int' has no member 'digits'\n    return (startnum...endnum).filter { $0.digits.allSatisfy { $0.isMultiple(of: $0) } }\n                                        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3176dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb31464561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb31464286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb3146413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb31463bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpp9dc2ha6                        0x0000557a4e565eb7 <unavailable> + 7863\n6    tmpp9dc2ha6                        0x0000557a4e566590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002aeb31573200 Sequence.allSatisfy(_:) + 432\n8    tmpp9dc2ha6                        0x0000557a4e565d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002aeb314c7d70 Sequence.filter(_:) + 518\n10   tmpp9dc2ha6                        0x0000557a4e565b83 <unavailable> + 7043\n11   tmpp9dc2ha6                        0x0000557a4e565790 <unavailable> + 6032\n12   libc.so.6                          0x00002aeb31959460 __libc_start_main + 245\n13   tmpp9dc2ha6                        0x0000557a4e5654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isDivisible(by: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmptegi08ag.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isDivisible(by: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpcf039uuc.swift:6:14: error: value of type 'Int' has no member 'digits'\n        if i.digits.allSatisfy({ i % $0 == 0 }) {\n           ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var is_divisible = true\n        let digits = String(i).compactMap { Int(String($0)) }\n        for digit in digits {\n            if i % digit != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3c62ce4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3c629db561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3c629db286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3c629db13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3c629dabb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpwmts98s6                        0x0000562992c6cff0 <unavailable> + 8176\n6    tmpwmts98s6                        0x0000562992c6c8b0 <unavailable> + 6320\n7    libc.so.6                          0x00002b3c62ed0460 __libc_start_main + 245\n8    tmpwmts98s6                        0x0000562992c6c5c9 <unavailable> + 5577\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpjanzznp7.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "/tmp/tmp8o9s10lw.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isDivisible(by: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmp546rcs47.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isDivisible(by: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3176dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb31464561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb31464286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb3146413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb31463bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpp9dc2ha6                        0x0000557a4e565eb7 <unavailable> + 7863\n6    tmpp9dc2ha6                        0x0000557a4e566590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002aeb31573200 Sequence.allSatisfy(_:) + 432\n8    tmpp9dc2ha6                        0x0000557a4e565d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002aeb314c7d70 Sequence.filter(_:) + 518\n10   tmpp9dc2ha6                        0x0000557a4e565b83 <unavailable> + 7043\n11   tmpp9dc2ha6                        0x0000557a4e565790 <unavailable> + 6032\n12   libc.so.6                          0x00002aeb31959460 __libc_start_main + 245\n13   tmpp9dc2ha6                        0x0000557a4e5654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter { num in\n        num.digits.allSatisfy { digit in\n            num % digit == 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpqf237rsh.swift:5:13: error: value of type 'Int' has no member 'digits'\n        num.digits.allSatisfy { digit in\n        ~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpjanzznp7.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "/tmp/tmp4x9yi8sa.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5de0944c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5de063b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5de063b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5de063b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5de063abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpnp7z6yw8                        0x000055dd67293f57 <unavailable> + 8023\n6    tmpnp7z6yw8                        0x000055dd67294670 <unavailable> + 9840\n7    libswiftCore.so                    0x00002b5de074a200 Sequence.allSatisfy(_:) + 432\n8    tmpnp7z6yw8                        0x000055dd67293d18 <unavailable> + 7448\n9    libswiftCore.so                    0x00002b5de069ed70 Sequence.filter(_:) + 518\n10   tmpnp7z6yw8                        0x000055dd67293b83 <unavailable> + 7043\n11   tmpnp7z6yw8                        0x000055dd67293790 <unavailable> + 6032\n12   libc.so.6                          0x00002b5de0b30460 __libc_start_main + 245\n13   tmpnp7z6yw8                        0x000055dd672934a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num = num / 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5c07f07c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5c07bfe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5c07bfe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5c07bfe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5c07bfdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpe78zh820                        0x000055ddd9207f07 <unavailable> + 7943\n6    tmpe78zh820                        0x000055ddd92083c0 <unavailable> + 9152\n7    libswiftCore.so                    0x00002b5c07bfb6e0 _ArrayProtocol.filter(_:) + 518\n8    tmpe78zh820                        0x000055ddd9207d3c <unavailable> + 7484\n9    tmpe78zh820                        0x000055ddd92075b0 <unavailable> + 5552\n10   libc.so.6                          0x00002b5c080f3460 __libc_start_main + 245\n11   tmpe78zh820                        0x000055ddd92072c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter { num in\n        Array(String(num)).map { Int(String($0))! }.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11f7d7bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11f7a72561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b11f7a72286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b11f7a7213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b11f7a71bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpw6ojg_rj                        0x00005602925d60e7 <unavailable> + 8423\n6    tmpw6ojg_rj                        0x00005602925d6860 <unavailable> + 10336\n7    libswiftCore.so                    0x00002b11f7b81200 Sequence.allSatisfy(_:) + 432\n8    tmpw6ojg_rj                        0x00005602925d5eb1 <unavailable> + 7857\n9    libswiftCore.so                    0x00002b11f7a6f6e0 _ArrayProtocol.filter(_:) + 518\n10   tmpw6ojg_rj                        0x00005602925d5cf6 <unavailable> + 7414\n11   tmpw6ojg_rj                        0x00005602925d58d0 <unavailable> + 6352\n12   libc.so.6                          0x00002b11f7f67460 __libc_start_main + 245\n13   tmpw6ojg_rj                        0x00005602925d55e9 <unavailable> + 5609\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter { num in\n        Array(String(num)).map { Int(String($0))! }.reduce(true) { $0 && num % $1 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ca3187c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ca2e7e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b7ca2e7e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b7ca2e7e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b7ca2e7dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpzc1q996m                        0x00005647bc61016d <unavailable> + 8557\n6    tmpzc1q996m                        0x00005647bc610900 <unavailable> + 10496\n7    libswiftCore.so                    0x00002b7ca2f8d410 Sequence.reduce<A>(_:_:) + 530\n8    tmpzc1q996m                        0x00005647bc60ff0a <unavailable> + 7946\n9    libswiftCore.so                    0x00002b7ca2e7b6e0 _ArrayProtocol.filter(_:) + 518\n10   tmpzc1q996m                        0x00005647bc60fd36 <unavailable> + 7478\n11   tmpzc1q996m                        0x00005647bc60f910 <unavailable> + 6416\n12   libc.so.6                          0x00002b7ca3373460 __libc_start_main + 245\n13   tmpzc1q996m                        0x00005647bc60f629 <unavailable> + 5673\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5de0944c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5de063b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5de063b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5de063b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5de063abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpnp7z6yw8                        0x000055dd67293f57 <unavailable> + 8023\n6    tmpnp7z6yw8                        0x000055dd67294670 <unavailable> + 9840\n7    libswiftCore.so                    0x00002b5de074a200 Sequence.allSatisfy(_:) + 432\n8    tmpnp7z6yw8                        0x000055dd67293d18 <unavailable> + 7448\n9    libswiftCore.so                    0x00002b5de069ed70 Sequence.filter(_:) + 518\n10   tmpnp7z6yw8                        0x000055dd67293b83 <unavailable> + 7043\n11   tmpnp7z6yw8                        0x000055dd67293790 <unavailable> + 6032\n12   libc.so.6                          0x00002b5de0b30460 __libc_start_main + 245\n13   tmpnp7z6yw8                        0x000055dd672934a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter { num in\n        let digits = Array(String(num)).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bbc389c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bbc080561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3bbc080286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3bbc08013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3bbc07fbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpruznqguj                        0x000055a478411107 <unavailable> + 8455\n6    tmpruznqguj                        0x000055a478411880 <unavailable> + 10368\n7    libswiftCore.so                    0x00002b3bbc18f200 Sequence.allSatisfy(_:) + 432\n8    tmpruznqguj                        0x000055a478410ec3 <unavailable> + 7875\n9    libswiftCore.so                    0x00002b3bbc07d6e0 _ArrayProtocol.filter(_:) + 518\n10   tmpruznqguj                        0x000055a478410cf6 <unavailable> + 7414\n11   tmpruznqguj                        0x000055a4784108d0 <unavailable> + 6352\n12   libc.so.6                          0x00002b3bbc575460 __libc_start_main + 245\n13   tmpruznqguj                        0x000055a4784105e9 <unavailable> + 5609\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpjanzznp7.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5de0944c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5de063b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5de063b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5de063b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5de063abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpnp7z6yw8                        0x000055dd67293f57 <unavailable> + 8023\n6    tmpnp7z6yw8                        0x000055dd67294670 <unavailable> + 9840\n7    libswiftCore.so                    0x00002b5de074a200 Sequence.allSatisfy(_:) + 432\n8    tmpnp7z6yw8                        0x000055dd67293d18 <unavailable> + 7448\n9    libswiftCore.so                    0x00002b5de069ed70 Sequence.filter(_:) + 518\n10   tmpnp7z6yw8                        0x000055dd67293b83 <unavailable> + 7043\n11   tmpnp7z6yw8                        0x000055dd67293790 <unavailable> + 6032\n12   libc.so.6                          0x00002b5de0b30460 __libc_start_main + 245\n13   tmpnp7z6yw8                        0x000055dd672934a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in 1...9 {\n            if i % j != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "tmpgy8jo1jq/tmpgy8jo1jq.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adbaa696c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adbaa38db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adbaa38d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adbaa38c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgy8jo1jq                        0x000055a480ad061b <unavailable> + 5659\n5    libc.so.6                          0x00002adbaa882460 __libc_start_main + 245\n6    tmpgy8jo1jq                        0x000055a480ad0209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        let digits = Array(String(i))\n        if digits.allSatisfy({ i % Int(String($0))! == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6abab6dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6aba864561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b6aba864286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b6aba86413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b6aba863bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpavke1p9u                        0x0000562d1aecfff0 <unavailable> + 8176\n6    tmpavke1p9u                        0x0000562d1aed04c0 <unavailable> + 9408\n7    libswiftCore.so                    0x00002b6aba973200 Sequence.allSatisfy(_:) + 432\n8    tmpavke1p9u                        0x0000562d1aecfda0 <unavailable> + 7584\n9    tmpavke1p9u                        0x0000562d1aecf7e0 <unavailable> + 6112\n10   libc.so.6                          0x00002b6abad59460 __libc_start_main + 245\n11   tmpavke1p9u                        0x0000562d1aecf4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3176dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb31464561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb31464286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb3146413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb31463bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpp9dc2ha6                        0x0000557a4e565eb7 <unavailable> + 7863\n6    tmpp9dc2ha6                        0x0000557a4e566590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002aeb31573200 Sequence.allSatisfy(_:) + 432\n8    tmpp9dc2ha6                        0x0000557a4e565d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002aeb314c7d70 Sequence.filter(_:) + 518\n10   tmpp9dc2ha6                        0x0000557a4e565b83 <unavailable> + 7043\n11   tmpp9dc2ha6                        0x0000557a4e565790 <unavailable> + 6032\n12   libc.so.6                          0x00002aeb31959460 __libc_start_main + 245\n13   tmpp9dc2ha6                        0x0000557a4e5654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var divisible = true\n        let digits = i.digits\n        for digit in digits {\n            if i % digit != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpfpz24mee.swift:7:24: error: value of type 'Int' has no member 'digits'\n        let digits = i.digits\n                     ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter { num in\n        Array(String(num)).map { Int(String($0))! }.reduce(true) { $0 && num % $1 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ca3187c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ca2e7e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b7ca2e7e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b7ca2e7e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b7ca2e7dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpzc1q996m                        0x00005647bc61016d <unavailable> + 8557\n6    tmpzc1q996m                        0x00005647bc610900 <unavailable> + 10496\n7    libswiftCore.so                    0x00002b7ca2f8d410 Sequence.reduce<A>(_:_:) + 530\n8    tmpzc1q996m                        0x00005647bc60ff0a <unavailable> + 7946\n9    libswiftCore.so                    0x00002b7ca2e7b6e0 _ArrayProtocol.filter(_:) + 518\n10   tmpzc1q996m                        0x00005647bc60fd36 <unavailable> + 7478\n11   tmpzc1q996m                        0x00005647bc60f910 <unavailable> + 6416\n12   libc.so.6                          0x00002b7ca3373460 __libc_start_main + 245\n13   tmpzc1q996m                        0x00005647bc60f629 <unavailable> + 5673\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var is_divisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmppytrw9gu.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmppytrw9gu.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmppytrw9gu.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter { num in\n        let digits = Array(String(num)).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bbc389c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bbc080561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3bbc080286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3bbc08013c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3bbc07fbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpruznqguj                        0x000055a478411107 <unavailable> + 8455\n6    tmpruznqguj                        0x000055a478411880 <unavailable> + 10368\n7    libswiftCore.so                    0x00002b3bbc18f200 Sequence.allSatisfy(_:) + 432\n8    tmpruznqguj                        0x000055a478410ec3 <unavailable> + 7875\n9    libswiftCore.so                    0x00002b3bbc07d6e0 _ArrayProtocol.filter(_:) + 518\n10   tmpruznqguj                        0x000055a478410cf6 <unavailable> + 7414\n11   tmpruznqguj                        0x000055a4784108d0 <unavailable> + 6352\n12   libc.so.6                          0x00002b3bbc575460 __libc_start_main + 245\n13   tmpruznqguj                        0x000055a4784105e9 <unavailable> + 5609\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122651,
      "stdout": "",
      "stderr": "/tmp/tmpy20iwnzx.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "/tmp/tmp4x9yi8sa.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5de0944c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5de063b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5de063b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5de063b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5de063abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpnp7z6yw8                        0x000055dd67293f57 <unavailable> + 8023\n6    tmpnp7z6yw8                        0x000055dd67294670 <unavailable> + 9840\n7    libswiftCore.so                    0x00002b5de074a200 Sequence.allSatisfy(_:) + 432\n8    tmpnp7z6yw8                        0x000055dd67293d18 <unavailable> + 7448\n9    libswiftCore.so                    0x00002b5de069ed70 Sequence.filter(_:) + 518\n10   tmpnp7z6yw8                        0x000055dd67293b83 <unavailable> + 7043\n11   tmpnp7z6yw8                        0x000055dd67293790 <unavailable> + 6032\n12   libc.so.6                          0x00002b5de0b30460 __libc_start_main + 245\n13   tmpnp7z6yw8                        0x000055dd672934a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).map { Int(String($0))! }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5de0944c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5de063b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5de063b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5de063b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5de063abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpnp7z6yw8                        0x000055dd67293f57 <unavailable> + 8023\n6    tmpnp7z6yw8                        0x000055dd67294670 <unavailable> + 9840\n7    libswiftCore.so                    0x00002b5de074a200 Sequence.allSatisfy(_:) + 432\n8    tmpnp7z6yw8                        0x000055dd67293d18 <unavailable> + 7448\n9    libswiftCore.so                    0x00002b5de069ed70 Sequence.filter(_:) + 518\n10   tmpnp7z6yw8                        0x000055dd67293b83 <unavailable> + 7043\n11   tmpnp7z6yw8                        0x000055dd67293790 <unavailable> + 6032\n12   libc.so.6                          0x00002b5de0b30460 __libc_start_main + 245\n13   tmpnp7z6yw8                        0x000055dd672934a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var isDivisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                isDivisible = false\n                break\n            }\n            num /= 10\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3176dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb31464561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb31464286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb3146413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb31463bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpp9dc2ha6                        0x0000557a4e565eb7 <unavailable> + 7863\n6    tmpp9dc2ha6                        0x0000557a4e566590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002aeb31573200 Sequence.allSatisfy(_:) + 432\n8    tmpp9dc2ha6                        0x0000557a4e565d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002aeb314c7d70 Sequence.filter(_:) + 518\n10   tmpp9dc2ha6                        0x0000557a4e565b83 <unavailable> + 7043\n11   tmpp9dc2ha6                        0x0000557a4e565790 <unavailable> + 6032\n12   libc.so.6                          0x00002aeb31959460 __libc_start_main + 245\n13   tmpp9dc2ha6                        0x0000557a4e5654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpjanzznp7.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter { (num) -> Bool in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8e6b407c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8e6b0fe561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b8e6b0fe286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b8e6b0fe13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b8e6b0fdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp4npdis0t                        0x00005610ceda0fb7 <unavailable> + 8119\n6    tmp4npdis0t                        0x00005610ceda16e0 <unavailable> + 9952\n7    libswiftCore.so                    0x00002b8e6b20d200 Sequence.allSatisfy(_:) + 432\n8    tmp4npdis0t                        0x00005610ceda0e17 <unavailable> + 7703\n9    libswiftCore.so                    0x00002b8e6b0fb6e0 _ArrayProtocol.filter(_:) + 518\n10   tmp4npdis0t                        0x00005610ceda0c86 <unavailable> + 7302\n11   tmp4npdis0t                        0x00005610ceda0860 <unavailable> + 6240\n12   libc.so.6                          0x00002b8e6b5f3460 __libc_start_main + 245\n13   tmp4npdis0t                        0x00005610ceda0579 <unavailable> + 5497\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        let digits = digits_of_number(number: i)\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpgzzxh3oi.swift:6:22: error: cannot find 'digits_of_number' in scope\n        let digits = digits_of_number(number: i)\n                     ^~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var flag = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 {\n                flag = false\n                break\n            }\n            if i % digit != 0 {\n                flag = false\n                break\n            }\n            num /= 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpcdhmohfm.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            if $0 % (num % 10) != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab2ca897c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab2ca58e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab2ca58e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab2ca58e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab2ca58dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp_zm40nfr                        0x000055702a860a6c <unavailable> + 6764\n6    libswiftCore.so                    0x00002ab2ca5f1d70 Sequence.filter(_:) + 518\n7    tmp_zm40nfr                        0x000055702a860873 <unavailable> + 6259\n8    tmp_zm40nfr                        0x000055702a860480 <unavailable> + 5248\n9    libc.so.6                          0x00002ab2caa83460 __libc_start_main + 245\n10   tmp_zm40nfr                        0x000055702a860199 <unavailable> + 4505\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var digits = [Int]()\n        var num = i\n        while num > 0 {\n            let digit = num % 10\n            digits.append(digit)\n            num /= 10\n        }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81e35fec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81e32f5561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b81e32f5286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b81e32f513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b81e32f4bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmppdhyigi_                        0x00005652d360ee97 <unavailable> + 7831\n6    tmppdhyigi_                        0x00005652d360f350 <unavailable> + 9040\n7    libswiftCore.so                    0x00002b81e3404200 Sequence.allSatisfy(_:) + 432\n8    tmppdhyigi_                        0x00005652d360ed13 <unavailable> + 7443\n9    tmppdhyigi_                        0x00005652d360e560 <unavailable> + 5472\n10   libc.so.6                          0x00002b81e37ea460 __libc_start_main + 245\n11   tmppdhyigi_                        0x00005652d360e279 <unavailable> + 4729\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpjanzznp7.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3176dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb31464561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb31464286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb3146413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb31463bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpp9dc2ha6                        0x0000557a4e565eb7 <unavailable> + 7863\n6    tmpp9dc2ha6                        0x0000557a4e566590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002aeb31573200 Sequence.allSatisfy(_:) + 432\n8    tmpp9dc2ha6                        0x0000557a4e565d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002aeb314c7d70 Sequence.filter(_:) + 518\n10   tmpp9dc2ha6                        0x0000557a4e565b83 <unavailable> + 7043\n11   tmpp9dc2ha6                        0x0000557a4e565790 <unavailable> + 6032\n12   libc.so.6                          0x00002aeb31959460 __libc_start_main + 245\n13   tmpp9dc2ha6                        0x0000557a4e5654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { number in\n        let digits = String(number).compactMap { Int(String($0)) }\n        return digits.allSatisfy { number % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3e40d85c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3e40a7c561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3e40a7c286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3e40a7c13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3e40a7bbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpr6dowygt                        0x00005638f0be7eb7 <unavailable> + 7863\n6    tmpr6dowygt                        0x00005638f0be8590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002b3e40b8b200 Sequence.allSatisfy(_:) + 432\n8    tmpr6dowygt                        0x00005638f0be7d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002b3e40adfd70 Sequence.filter(_:) + 518\n10   tmpr6dowygt                        0x00005638f0be7b83 <unavailable> + 7043\n11   tmpr6dowygt                        0x00005638f0be7790 <unavailable> + 6032\n12   libc.so.6                          0x00002b3e40f71460 __libc_start_main + 245\n13   tmpr6dowygt                        0x00005638f0be74a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpcdhmohfm.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3176dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb31464561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb31464286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb3146413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb31463bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpp9dc2ha6                        0x0000557a4e565eb7 <unavailable> + 7863\n6    tmpp9dc2ha6                        0x0000557a4e566590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002aeb31573200 Sequence.allSatisfy(_:) + 432\n8    tmpp9dc2ha6                        0x0000557a4e565d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002aeb314c7d70 Sequence.filter(_:) + 518\n10   tmpp9dc2ha6                        0x0000557a4e565b83 <unavailable> + 7043\n11   tmpp9dc2ha6                        0x0000557a4e565790 <unavailable> + 6032\n12   libc.so.6                          0x00002aeb31959460 __libc_start_main + 245\n13   tmpp9dc2ha6                        0x0000557a4e5654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { $0.digits.allSatisfy { $0.isMultiple(of: $0) } }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpf2_wzel1.swift:4:44: error: value of type 'Int' has no member 'digits'\n    return (startnum...endnum).filter { $0.digits.allSatisfy { $0.isMultiple(of: $0) } }\n                                        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122651,
      "stdout": "",
      "stderr": "/tmp/tmpy20iwnzx.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpjanzznp7.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for num in startnum...endnum {\n        let digits = num.digits\n        if digits.allSatisfy({ num % $0 == 0 }) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmp66ch3jlx.swift:6:26: error: value of type 'Int' has no member 'digits'\n        let digits = num.digits\n                     ~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { (num) -> Bool in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ce2fe2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ce2cd9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b7ce2cd9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b7ce2cd913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b7ce2cd8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpkpsrpfpe                        0x000055c5bc339eb7 <unavailable> + 7863\n6    tmpkpsrpfpe                        0x000055c5bc33a590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002b7ce2de8200 Sequence.allSatisfy(_:) + 432\n8    tmpkpsrpfpe                        0x000055c5bc339d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002b7ce2d3cd70 Sequence.filter(_:) + 518\n10   tmpkpsrpfpe                        0x000055c5bc339b83 <unavailable> + 7043\n11   tmpkpsrpfpe                        0x000055c5bc339790 <unavailable> + 6032\n12   libc.so.6                          0x00002b7ce31ce460 __libc_start_main + 245\n13   tmpkpsrpfpe                        0x000055c5bc3394a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122651,
      "stdout": "",
      "stderr": "/tmp/tmpy20iwnzx.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var digits = [Int]()\n        var temp = i\n        while temp > 0 {\n            digits.append(temp % 10)\n            temp /= 10\n        }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae8feecbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae8febc2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae8febc2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae8febc213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae8febc1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpfc7whrxr                        0x00005637cc93be77 <unavailable> + 7799\n6    tmpfc7whrxr                        0x00005637cc93c330 <unavailable> + 9008\n7    libswiftCore.so                    0x00002ae8fecd1200 Sequence.allSatisfy(_:) + 432\n8    tmpfc7whrxr                        0x00005637cc93bceb <unavailable> + 7403\n9    tmpfc7whrxr                        0x00005637cc93b560 <unavailable> + 5472\n10   libc.so.6                          0x00002ae8ff0b7460 __libc_start_main + 245\n11   tmpfc7whrxr                        0x00005637cc93b279 <unavailable> + 4729\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6 && $0 != 8 && $0 != 9 && $0 != 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122967,
      "stdout": "",
      "stderr": "/tmp/tmp_5334_j0.swift:4:12: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n    return Array(startnum...endnum).filter {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpcdhmohfm.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0 != 0 && $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.reduce(true, { $0 && $1.isMultiple(of: $0) })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmprus2_quu.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true, { $0 && $1.isMultiple(of: $0) })\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6 && $0 != 8\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122743,
      "stdout": "",
      "stderr": "/tmp/tmph58kxgfa.swift:4:12: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n    return (startnum...endnum).filter {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3176dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb31464561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb31464286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb3146413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb31463bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpp9dc2ha6                        0x0000557a4e565eb7 <unavailable> + 7863\n6    tmpp9dc2ha6                        0x0000557a4e566590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002aeb31573200 Sequence.allSatisfy(_:) + 432\n8    tmpp9dc2ha6                        0x0000557a4e565d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002aeb314c7d70 Sequence.filter(_:) + 518\n10   tmpp9dc2ha6                        0x0000557a4e565b83 <unavailable> + 7043\n11   tmpp9dc2ha6                        0x0000557a4e565790 <unavailable> + 6032\n12   libc.so.6                          0x00002aeb31959460 __libc_start_main + 245\n13   tmpp9dc2ha6                        0x0000557a4e5654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "/tmp/tmp4x9yi8sa.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122651,
      "stdout": "",
      "stderr": "/tmp/tmpy20iwnzx.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { (num) -> Bool in\n        let digits = num.digits\n        return digits.allSatisfy { (digit) -> Bool in\n            num % digit == 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpd6l3e4ec.swift:5:26: error: value of type 'Int' has no member 'digits'\n        let digits = num.digits\n                     ~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    let numbers = Array(startnum...endnum)\n    return numbers.filter { number in\n        let digits = String(number).map { Int(String($0))! }\n        return digits.allSatisfy { number % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5143894c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b514358b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b514358b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b514358b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b514358abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpg_btvnyr                        0x000055b33d7c2087 <unavailable> + 8327\n6    tmpg_btvnyr                        0x000055b33d7c27f0 <unavailable> + 10224\n7    libswiftCore.so                    0x00002b514369a200 Sequence.allSatisfy(_:) + 432\n8    tmpg_btvnyr                        0x000055b33d7c1e48 <unavailable> + 7752\n9    libswiftCore.so                    0x00002b51435886e0 _ArrayProtocol.filter(_:) + 518\n10   tmpg_btvnyr                        0x000055b33d7c1c9f <unavailable> + 7327\n11   tmpg_btvnyr                        0x000055b33d7c1850 <unavailable> + 6224\n12   libc.so.6                          0x00002b5143a80460 __libc_start_main + 245\n13   tmpg_btvnyr                        0x000055b33d7c1569 <unavailable> + 5481\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var number = i\n        var is_divisible = true\n        while number > 0 {\n            let digit = number % 10\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false\n                break\n            }\n            number /= 10\n        }\n        if is_divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var digits = [Int]()\n        var number = i\n        while number > 0 {\n            digits.append(number % 10)\n            number /= 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b28d48d8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b28d45cf561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b28d45cf286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b28d45cf13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b28d45cebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpchzj_qvh                        0x000055aa42cd9f67 <unavailable> + 8039\n6    tmpchzj_qvh                        0x000055aa42cda420 <unavailable> + 9248\n7    libswiftCore.so                    0x00002b28d45cc6e0 _ArrayProtocol.filter(_:) + 518\n8    tmpchzj_qvh                        0x000055aa42cd9d9b <unavailable> + 7579\n9    tmpchzj_qvh                        0x000055aa42cd9610 <unavailable> + 5648\n10   libc.so.6                          0x00002b28d4ac4460 __libc_start_main + 245\n11   tmpchzj_qvh                        0x000055aa42cd9329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var flag = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                flag = false\n                break\n            }\n            num /= 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 {\n                divisible = false\n                break\n            }\n            if i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpjanzznp7.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "/tmp/tmp8o9s10lw.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in i.digits {\n            if i % j != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpl234uwcc.swift:7:20: error: value of type 'Int' has no member 'digits'\n        for j in i.digits {\n                 ~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3176dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb31464561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb31464286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb3146413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb31463bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpp9dc2ha6                        0x0000557a4e565eb7 <unavailable> + 7863\n6    tmpp9dc2ha6                        0x0000557a4e566590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002aeb31573200 Sequence.allSatisfy(_:) + 432\n8    tmpp9dc2ha6                        0x0000557a4e565d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002aeb314c7d70 Sequence.filter(_:) + 518\n10   tmpp9dc2ha6                        0x0000557a4e565b83 <unavailable> + 7043\n11   tmpp9dc2ha6                        0x0000557a4e565790 <unavailable> + 6032\n12   libc.so.6                          0x00002aeb31959460 __libc_start_main + 245\n13   tmpp9dc2ha6                        0x0000557a4e5654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "/tmp/tmp3qjqwy7w.swift:4:12: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n    return Array(startnum...endnum).filter {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter({$0 % $0.digits.reduce(1, *) == 0})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122628,
      "stdout": "",
      "stderr": "/tmp/tmpphzaxldz.swift:4:48: error: value of type 'Int' has no member 'digits'\n    return (startnum...endnum).filter({$0 % $0.digits.reduce(1, *) == 0})\n                                            ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3176dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb31464561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb31464286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb3146413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb31463bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpp9dc2ha6                        0x0000557a4e565eb7 <unavailable> + 7863\n6    tmpp9dc2ha6                        0x0000557a4e566590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002aeb31573200 Sequence.allSatisfy(_:) + 432\n8    tmpp9dc2ha6                        0x0000557a4e565d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002aeb314c7d70 Sequence.filter(_:) + 518\n10   tmpp9dc2ha6                        0x0000557a4e565b83 <unavailable> + 7043\n11   tmpp9dc2ha6                        0x0000557a4e565790 <unavailable> + 6032\n12   libc.so.6                          0x00002aeb31959460 __libc_start_main + 245\n13   tmpp9dc2ha6                        0x0000557a4e5654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "/tmp/tmp8o9s10lw.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpzormw47e.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isDivisible(by: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmp546rcs47.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isDivisible(by: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num /= 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    let numbers = (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }\n    return numbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122645,
      "stdout": "",
      "stderr": "/tmp/tmp8ev8a6ej.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && ($1 != 0 && $0 % $1 == 0)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122626,
      "stdout": "",
      "stderr": "/tmp/tmpopvoalgy.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509870,
      "stdout": "",
      "stderr": "/tmp/tmp4x9yi8sa.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmp2sd6yl37.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    let result = (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "/tmp/tmpyool0wb2.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmp2sd6yl37.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { number in\n        let digits = String(number).map { Int(String($0))! }\n        return digits.allSatisfy { number % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122623,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f6f5e2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f6f2d9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3f6f2d9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3f6f2d913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3f6f2d8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpg2g609it                        0x00005600d68eff57 <unavailable> + 8023\n6    tmpg2g609it                        0x00005600d68f0670 <unavailable> + 9840\n7    libswiftCore.so                    0x00002b3f6f3e8200 Sequence.allSatisfy(_:) + 432\n8    tmpg2g609it                        0x00005600d68efd18 <unavailable> + 7448\n9    libswiftCore.so                    0x00002b3f6f33cd70 Sequence.filter(_:) + 518\n10   tmpg2g609it                        0x00005600d68efb83 <unavailable> + 7043\n11   tmpg2g609it                        0x00005600d68ef790 <unavailable> + 6032\n12   libc.so.6                          0x00002b3f6f7ce460 __libc_start_main + 245\n13   tmpg2g609it                        0x00005600d68ef4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter { num in\n        let digits = String(num).compactMap { Int(String($0)) }\n        return digits.allSatisfy { num % $0 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb3176dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb31464561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aeb31464286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aeb3146413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aeb31463bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpp9dc2ha6                        0x0000557a4e565eb7 <unavailable> + 7863\n6    tmpp9dc2ha6                        0x0000557a4e566590 <unavailable> + 9616\n7    libswiftCore.so                    0x00002aeb31573200 Sequence.allSatisfy(_:) + 432\n8    tmpp9dc2ha6                        0x0000557a4e565d17 <unavailable> + 7447\n9    libswiftCore.so                    0x00002aeb314c7d70 Sequence.filter(_:) + 518\n10   tmpp9dc2ha6                        0x0000557a4e565b83 <unavailable> + 7043\n11   tmpp9dc2ha6                        0x0000557a4e565790 <unavailable> + 6032\n12   libc.so.6                          0x00002aeb31959460 __libc_start_main + 245\n13   tmpp9dc2ha6                        0x0000557a4e5654a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var flag = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 {\n                flag = false\n                break\n            }\n            if i % digit != 0 {\n                flag = false\n                break\n            }\n            num = num / 10\n        }\n        if flag {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy {\n            $0 != 0 && $0 != 1 && $0 != 5 && $0 != 6\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122651,
      "stdout": "",
      "stderr": "/tmp/tmpy20iwnzx.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0 != 1 && $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmpdl_q__us.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0 != 0 && $0 != 1 && $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmp2sd6yl37.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) { $0 && $1.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0 != 0 && $0 != 1 && $0 != 2 && $0 != 5 && $0 != 6 && $0 != 8 && $0 != 9 } &&\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122965,
      "stdout": "",
      "stderr": "/tmp/tmp0dzsoxcg.swift:4:12: error: the compiler is unable to type-check this expression in reasonable time; try breaking up the expression into distinct sub-expressions\n    return (startnum...endnum).filter {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var isDivisible = true\n        for j in String(i) {\n            if i % Int(String(j)) != 0 {\n                isDivisible = false\n                break\n            }\n        }\n        if isDivisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "/tmp/tmpff2oxici.swift:8:20: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            if i % Int(String(j)) != 0 {\n                   ^\n/tmp/tmpff2oxici.swift:8:20: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                   (              ?? <#default value#>)\n/tmp/tmpff2oxici.swift:8:20: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            if i % Int(String(j)) != 0 {\n                   ^\n                                 !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter { num in\n        Array(String(num)).map { Int(String($0))! }.reduce(true) { $0 && num % $1 == 0 }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ca3187c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ca2e7e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b7ca2e7e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b7ca2e7e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b7ca2e7dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpzc1q996m                        0x00005647bc61016d <unavailable> + 8557\n6    tmpzc1q996m                        0x00005647bc610900 <unavailable> + 10496\n7    libswiftCore.so                    0x00002b7ca2f8d410 Sequence.reduce<A>(_:_:) + 530\n8    tmpzc1q996m                        0x00005647bc60ff0a <unavailable> + 7946\n9    libswiftCore.so                    0x00002b7ca2e7b6e0 _ArrayProtocol.filter(_:) + 518\n10   tmpzc1q996m                        0x00005647bc60fd36 <unavailable> + 7478\n11   tmpzc1q996m                        0x00005647bc60f910 <unavailable> + 6416\n12   libc.so.6                          0x00002b7ca3373460 __libc_start_main + 245\n13   tmpzc1q996m                        0x00005647bc60f629 <unavailable> + 5673\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var digits = [Int]()\n        var num = i\n        while num > 0 {\n            digits.append(num % 10)\n            num /= 10\n        }\n        if digits.allSatisfy({ i % $0 == 0 }) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba9cb61c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba9c858561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aba9c858286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aba9c85813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aba9c857bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp33pc1072                        0x0000561c5cebbe77 <unavailable> + 7799\n6    tmp33pc1072                        0x0000561c5cebc330 <unavailable> + 9008\n7    libswiftCore.so                    0x00002aba9c967200 Sequence.allSatisfy(_:) + 432\n8    tmp33pc1072                        0x0000561c5cebbceb <unavailable> + 7403\n9    tmp33pc1072                        0x0000561c5cebb560 <unavailable> + 5472\n10   libc.so.6                          0x00002aba9cd4d460 __libc_start_main + 245\n11   tmp33pc1072                        0x0000561c5cebb279 <unavailable> + 4729\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.reduce(true) {\n            $0 && $1 != 0 && $0 % $1 == 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122633,
      "stdout": "",
      "stderr": "/tmp/tmp8o9s10lw.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.reduce(true) {\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result: [Int] = []\n    for i in startnum...endnum {\n        var digits: [Int] = []\n        var temp = i\n        while temp > 0 {\n            digits.append(temp % 10)\n            temp /= 10\n        }\n        if digits.filter({ i % $0 == 0 }).count == digits.count {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b53e0dafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b53e0aa6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b53e0aa6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b53e0aa613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b53e0aa5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmphddrtnhw                        0x000055dd9173df37 <unavailable> + 7991\n6    tmphddrtnhw                        0x000055dd9173e3f0 <unavailable> + 9200\n7    libswiftCore.so                    0x00002b53e0aa36e0 _ArrayProtocol.filter(_:) + 518\n8    tmphddrtnhw                        0x000055dd9173dd5f <unavailable> + 7519\n9    tmphddrtnhw                        0x000055dd9173d5b0 <unavailable> + 5552\n10   libc.so.6                          0x00002b53e0f9b460 __libc_start_main + 245\n11   tmphddrtnhw                        0x000055dd9173d2c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpjanzznp7.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmphts4nc0r.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    var result = [Int]()\n    for i in startnum...endnum {\n        var num = i\n        var divisible = true\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || i % digit != 0 {\n                divisible = false\n                break\n            }\n            num = num / 10\n        }\n        if divisible {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter {\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "/tmp/tmpjanzznp7.swift:5:12: error: value of type 'Int' has no member 'digits'\n        $0.digits.allSatisfy { $0.isMultiple(of: $0) }\n        ~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return Array(startnum...endnum).filter { (num) -> Bool in\n        let digits = Array(String(num))\n        return digits.allSatisfy { (digit) -> Bool in\n            num % Int(String(digit))! == 0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1666122624,
      "stdout": "",
      "stderr": "Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder operation\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8eec91c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8ee988561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af8ee988286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af8ee98813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af8ee987bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpn01829js                        0x0000558fb868df60 <unavailable> + 8032\n6    tmpn01829js                        0x0000558fb868e680 <unavailable> + 9856\n7    libswiftCore.so                    0x00002af8eea97200 Sequence.allSatisfy(_:) + 432\n8    tmpn01829js                        0x0000558fb868dd7b <unavailable> + 7547\n9    libswiftCore.so                    0x00002af8ee9856e0 _ArrayProtocol.filter(_:) + 518\n10   tmpn01829js                        0x0000558fb868dc46 <unavailable> + 7238\n11   tmpn01829js                        0x0000558fb868d820 <unavailable> + 6176\n12   libc.so.6                          0x00002af8eee7d460 __libc_start_main + 245\n13   tmpn01829js                        0x0000558fb868d539 <unavailable> + 5433\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfunc divisible_by_digits(startnum: Int, endnum: Int) -> [Int] {\n    return (startnum...endnum).filter {\n        var num = $0\n        while num > 0 {\n            let digit = num % 10\n            if digit == 0 || $0 % digit != 0 {\n                return false\n            }\n            num /= 10\n        }\n        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(divisible_by_digits(startnum: 1, endnum: 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22])\nassert(divisible_by_digits(startnum: 1, endnum: 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15])\nassert(divisible_by_digits(startnum: 20, endnum: 25) == [22, 24])",
      "timestamp": 1665509867,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}