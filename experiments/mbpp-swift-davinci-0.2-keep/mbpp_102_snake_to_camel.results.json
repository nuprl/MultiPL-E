{
  "name": "mbpp_102_snake_to_camel",
  "language": "swift",
  "prompt": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result += String(char).uppercaseString\n                is_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpw3i_o5ed.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpw3i_o5ed.swift:11:40: error: value of type 'String' has no member 'uppercaseString'\n                result += String(char).uppercaseString\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9r8je2um/tmp9r8je2um.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6954c82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6954979b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6954979988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b69549787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9r8je2um                        0x0000560276ddb5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6954e6e460 __libc_start_main + 245\n6    tmp9r8je2um                        0x0000560276ddb1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp0d64vk4k/tmp0d64vk4k.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d965cfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d962c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d962c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d962c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0d64vk4k                        0x0000564e40faf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d967bb460 __libc_start_main + 245\n6    tmp0d64vk4k                        0x0000564e40faf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp0d64vk4k/tmp0d64vk4k.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d965cfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d962c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d962c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d962c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0d64vk4k                        0x0000564e40faf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d967bb460 __libc_start_main + 245\n6    tmp0d64vk4k                        0x0000564e40faf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp321o7q8x/tmp321o7q8x.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9026d5bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9026a52b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9026a52988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9026a517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp321o7q8x                        0x000055d4bb1ae5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b9026f47460 __libc_start_main + 245\n6    tmp321o7q8x                        0x000055d4bb1ae1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmprijddvk3.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprijddvk3.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp9asbvp8v.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var new_word = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                new_word.append(char.uppercased())\n                capitalize = false\n            } else {\n                new_word.append(char)\n            }\n        }\n    }\n    return new_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp5s2qlxu3/tmp5s2qlxu3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6621120c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6620e17b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6620e17988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6620e167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5s2qlxu3                        0x00005634d8dd95a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b662130c460 __libc_start_main + 245\n6    tmp5s2qlxu3                        0x00005634d8dd91e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9r8je2um/tmp9r8je2um.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6954c82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6954979b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6954979988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b69549787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9r8je2um                        0x0000560276ddb5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6954e6e460 __libc_start_main + 245\n6    tmp9r8je2um                        0x0000560276ddb1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9r8je2um/tmp9r8je2um.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6954c82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6954979b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6954979988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b69549787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9r8je2um                        0x0000560276ddb5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6954e6e460 __libc_start_main + 245\n6    tmp9r8je2um                        0x0000560276ddb1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9ul6tfpf/tmp9ul6tfpf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab579877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab57956eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab57956e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab57956d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9ul6tfpf                        0x00005591689425a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab579a63460 __libc_start_main + 245\n6    tmp9ul6tfpf                        0x00005591689421e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmps75nh6oy/tmps75nh6oy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c8e059c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c8dd50b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c8dd50988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c8dd4f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps75nh6oy                        0x00005565ce7ef5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b4c8e245460 __libc_start_main + 245\n6    tmps75nh6oy                        0x00005565ce7ef1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp9asbvp8v.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpwyb5a53i.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwyb5a53i.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for letter in word.characters {\n        if letter == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(String(letter).uppercaseString)\n                is_upper = false\n            } else {\n                result.append(letter)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp0exo4aom.swift:6:24: error: 'characters' is unavailable: Please use String directly\n    for letter in word.characters {\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp0exo4aom.swift:11:46: error: value of type 'String' has no member 'uppercaseString'\n                result.append(String(letter).uppercaseString)\n                              ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp0d64vk4k/tmp0d64vk4k.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d965cfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d962c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d962c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d962c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0d64vk4k                        0x0000564e40faf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d967bb460 __libc_start_main + 245\n6    tmp0d64vk4k                        0x0000564e40faf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    for (index, char) in word.enumerated() {\n        if index == 0 {\n            result.append(char)\n        } else if char == \"_\" {\n            continue\n        } else if word[word.index(word.startIndex, offsetBy: index - 1)] == \"_\" {\n            result.append(char.uppercased())\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmpy31p0whp/tmpy31p0whp.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac7617d9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac7614d0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac7614d0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac7614cf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy31p0whp                        0x000055f400d65887 <unavailable> + 6279\n5    libc.so.6                          0x00002ac7619c5460 __libc_start_main + 245\n6    tmpy31p0whp                        0x000055f400d654c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalize = true\n        } else if capitalize {\n            result.append(char.uppercase())\n            capitalize = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmphbnpaf2a.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmphbnpaf2a.swift:10:32: error: value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase())\n                          ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result += String(char).capitalized\n                capitalize = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpzypm38pq.swift:11:40: error: value of type 'String' has no member 'capitalized'\n                result += String(char).capitalized\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var camel = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n            continue\n        }\n        if is_upper {\n            camel.append(char.uppercaseString)\n            is_upper = false\n        } else {\n            camel.append(char)\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpv66xdeyd.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpv66xdeyd.swift:12:31: error: value of type 'Character' has no member 'uppercaseString'\n            camel.append(char.uppercaseString)\n                         ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9ul6tfpf/tmp9ul6tfpf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab579877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab57956eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab57956e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab57956d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9ul6tfpf                        0x00005591689425a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab579a63460 __libc_start_main + 245\n6    tmp9ul6tfpf                        0x00005591689421e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpdj37w5pu.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdj37w5pu.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word.lowercased()\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmpp0khpa32.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpwyb5a53i.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwyb5a53i.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp0d64vk4k/tmp0d64vk4k.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d965cfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d962c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d962c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d962c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0d64vk4k                        0x0000564e40faf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d967bb460 __libc_start_main + 245\n6    tmp0d64vk4k                        0x0000564e40faf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp0d64vk4k/tmp0d64vk4k.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d965cfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d962c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d962c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d962c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0d64vk4k                        0x0000564e40faf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d967bb460 __libc_start_main + 245\n6    tmp0d64vk4k                        0x0000564e40faf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for word in words {\n        camel += word.capitalized\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmp36d6kjup.swift:7:23: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n        camel += word.capitalized\n                 ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp7t6furvb.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7t6furvb.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for c in word {\n        if c == \"_\" {\n            is_upper = true\n        } else if is_upper {\n            result.append(c.uppercased())\n            is_upper = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "tmph60tgw5a/tmph60tgw5a.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32469cdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32466c4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32466c4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32466c37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph60tgw5a                        0x00005587deb945a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b3246bb9460 __libc_start_main + 245\n6    tmph60tgw5a                        0x00005587deb941e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp9asbvp8v.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var word = word\n    var result = \"\"\n    while word.count > 0 {\n        if word.hasPrefix(\"_\") {\n            word.removeFirst()\n            result.append(word.removeFirst().uppercased())\n        } else {\n            result.append(word.removeFirst())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "tmpq3vrxoec/tmpq3vrxoec.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b42bffaec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b42bfca5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b42bfca5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b42bfca47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq3vrxoec                        0x0000558619b83587 <unavailable> + 5511\n5    libc.so.6                          0x00002b42c019a460 __libc_start_main + 245\n6    tmpq3vrxoec                        0x0000558619b831c9 <unavailable> + 4553\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercaseString)\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp4a48flpn.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4a48flpn.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmprijddvk3.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprijddvk3.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmps75nh6oy/tmps75nh6oy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c8e059c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c8dd50b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c8dd50988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c8dd4f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps75nh6oy                        0x00005565ce7ef5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b4c8e245460 __libc_start_main + 245\n6    tmps75nh6oy                        0x00005565ce7ef1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmps75nh6oy/tmps75nh6oy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c8e059c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c8dd50b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c8dd50988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c8dd4f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps75nh6oy                        0x00005565ce7ef5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b4c8e245460 __libc_start_main + 245\n6    tmps75nh6oy                        0x00005565ce7ef1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capital = false\n    for letter in word {\n        if letter == \"_\" {\n            capital = true\n        } else {\n            if capital {\n                result += String(letter).uppercased()\n                capital = false\n            } else {\n                result += String(letter)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "tmpg28_4ysw/tmpg28_4ysw.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8471b2bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8471822b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8471822988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b84718217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg28_4ysw                        0x0000558acaf385a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b8471d17460 __libc_start_main + 245\n6    tmpg28_4ysw                        0x0000558acaf381e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9r8je2um/tmp9r8je2um.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6954c82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6954979b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6954979988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b69549787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9r8je2um                        0x0000560276ddb5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6954e6e460 __libc_start_main + 245\n6    tmp9r8je2um                        0x0000560276ddb1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(char)\n            is_first = false\n        } else {\n            result.append(char.lowercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmpc9k2l83f.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmprijddvk3.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprijddvk3.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    for (index, char) in word.characters.enumerated() {\n        if char == \"_\" {\n            result += word[word.index(word.startIndex, offsetBy: index + 1)].uppercased()\n        } else {\n            result += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmpfy31i_n7.swift:5:31: error: 'characters' is unavailable: Please use String directly\n    for (index, char) in word.characters.enumerated() {\n                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercase())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpkqwz8fl_.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpkqwz8fl_.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp321o7q8x/tmp321o7q8x.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9026d5bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9026a52b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9026a52988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9026a517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp321o7q8x                        0x000055d4bb1ae5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b9026f47460 __libc_start_main + 245\n6    tmp321o7q8x                        0x000055d4bb1ae1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpb5lpl9z1.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result += String(c).uppercased()\n                is_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmp4auru2rk.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var first = true\n    for char in word {\n        if char == \"_\" {\n            first = true\n            continue\n        }\n        if first {\n            result.append(char.uppercased())\n            first = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpwyb5a53i.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwyb5a53i.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpuqlg1u_9.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmprijddvk3.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprijddvk3.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (i, word) in words.enumerated() {\n        if i == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmpwds1gpbs.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpb5lpl9z1.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9r8je2um/tmp9r8je2um.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6954c82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6954979b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6954979988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b69549787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9r8je2um                        0x0000560276ddb5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6954e6e460 __libc_start_main + 245\n6    tmp9r8je2um                        0x0000560276ddb1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp7t6furvb.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7t6furvb.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercaseString)\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpu7n_iu6m.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpu7n_iu6m.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n            continue\n        }\n        if is_first {\n            result.append(c.uppercaseString)\n            is_first = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmpbhp894ca.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpbhp894ca.swift:12:29: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(c.uppercaseString)\n                          ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_is_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_is_upper = true\n        } else {\n            if next_is_upper {\n                result += String(char).uppercased()\n                next_is_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "tmpa5ubzula/tmpa5ubzula.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2643241c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2642f38b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2642f38988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2642f377b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa5ubzula                        0x000055e92546c5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b264342d460 __libc_start_main + 245\n6    tmpa5ubzula                        0x000055e92546c1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp7t6furvb.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7t6furvb.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9r8je2um/tmp9r8je2um.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6954c82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6954979b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6954979988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b69549787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9r8je2um                        0x0000560276ddb5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6954e6e460 __libc_start_main + 245\n6    tmp9r8je2um                        0x0000560276ddb1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var output = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                output.append(char.uppercased())\n                is_upper = false\n            } else {\n                output.append(char)\n            }\n        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "tmphm_yu_ld/tmphm_yu_ld.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b06378bac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b06375b1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b06375b1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b06375b07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphm_yu_ld                        0x00005638324305a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b0637aa6460 __libc_start_main + 245\n6    tmphm_yu_ld                        0x00005638324301e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmprijddvk3.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprijddvk3.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp7t6furvb.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7t6furvb.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpuqlg1u_9.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for word in words {\n        result += word.capitalized\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmp6dpdvc0x.swift:7:24: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n        result += word.capitalized\n                  ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for (i, w) in words.enumerated() {\n        if i == 0 {\n            camel += w\n        } else {\n            camel += w.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmpkkff_48v.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp0d64vk4k/tmp0d64vk4k.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d965cfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d962c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d962c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d962c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0d64vk4k                        0x0000564e40faf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d967bb460 __libc_start_main + 245\n6    tmp0d64vk4k                        0x0000564e40faf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpwyb5a53i.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwyb5a53i.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(c.uppercaseString)\n            is_first = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmpvfl5dnlc.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpvfl5dnlc.swift:10:29: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(c.uppercaseString)\n                          ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result += String(char).uppercased()\n                capitalize = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "tmpyom9raar/tmpyom9raar.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b192fbd2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b192f8c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b192f8c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b192f8c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyom9raar                        0x0000564213aaa5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b192fdbe460 __libc_start_main + 245\n6    tmpyom9raar                        0x0000564213aaa1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp7t6furvb.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7t6furvb.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpawverbln.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(c.uppercase())\n            is_first = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpkv4x2oxy.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpkv4x2oxy.swift:10:29: error: value of type 'Character' has no member 'uppercase'\n            result.append(c.uppercase())\n                          ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(c.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpdeffmun2.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdeffmun2.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9ul6tfpf/tmp9ul6tfpf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab579877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab57956eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab57956e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab57956d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9ul6tfpf                        0x00005591689425a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab579a63460 __libc_start_main + 245\n6    tmp9ul6tfpf                        0x00005591689421e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_is_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_is_upper = true\n        } else {\n            if next_is_upper {\n                result.append(String(c).uppercased())\n                next_is_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "tmp5cgrctgr/tmp5cgrctgr.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6069fcdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6069cc4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6069cc4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6069cc37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5cgrctgr                        0x00005601cbe475f7 <unavailable> + 5623\n5    libc.so.6                          0x00002b606a1b9460 __libc_start_main + 245\n6    tmp5cgrctgr                        0x00005601cbe47239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for i in 0..<words.count {\n        if i == 0 {\n            result += words[i]\n        } else {\n            result += words[i].capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp_tbwv0w5.swift:10:32: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += words[i].capitalized\n                      ~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(c.uppercaseString)\n            } else {\n                result.append(c)\n            }\n            is_upper = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmpec5djhuc.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpec5djhuc.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(char.uppercased())\n            is_first = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmprn76dyir.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (i, w) in words.enumerated() {\n        if i == 0 {\n            camel += w\n        } else {\n            camel += w.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpc5_98kt0.swift:10:24: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += w.capitalized\n                     ~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp0d64vk4k/tmp0d64vk4k.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d965cfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d962c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d962c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d962c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0d64vk4k                        0x0000564e40faf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d967bb460 __libc_start_main + 245\n6    tmp0d64vk4k                        0x0000564e40faf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercaseString\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmpq9q_hcqz.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpq9q_hcqz.swift:11:40: error: value of type 'String' has no member 'uppercaseString'\n                result += String(char).uppercaseString\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n            continue\n        }\n        if is_upper {\n            result.append(char.uppercased())\n            is_upper = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "tmpr8fpgke9/tmpr8fpgke9.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af2e5587c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af2e527eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af2e527e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af2e527d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr8fpgke9                        0x00005574d0ace5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002af2e5773460 __libc_start_main + 245\n6    tmpr8fpgke9                        0x00005574d0ace1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp0d64vk4k/tmp0d64vk4k.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d965cfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d962c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d962c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d962c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0d64vk4k                        0x0000564e40faf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d967bb460 __libc_start_main + 245\n6    tmp0d64vk4k                        0x0000564e40faf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var newWord = \"\"\n    var wasUnderscore = false\n    for char in word.characters {\n        if char == \"_\" {\n            wasUnderscore = true\n        } else {\n            if wasUnderscore {\n                newWord.append(char.uppercased())\n            } else {\n                newWord.append(char)\n            }\n            wasUnderscore = false\n        }\n    }\n    return newWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmp4mzpx4we.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp0d64vk4k/tmp0d64vk4k.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d965cfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d962c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d962c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d962c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0d64vk4k                        0x0000564e40faf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d967bb460 __libc_start_main + 245\n6    tmp0d64vk4k                        0x0000564e40faf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9ul6tfpf/tmp9ul6tfpf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab579877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab57956eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab57956e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab57956d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9ul6tfpf                        0x00005591689425a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab579a63460 __libc_start_main + 245\n6    tmp9ul6tfpf                        0x00005591689421e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpuqlg1u_9.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9r8je2um/tmp9r8je2um.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6954c82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6954979b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6954979988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b69549787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9r8je2um                        0x0000560276ddb5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6954e6e460 __libc_start_main + 245\n6    tmp9r8je2um                        0x0000560276ddb1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp9asbvp8v.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercase())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpkqwz8fl_.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpkqwz8fl_.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpjca3phuq.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9r8je2um/tmp9r8je2um.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6954c82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6954979b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6954979988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b69549787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9r8je2um                        0x0000560276ddb5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6954e6e460 __libc_start_main + 245\n6    tmp9r8je2um                        0x0000560276ddb1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_letter = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_letter = true\n        } else if is_first_letter {\n            result.append(char.uppercaseString)\n            is_first_letter = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "/tmp/tmpxbd1b8k8.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpxbd1b8k8.swift:10:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpdj37w5pu.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdj37w5pu.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9ul6tfpf/tmp9ul6tfpf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab579877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab57956eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab57956e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab57956d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9ul6tfpf                        0x00005591689425a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab579a63460 __libc_start_main + 245\n6    tmp9ul6tfpf                        0x00005591689421e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpdj37w5pu.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdj37w5pu.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercase())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpkqwz8fl_.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpkqwz8fl_.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp9asbvp8v.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp7t6furvb.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7t6furvb.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9r8je2um/tmp9r8je2um.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6954c82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6954979b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6954979988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b69549787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9r8je2um                        0x0000560276ddb5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6954e6e460 __libc_start_main + 245\n6    tmp9r8je2um                        0x0000560276ddb1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n            } else {\n                result.append(c)\n            }\n            is_first = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "/tmp/tmp1luzaqml.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1luzaqml.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmprijddvk3.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprijddvk3.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9r8je2um/tmp9r8je2um.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6954c82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6954979b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6954979988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b69549787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9r8je2um                        0x0000560276ddb5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6954e6e460 __libc_start_main + 245\n6    tmp9r8je2um                        0x0000560276ddb1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word.lowercased()\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp2z67a5xr.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmprijddvk3.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprijddvk3.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercaseString\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "/tmp/tmpq9q_hcqz.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpq9q_hcqz.swift:11:40: error: value of type 'String' has no member 'uppercaseString'\n                result += String(char).uppercaseString\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercaseString)\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp4a48flpn.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4a48flpn.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(char.uppercaseString)\n            is_first = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp8zkmdek5.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp8zkmdek5.swift:10:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpjca3phuq.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9ul6tfpf/tmp9ul6tfpf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab579877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab57956eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab57956e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab57956d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9ul6tfpf                        0x00005591689425a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab579a63460 __libc_start_main + 245\n6    tmp9ul6tfpf                        0x00005591689421e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word.lowercased()\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp2z67a5xr.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(c.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpdeffmun2.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdeffmun2.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmprijddvk3.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprijddvk3.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpb5lpl9z1.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercase())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpkqwz8fl_.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpkqwz8fl_.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmpwyb5a53i.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwyb5a53i.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9ul6tfpf/tmp9ul6tfpf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab579877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab57956eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab57956e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab57956d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9ul6tfpf                        0x00005591689425a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab579a63460 __libc_start_main + 245\n6    tmp9ul6tfpf                        0x00005591689421e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmprijddvk3.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprijddvk3.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpdj37w5pu.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdj37w5pu.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercaseString)\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpu7n_iu6m.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpu7n_iu6m.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp9hm2sckm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9hm2sckm.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else if next_upper {\n            result.append(char.uppercaseString)\n            next_upper = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "/tmp/tmpz12viqoa.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpz12viqoa.swift:10:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result.append(char.uppercase())\n                capitalizeNext = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmprifo70ie.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprifo70ie.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for i in 0..<words.count {\n        if i == 0 {\n            result += words[i]\n        } else {\n            result += words[i].capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp_tbwv0w5.swift:10:32: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += words[i].capitalized\n                      ~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmps75nh6oy/tmps75nh6oy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c8e059c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c8dd50b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c8dd50988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c8dd4f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps75nh6oy                        0x00005565ce7ef5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b4c8e245460 __libc_start_main + 245\n6    tmps75nh6oy                        0x00005565ce7ef1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmp_ztmgvy4.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for letter in word {\n        if letter == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result += String(letter).uppercased()\n                is_upper = false\n            } else {\n                result += String(letter)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "tmppzjr89_p/tmppzjr89_p.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acf2d6c2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acf2d3b9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acf2d3b9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acf2d3b87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppzjr89_p                        0x000055da834075a7 <unavailable> + 5543\n5    libc.so.6                          0x00002acf2d8ae460 __libc_start_main + 245\n6    tmppzjr89_p                        0x000055da834071e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpjca3phuq.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var newWord = \"\"\n    var first = true\n    for char in word {\n        if char == \"_\" {\n            first = true\n        } else if first {\n            newWord += String(char).uppercased()\n            first = false\n        } else {\n            newWord += String(char)\n        }\n    }\n    return newWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result += String(char).uppercased()\n            } else {\n                result += String(char)\n            }\n            is_first = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp0d64vk4k/tmp0d64vk4k.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d965cfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d962c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d962c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d962c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0d64vk4k                        0x0000564e40faf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d967bb460 __libc_start_main + 245\n6    tmp0d64vk4k                        0x0000564e40faf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmps75nh6oy/tmps75nh6oy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c8e059c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c8dd50b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c8dd50988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c8dd4f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps75nh6oy                        0x00005565ce7ef5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b4c8e245460 __libc_start_main + 245\n6    tmps75nh6oy                        0x00005565ce7ef1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n            continue\n        }\n        if is_first_char {\n            result.append(char.uppercaseString)\n            is_first_char = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "/tmp/tmpe3fs58s_.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpe3fs58s_.swift:12:32: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(char.uppercaseString)\n                          ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let newWord = word.split(separator: \"_\").map { $0.capitalized }.joined()\n    return newWord\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "/tmp/tmpyum9szrh.swift:4:55: error: reference to member 'capitalized' cannot be resolved without a contextual type\n    let newWord = word.split(separator: \"_\").map { $0.capitalized }.joined()\n                                                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp321o7q8x/tmp321o7q8x.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9026d5bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9026a52b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9026a52988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9026a517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp321o7q8x                        0x000055d4bb1ae5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b9026f47460 __libc_start_main + 245\n6    tmp321o7q8x                        0x000055d4bb1ae1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmprijddvk3.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprijddvk3.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else if next_upper {\n            result.append(char.uppercase())\n            next_upper = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "/tmp/tmp9l24jd3v.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp9l24jd3v.swift:10:32: error: value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase())\n                          ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercaseString)\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpu7n_iu6m.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpu7n_iu6m.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmprijddvk3.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprijddvk3.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp0d64vk4k/tmp0d64vk4k.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d965cfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d962c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d962c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d962c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0d64vk4k                        0x0000564e40faf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d967bb460 __libc_start_main + 245\n6    tmp0d64vk4k                        0x0000564e40faf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(c.uppercase())\n            is_first = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmpkv4x2oxy.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpkv4x2oxy.swift:10:29: error: value of type 'Character' has no member 'uppercase'\n            result.append(c.uppercase())\n                          ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercase())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmphs2wau_6.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmphs2wau_6.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var isFirst = true\n    for char in word {\n        if char == \"_\" {\n            isFirst = true\n        } else {\n            if isFirst {\n                result.append(char.uppercased())\n                isFirst = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercase())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpkqwz8fl_.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpkqwz8fl_.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercaseString)\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpskrat_ur.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpskrat_ur.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercaseString)\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp4a48flpn.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4a48flpn.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9ul6tfpf/tmp9ul6tfpf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab579877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab57956eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab57956e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab57956d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9ul6tfpf                        0x00005591689425a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab579a63460 __libc_start_main + 245\n6    tmp9ul6tfpf                        0x00005591689421e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9r8je2um/tmp9r8je2um.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6954c82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6954979b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6954979988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b69549787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9r8je2um                        0x0000560276ddb5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6954e6e460 __libc_start_main + 245\n6    tmp9r8je2um                        0x0000560276ddb1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "/tmp/tmp5yfuu43x.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5yfuu43x.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_next_upper = true\n        } else {\n            if is_next_upper {\n                result.append(char.uppercase())\n                is_next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "/tmp/tmp21s5fz_n.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp21s5fz_n.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var result = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            result += word\n        } else {\n            result += word.capitalized\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "/tmp/tmp9asbvp8v.swift:10:28: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            result += word.capitalized\n                      ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercase())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpkqwz8fl_.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpkqwz8fl_.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123186,
      "stdout": "",
      "stderr": "/tmp/tmpy_28ejpn.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy_28ejpn.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517374,
      "stdout": "",
      "stderr": "tmp9ul6tfpf/tmp9ul6tfpf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab579877c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab57956eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab57956e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab57956d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9ul6tfpf                        0x00005591689425a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab579a63460 __libc_start_main + 245\n6    tmp9ul6tfpf                        0x00005591689421e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(c.uppercased())\n            is_first = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1666123188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"python_program\") == \"PythonProgram\")\nassert(snake_to_camel(word: \"python_language\") == \"PythonLanguage\")\nassert(snake_to_camel(word: \"programming_language\") == \"ProgrammingLanguage\")",
      "timestamp": 1665517373,
      "stdout": "",
      "stderr": "tmpk8sll7hy/tmpk8sll7hy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eee7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eee4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eee4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eee4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk8sll7hy                        0x0000555c8f1605a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6eee9c6460 __libc_start_main + 245\n6    tmpk8sll7hy                        0x0000555c8f1601e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}