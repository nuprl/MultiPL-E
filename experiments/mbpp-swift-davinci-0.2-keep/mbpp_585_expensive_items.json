{
  "name": "mbpp_585_expensive_items",
  "language": "swift",
  "prompt": "\nextension Double: Error {}\n        \n/// Write a function to find the n most expensive items in a given dataset.\nfunc expensive_items(items: [[String : Result<String, Double>]], n: Int) -> [[String : Result<String, Double>]] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(expensive_items(items: [[\"name\" : .success(\"Item-1\"), \"price\" : .failure(101.1)], [\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)]], n: 1) == [[\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)]])\nassert(expensive_items(items: [[\"name\" : .success(\"Item-1\"), \"price\" : .failure(101.1)], [\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)], [\"name\" : .success(\"Item-3\"), \"price\" : .failure(45.09)]], n: 2) == [[\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)], [\"name\" : .success(\"Item-1\"), \"price\" : .failure(101.1)]])\nassert(expensive_items(items: [[\"name\" : .success(\"Item-1\"), \"price\" : .failure(101.1)], [\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)], [\"name\" : .success(\"Item-3\"), \"price\" : .failure(45.09)], [\"name\" : .success(\"Item-4\"), \"price\" : .failure(22.75)]], n: 1) == [[\"name\" : .success(\"Item-2\"), \"price\" : .failure(555.22)]])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return items.sorted(by: {\n        switch ($0[\"price\"]!, $1[\"price\"]!) {\n        case (.success(let a), .success(let b)):\n            return a > b\n        case (.failure, .failure):\n            return false\n        case (.success, .failure):\n            return true\n        case (.failure, .success):\n            return false\n        }\n    }).prefix(n)",
    "    return items.sorted(by: {\n        switch $0[\"price\"]! {\n        case .success(let price1):\n            switch $1[\"price\"]! {\n            case .success(let price2):\n                return price1 > price2\n            case .failure:\n                return true\n            }\n        case .failure:\n            return false\n        }\n    }).prefix(n)",
    "    return items.sorted(by: {\n        switch $0[\"price\"]! {\n        case .success(let price1):\n            switch $1[\"price\"]! {\n            case .success(let price2):\n                return price1 > price2\n            case .failure:\n                return true\n            }\n        case .failure:\n            return false\n        }\n    }).prefix(n)",
    "    return items.sorted(by: {\n        switch ($0[\"price\"]!, $1[\"price\"]!) {\n        case (.success(let a), .success(let b)):\n            return a > b\n        case (.failure(_), .success(_)):\n            return false\n        case (.success(_), .failure(_)):\n            return true\n        case (.failure(_), .failure(_)):\n            return false\n        }\n    }).prefix(n)",
    "    return items.sorted(by: {\n        switch ($0[\"price\"]!, $1[\"price\"]!) {\n        case (.success(let a), .success(let b)):\n            return a > b\n        case (.failure(_), .success(_)):\n            return true\n        case (.success(_), .failure(_)):\n            return false\n        case (.failure(_), .failure(_)):\n            return false\n        }\n    }).prefix(n)",
    "    return []",
    "    return items.sorted(by: {\n        switch ($0[\"price\"]!, $1[\"price\"]!) {\n        case (.success(let price1), .success(let price2)):\n            return price1 > price2\n        case (.failure, .failure):\n            return false\n        case (.failure, .success):\n            return false\n        case (.success, .failure):\n            return true\n        }\n    }).prefix(n)",
    "    return items.sorted(by: {\n        switch ($0[\"price\"]!, $1[\"price\"]!) {\n        case let (.success(p0), .success(p1)):\n            return p0 > p1\n        case let (.failure(p0), .failure(p1)):\n            return p0 > p1\n        case (.success, .failure):\n            return true\n        case (.failure, .success):\n            return false\n        }\n    }).prefix(n)",
    "    return items.sorted { (lhs, rhs) -> Bool in\n        switch (lhs[\"price\"]!, rhs[\"price\"]!) {\n        case (.success(let lhsPrice), .success(let rhsPrice)):\n            return lhsPrice > rhsPrice\n        case (.failure(let lhsError), .failure(let rhsError)):\n            return lhsError > rhsError\n        case (.success, .failure):\n            return true\n        case (.failure, .success):\n            return false\n        }\n    }.prefix(n)",
    "    var sorted = items.sorted { (item1, item2) -> Bool in\n        switch (item1[\"price\"]!, item2[\"price\"]!) {\n        case let (.success(price1), .success(price2)):\n            return price1 > price2\n        case let (.failure(error1), .failure(error2)):\n            return error1 > error2\n        default:\n            return false\n        }\n    }\n    return Array(sorted.prefix(n))",
    "    return []",
    "    var result = [[String : Result<String, Double>]]()\n    var sortedItems = items.sorted { (item1, item2) -> Bool in\n        switch item1[\"price\"]! {\n        case .success(let price1):\n            switch item2[\"price\"]! {\n            case .success(let price2):\n                return price1 > price2\n            default:\n                return false\n            }\n        default:\n            return false\n        }\n    }\n    for i in 0..<n {\n        result.append(sortedItems[i])\n    }\n    return result",
    "    return items.sorted(by: { $0[\"price\"]!.value! > $1[\"price\"]!.value! }).prefix(n)",
    "    return items.sorted {\n        if case let .success(price1) = $0[\"price\"]!, case let .success(price2) = $1[\"price\"]! {\n            return price1 > price2\n        }\n        return false\n    }.prefix(n)",
    "    var result: [[String : Result<String, Double>]] = []\n    var sortedItems = items.sorted { (item1, item2) -> Bool in\n        switch item1[\"price\"]! {\n        case .success(let price1):\n            switch item2[\"price\"]! {\n            case .success(let price2):\n                return price1 > price2\n            case .failure:\n                return true\n            }\n        case .failure:\n            return false\n        }\n    }\n    for i in 0..<n {\n        result.append(sortedItems[i])\n    }\n    return result",
    "    var sortedItems = items.sorted { (item1, item2) -> Bool in\n        if let price1 = item1[\"price\"]?.value, let price2 = item2[\"price\"]?.value {\n            return price1 > price2\n        }\n        return false\n    }\n    return Array(sortedItems.prefix(n))",
    "    return items.sorted { (item1, item2) -> Bool in\n        switch item1[\"price\"] {\n        case .success(let price1):\n            switch item2[\"price\"] {\n            case .success(let price2):\n                return price1 > price2\n            default:\n                return false\n            }\n        default:\n            return false\n        }\n    }.prefix(n).map { $0 }",
    "    return items.sorted(by: {\n        if case .success(let price1) = $0[\"price\"]! {\n            if case .success(let price2) = $1[\"price\"]! {\n                return price1 > price2\n            }\n        }\n        return false\n    }).prefix(n)",
    "    return items.sorted { (a, b) -> Bool in\n        let aPrice = a[\"price\"]!.value!\n        let bPrice = b[\"price\"]!.value!\n        return aPrice > bPrice\n    }.prefix(n)",
    "    return items.sorted(by: {\n        switch ($0[\"price\"]!, $1[\"price\"]!) {\n        case (.success(let a), .success(let b)):\n            return a > b\n        case (.failure(_), .failure(_)):\n            return false\n        case (.success(_), .failure(_)):\n            return true\n        case (.failure(_), .success(_)):\n            return false\n        }\n    }).prefix(n)"
  ]
}