{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let val = dict[char] {\n            dict[char] = val + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp1cl8hbmf/tmp1cl8hbmf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c2d00c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c29f7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c29f7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c29f67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1cl8hbmf                        0x000055a3544b39aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad5c2eec460 __libc_start_main + 245\n6    tmp1cl8hbmf                        0x000055a3544b3329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    let str = str1.lowercased()\n    var dict = [Character: Int]()\n    for char in str {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for c in str1 {\n        if let count = dict[c] {\n            dict[c] = count + 1\n        } else {\n            dict[c] = 1\n        }\n    }\n    for c in str1 {\n        if dict[c] == 1 {\n            return String(c)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var char_count = [Character: Int]()\n    for char in str1 {\n        if let count = char_count[char] {\n            char_count[char] = count + 1\n        } else {\n            char_count[char] = 1\n        }\n    }\n    for (char, count) in char_count {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "tmpk2mikrst/tmpk2mikrst.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a0d184c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a0ce7bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a0ce7b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a0ce7a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk2mikrst                        0x00005638cca829aa <unavailable> + 6570\n5    libc.so.6                          0x00002b0a0d370460 __libc_start_main + 245\n6    tmpk2mikrst                        0x00005638cca82329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for c in str1 {\n        if let count = dict[c] {\n            dict[c] = count + 1\n        } else {\n            dict[c] = 1\n        }\n    }\n    for c in str1 {\n        if dict[c] == 1 {\n            return String(c)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var char_count = [Character: Int]()\n    for char in str1 {\n        if let count = char_count[char] {\n            char_count[char] = count + 1\n        } else {\n            char_count[char] = 1\n        }\n    }\n    for (char, count) in char_count {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "tmpk2mikrst/tmpk2mikrst.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a0d184c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a0ce7bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a0ce7b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a0ce7a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk2mikrst                        0x00005638cca829aa <unavailable> + 6570\n5    libc.so.6                          0x00002b0a0d370460 __libc_start_main + 245\n6    tmpk2mikrst                        0x00005638cca82329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    let str = str1.lowercased()\n    var dict = [Character: Int]()\n    for char in str {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [String: Int]()\n    for char in str1 {\n        if let count = dict[String(char)] {\n            dict[String(char)] = count + 1\n        } else {\n            dict[String(char)] = 1\n        }\n    }\n    for char in str1 {\n        if dict[String(char)] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var charDict = [Character: Int]()\n    for char in str1 {\n        if let count = charDict[char] {\n            charDict[char] = count + 1\n        } else {\n            charDict[char] = 1\n        }\n    }\n    for (char, count) in charDict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "tmp57j1zyta/tmp57j1zyta.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b83b09a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b83b069db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b83b069d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b83b069c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp57j1zyta                        0x00005589602799aa <unavailable> + 6570\n5    libc.so.6                          0x00002b83b0b92460 __libc_start_main + 245\n6    tmp57j1zyta                        0x0000558960279329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let value = dict[char] {\n            dict[char] = value + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let val = dict[char] {\n            dict[char] = val + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp1cl8hbmf/tmp1cl8hbmf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c2d00c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c29f7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c29f7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c29f67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1cl8hbmf                        0x000055a3544b39aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad5c2eec460 __libc_start_main + 245\n6    tmp1cl8hbmf                        0x000055a3544b3329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var char_count = [Character: Int]()\n    for char in str1 {\n        if let count = char_count[char] {\n            char_count[char] = count + 1\n        } else {\n            char_count[char] = 1\n        }\n    }\n    for (char, count) in char_count {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "tmpk2mikrst/tmpk2mikrst.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a0d184c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a0ce7bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a0ce7b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a0ce7a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk2mikrst                        0x00005638cca829aa <unavailable> + 6570\n5    libc.so.6                          0x00002b0a0d370460 __libc_start_main + 245\n6    tmpk2mikrst                        0x00005638cca82329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let val = dict[char] {\n            dict[char] = val + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp1cl8hbmf/tmp1cl8hbmf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c2d00c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c29f7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c29f7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c29f67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1cl8hbmf                        0x000055a3544b39aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad5c2eec460 __libc_start_main + 245\n6    tmp1cl8hbmf                        0x000055a3544b3329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    \n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict: [Character: Int] = [:]\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "tmp9h6iwfri/tmp9h6iwfri.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb4bf8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb4bc86b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb4bc86988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb4bc857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9h6iwfri                        0x000055d4dbdb4a3a <unavailable> + 6714\n5    libc.so.6                          0x00002aeb4c17b460 __libc_start_main + 245\n6    tmp9h6iwfri                        0x000055d4dbdb43b9 <unavailable> + 5049\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var char_dict = [Character: Int]()\n    for char in str1 {\n        if let count = char_dict[char] {\n            char_dict[char] = count + 1\n        } else {\n            char_dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = char_dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let value = dict[char] {\n            dict[char] = value + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for c in str1 {\n        if let count = dict[c] {\n            dict[c] = count + 1\n        } else {\n            dict[c] = 1\n        }\n    }\n    for c in str1 {\n        if let count = dict[c], count == 1 {\n            return String(c)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict: [Character: Int] = [:]\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "tmp9h6iwfri/tmp9h6iwfri.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb4bf8fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb4bc86b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb4bc86988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb4bc857b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9h6iwfri                        0x000055d4dbdb4a3a <unavailable> + 6714\n5    libc.so.6                          0x00002aeb4c17b460 __libc_start_main + 245\n6    tmp9h6iwfri                        0x000055d4dbdb43b9 <unavailable> + 5049\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let value = dict[char] {\n            dict[char] = value + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for c in str1 {\n        if let count = dict[c] {\n            dict[c] = count + 1\n        } else {\n            dict[c] = 1\n        }\n    }\n    for c in str1 {\n        if dict[c] == 1 {\n            return String(c)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let val = dict[char] {\n            dict[char] = val + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp1cl8hbmf/tmp1cl8hbmf.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c2d00c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c29f7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c29f7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c29f67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1cl8hbmf                        0x000055a3544b39aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad5c2eec460 __libc_start_main + 245\n6    tmp1cl8hbmf                        0x000055a3544b3329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let value = dict[char] {\n            dict[char] = value + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var charCount = [Character: Int]()\n    for char in str1 {\n        charCount[char] = (charCount[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if charCount[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    \n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    let str = str1.lowercased()\n    var dict = [Character: Int]()\n    for char in str {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "tmp00yxdwqx/tmp00yxdwqx.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4dec30cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4dec003b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4dec003988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4dec0027b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp00yxdwqx                        0x000055eadf8279fa <unavailable> + 6650\n5    libc.so.6                          0x00002b4dec4f8460 __libc_start_main + 245\n6    tmp00yxdwqx                        0x000055eadf827379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict: [Character: Int] = [:]\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "tmplaldiu3n/tmplaldiu3n.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aacc3e56c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aacc3b4db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aacc3b4d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aacc3b4c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplaldiu3n                        0x000055d58cf86a3a <unavailable> + 6714\n5    libc.so.6                          0x00002aacc4042460 __libc_start_main + 245\n6    tmplaldiu3n                        0x000055d58cf863b9 <unavailable> + 5049\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    let characters = Array(str1)\n    var dict = [Character: Int]()\n    for char in characters {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in characters {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char, default: 0] += 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var str = str1.lowercased()\n    var dict = [Character: Int]()\n    for char in str {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (char, count) in dict {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            return String(key)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "tmp_9g2ong5/tmp_9g2ong5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad725ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7259c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7259c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7259c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_9g2ong5                        0x000055aa28ca49aa <unavailable> + 6570\n5    libc.so.6                          0x00002ad725eb7460 __libc_start_main + 245\n6    tmp_9g2ong5                        0x000055aa28ca4329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
      "timestamp": 1665510151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}