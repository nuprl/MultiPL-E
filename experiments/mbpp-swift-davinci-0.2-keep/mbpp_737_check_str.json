{
  "name": "mbpp_737_check_str",
  "language": "swift",
  "prompt": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n    return matches.count > 0",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil",
    "    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil"
  ]
}