{
  "name": "mbpp_566_sum_digits",
  "language": "swift",
  "prompt": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "tmp32f85x1w/tmp32f85x1w.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b589785fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5897556b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5897556988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b58975557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp32f85x1w                        0x0000560a7783a1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b5897a4b460 __libc_start_main + 245\n6    tmp32f85x1w                        0x0000560a77839e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n.description.characters.map { Int(String($0))! }.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "/tmp/tmph_mgrhxu.swift:4:68: error: extraneous argument label 'combine:' in call\n    return n.description.characters.map { Int(String($0))! }.reduce(0, combine: +)\n                                                                   ^   ~~~~~~~~~\n                                                                       \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "tmp32f85x1w/tmp32f85x1w.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b589785fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5897556b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5897556988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b58975557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp32f85x1w                        0x0000560a7783a1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b5897a4b460 __libc_start_main + 245\n6    tmp32f85x1w                        0x0000560a77839e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n.description.characters.map { Int(String($0))! }.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "/tmp/tmph_mgrhxu.swift:4:68: error: extraneous argument label 'combine:' in call\n    return n.description.characters.map { Int(String($0))! }.reduce(0, combine: +)\n                                                                   ^   ~~~~~~~~~\n                                                                       \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    if n < 10 {\n        return n\n    }\n    return sum_digits(n / 10) + n % 10\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "/tmp/tmpyzh13p5j.swift:7:23: error: missing argument label 'n:' in call\n    return sum_digits(n / 10) + n % 10\n                      ^\n                      n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var n = n\n    var sum = 0\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n.description.characters.reduce(0) { $0 + Int(String($1))! }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "/tmp/tmpc29fpnlh.swift:4:26: error: 'characters' is unavailable: Please use String directly\n    return n.description.characters.reduce(0) { $0 + Int(String($1))! }\n                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var n = n\n    var sum = 0\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var n = n\n    var sum = 0\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n.description.characters.map { Int(String($0))! }.reduce(0, combine: +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1666123802,
      "stdout": "",
      "stderr": "/tmp/tmph_mgrhxu.swift:4:68: error: extraneous argument label 'combine:' in call\n    return n.description.characters.map { Int(String($0))! }.reduce(0, combine: +)\n                                                                   ^   ~~~~~~~~~\n                                                                       \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "tmp32f85x1w/tmp32f85x1w.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b589785fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5897556b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5897556988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b58975557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp32f85x1w                        0x0000560a7783a1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b5897a4b460 __libc_start_main + 245\n6    tmp32f85x1w                        0x0000560a77839e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510623,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n: Int) -> Int {\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_digits(n: 345) == 12)\nassert(sum_digits(n: 12) == 3)\nassert(sum_digits(n: 97) == 16)",
      "timestamp": 1665510622,
      "stdout": "",
      "stderr": "/tmp/tmpdk9a9sx5.swift:4:45: error: missing argument label 'n:' in call\n    return n == 0 ? 0 : n % 10 + sum_digits(n / 10)\n                                            ^\n                                            n: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}