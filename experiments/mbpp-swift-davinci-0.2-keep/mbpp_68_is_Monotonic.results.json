{
  "name": "mbpp_68_is_Monotonic",
  "language": "swift",
  "prompt": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            is_increasing = false\n        }\n        if A[i] > A[i - 1] {\n            is_decreasing = false\n        }\n    }\n    \n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 0..<A.count - 1 {\n        if A[i] > A[i + 1] {\n            is_increasing = false\n        }\n        if A[i] < A[i + 1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            increasing = false\n        }\n        if A[i] > A[i - 1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    \n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    if A.count <= 2 {\n        return true\n    }\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_Increasing = true\n    var is_Decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            is_Increasing = false\n        }\n        if A[i] > A[i - 1] {\n            is_Decreasing = false\n        }\n    }\n    return is_Increasing || is_Decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 0..<A.count - 1 {\n        if A[i] > A[i + 1] {\n            increasing = false\n        }\n        if A[i] < A[i + 1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    if A.count <= 2 {\n        return true\n    }\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_Increasing = true\n    var is_Decreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_Increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_Decreasing = false\n        }\n    }\n    \n    return is_Increasing || is_Decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_non_decreasing = true\n    var is_non_increasing = true\n    for i in 1..<A.count {\n        if A[i - 1] > A[i] {\n            is_non_decreasing = false\n        }\n        if A[i - 1] < A[i] {\n            is_non_increasing = false\n        }\n    }\n    return is_non_decreasing || is_non_increasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    if A.count <= 2 {\n        return true\n    }\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 0..<A.count - 1 {\n        if A[i] > A[i + 1] {\n            isIncreasing = false\n        }\n        if A[i] < A[i + 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_non_decreasing = true\n    var is_non_increasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_non_decreasing = false\n        }\n        if A[i] > A[i-1] {\n            is_non_increasing = false\n        }\n    }\n    return is_non_decreasing || is_non_increasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            is_increasing = false\n        }\n        if A[i] > A[i - 1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            increasing = false\n        }\n        if A[i] > A[i - 1] {\n            decreasing = false\n        }\n    }\n    \n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_non_decreasing = true\n    var is_non_increasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            is_non_decreasing = false\n        }\n        if A[i] > A[i - 1] {\n            is_non_increasing = false\n        }\n    }\n    \n    return is_non_decreasing || is_non_increasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    if A.count <= 2 { return true }\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            is_increasing = false\n        }\n        if A[i] > A[i - 1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            is_increasing = false\n        }\n        if A[i] > A[i - 1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_monotonic = true\n    var i = 0\n    var j = 1\n    while i < A.count - 1 && j < A.count {\n        if A[i] > A[j] {\n            is_monotonic = false\n            break\n        }\n        i += 1\n        j += 1\n    }\n    return is_monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmp0zjqytkd/tmp0zjqytkd.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae7ac5eec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae7ac2e5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae7ac2e5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae7ac2e47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0zjqytkd                        0x000055953c3623b2 <unavailable> + 5042\n5    libc.so.6                          0x00002ae7ac7da460 __libc_start_main + 245\n6    tmp0zjqytkd                        0x000055953c362019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            increasing = false\n        }\n        if A[i] > A[i - 1] {\n            decreasing = false\n        }\n    }\n\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            increasing = false\n        }\n        if A[i] > A[i - 1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var inc = true\n    var dec = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            inc = false\n        }\n        if A[i] > A[i-1] {\n            dec = false\n        }\n    }\n    return inc || dec\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            is_increasing = false\n        }\n        if A[i] > A[i - 1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        \n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            increasing = false\n        }\n        if A[i] > A[i - 1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            increasing = false\n        }\n        if A[i] > A[i - 1] {\n            decreasing = false\n        }\n    }\n    \n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_monotonic = true\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 0..<A.count-1 {\n        if A[i] < A[i+1] {\n            is_decreasing = false\n        }\n        if A[i] > A[i+1] {\n            is_increasing = false\n        }\n    }\n    if !is_increasing && !is_decreasing {\n        is_monotonic = false\n    }\n    return is_monotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_non_decreasing = true\n    var is_non_increasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_non_decreasing = false\n        }\n        if A[i] > A[i-1] {\n            is_non_increasing = false\n        }\n    }\n    \n    return is_non_decreasing || is_non_increasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_non_decreasing = true\n    var is_non_increasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_non_decreasing = false\n        }\n        if A[i] > A[i-1] {\n            is_non_increasing = false\n        }\n    }\n    return is_non_decreasing || is_non_increasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            increasing = false\n        }\n        if A[i] > A[i - 1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            increasing = false\n        }\n        if A[i] > A[i - 1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_inc = true\n    var is_dec = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_inc = false\n        }\n        if A[i] > A[i-1] {\n            is_dec = false\n        }\n    }\n    return is_inc || is_dec\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    \n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            is_increasing = false\n        }\n        if A[i] > A[i - 1] {\n            is_decreasing = false\n        }\n    }\n    \n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 0..<A.count-1 {\n        if A[i] > A[i+1] {\n            increasing = false\n        }\n        if A[i] < A[i+1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            increasing = false\n        }\n        if A[i] > A[i - 1] {\n            decreasing = false\n        }\n    }\n    \n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    \n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isMonotonic = true\n    var direction: Int?\n    for i in 0..<A.count - 1 {\n        if direction == nil {\n            if A[i] < A[i + 1] {\n                direction = 1\n            } else if A[i] > A[i + 1] {\n                direction = -1\n            }\n        } else {\n            if A[i] * direction! > A[i + 1] * direction! {\n                isMonotonic = false\n                break\n            }\n        }\n    }\n    return isMonotonic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_non_decreasing = true\n    var is_non_increasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            is_non_decreasing = false\n        }\n        if A[i] > A[i - 1] {\n            is_non_increasing = false\n        }\n    }\n    return is_non_decreasing || is_non_increasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            is_increasing = false\n        }\n        if A[i] > A[i - 1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            is_increasing = false\n        }\n        if A[i] > A[i - 1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            increasing = false\n        }\n        if A[i] > A[i - 1] {\n            decreasing = false\n        }\n    }\n    \n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            increasing = false\n        }\n        if A[i] > A[i - 1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var is_non_decreasing = true\n    var is_non_increasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            is_non_decreasing = false\n        }\n        if A[i] > A[i - 1] {\n            is_non_increasing = false\n        }\n    }\n    \n    return is_non_decreasing || is_non_increasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        \n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122887,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            increasing = false\n        }\n        if A[i] > A[i - 1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    \n    for i in 1..<A.count {\n        if A[i] < A[i - 1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i - 1] {\n            isDecreasing = false\n        }\n    }\n    \n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1665510046,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A: [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 1..<A.count {\n        if A[i] < A[i-1] {\n            isIncreasing = false\n        }\n        if A[i] > A[i-1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_Monotonic(A: [6, 5, 4, 4]) == true)\nassert(is_Monotonic(A: [1, 2, 2, 3]) == true)\nassert(is_Monotonic(A: [1, 3, 2]) == false)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}