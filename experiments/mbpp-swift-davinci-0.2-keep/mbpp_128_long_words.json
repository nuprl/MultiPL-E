{
  "name": "mbpp_128_long_words",
  "language": "swift",
  "prompt": "\n/// Write a function to find words that are longer than n characters from a given list of words.\nfunc long_words(n: Int, str: String) -> [String] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(long_words(n: 3, str: \"python is a programming language\") == [\"python\", \"programming\", \"language\"])\nassert(long_words(n: 2, str: \"writing a program\") == [\"writing\", \"program\"])\nassert(long_words(n: 5, str: \"sorting list\") == [\"sorting\"])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter({$0.count > n})",
    "    let words = str.components(separatedBy: \" \")\n    var long_words = [String]()\n    for word in words {\n        if word.count > n {\n            long_words.append(word)\n        }\n    }\n    return long_words",
    "    let words = str.split(separator: \" \")\n    var result: [String] = []\n    for word in words {\n        if word.count > n {\n            result.append(String(word))\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var long_words = [String]()\n    for word in words {\n        if word.count > n {\n            long_words.append(word)\n        }\n    }\n    return long_words",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    var result: [String] = []\n    for word in str.components(separatedBy: \" \") {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var long_words = [String]()\n    for word in words {\n        if word.count > n {\n            long_words.append(word)\n        }\n    }\n    return long_words",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    var result: [String] = []\n    for word in str.components(separatedBy: \" \") {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var longWords = [String]()\n    for word in words {\n        if word.count > n {\n            longWords.append(word)\n        }\n    }\n    return longWords",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var long_words = [String]()\n    for word in words {\n        if word.count > n {\n            long_words.append(word)\n        }\n    }\n    return long_words",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.characters.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.split(separator: \" \")\n    var longWords = [String]()\n    for word in words {\n        if word.count > n {\n            longWords.append(String(word))\n        }\n    }\n    return longWords",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter{$0.count > n}",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    let words = str.components(separatedBy: \" \")\n    return words.filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result: [String] = []\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter({$0.count > n})",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    var result: [String] = []\n    for word in str.components(separatedBy: \" \") {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    let words = str.components(separatedBy: \" \")\n    var longWords = [String]()\n    for word in words {\n        if word.count > n {\n            longWords.append(word)\n        }\n    }\n    return longWords",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    var result: [String] = []\n    for word in str.components(separatedBy: \" \") {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter{$0.count > n}",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    let words = str.components(separatedBy: \" \")\n    var long_words = [String]()\n    for word in words {\n        if word.count > n {\n            long_words.append(word)\n        }\n    }\n    return long_words",
    "    let words = str.components(separatedBy: \" \")\n    var long_words = [String]()\n    for word in words {\n        if word.count > n {\n            long_words.append(word)\n        }\n    }\n    return long_words",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var longWords = [String]()\n    for word in words {\n        if word.count > n {\n            longWords.append(word)\n        }\n    }\n    return longWords",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    return words.filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    let words = str.components(separatedBy: \" \")\n    var long_words = [String]()\n    for word in words {\n        if word.count > n {\n            long_words.append(word)\n        }\n    }\n    return long_words",
    "    let words = str.components(separatedBy: \" \")\n    return words.filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter{$0.count > n}",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.characters.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    var result: [String] = []\n    for word in str.components(separatedBy: \" \") {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var longWords = [String]()\n    for word in words {\n        if word.characters.count > n {\n            longWords.append(word)\n        }\n    }\n    return longWords",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result: [String] = []\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var longWords = [String]()\n    for word in words {\n        if word.count > n {\n            longWords.append(word)\n        }\n    }\n    return longWords",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var long_words = [String]()\n    for word in words {\n        if word.count > n {\n            long_words.append(word)\n        }\n    }\n    return long_words",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.characters.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter({ $0.count > n })",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    return words.filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var long_words = [String]()\n    for word in words {\n        if word.characters.count > n {\n            long_words.append(word)\n        }\n    }\n    return long_words",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var longWords = [String]()\n    for word in words {\n        if word.count > n {\n            longWords.append(word)\n        }\n    }\n    return longWords",
    "    var result: [String] = []\n    for word in str.components(separatedBy: \" \") {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.split(separator: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(String(word))\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    var result: [String] = []\n    for word in str.components(separatedBy: \" \") {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    var result: [String] = []\n    for word in str.components(separatedBy: \" \") {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    var result: [String] = []\n    let words = str.components(separatedBy: \" \")\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    var result: [String] = []\n    for word in str.components(separatedBy: \" \") {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter {$0.count > n}",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var longWords = [String]()\n    for word in words {\n        if word.count > n {\n            longWords.append(word)\n        }\n    }\n    return longWords",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result: [String] = []\n    for word in words {\n        if word.characters.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    return words.filter { $0.count > n }",
    "    var result: [String] = []\n    for word in str.components(separatedBy: \" \") {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.characters.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.characters.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var longWords = [String]()\n    for word in words {\n        if word.count > n {\n            longWords.append(word)\n        }\n    }\n    return longWords",
    "    let words = str.components(separatedBy: \" \")\n    var long_words = [String]()\n    for word in words {\n        if word.count > n {\n            long_words.append(word)\n        }\n    }\n    return long_words",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var result: [String] = []\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    return words.filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter({$0.count > n})",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    var result: [String] = []\n    let words = str.components(separatedBy: \" \")\n    for word in words {\n        if word.characters.count > n {\n            result.append(word)\n        }\n    }\n    return result",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    return str.components(separatedBy: \" \").filter { $0.count > n }",
    "    let words = str.components(separatedBy: \" \")\n    var longWords = [String]()\n    for word in words {\n        if word.count > n {\n            longWords.append(word)\n        }\n    }\n    return longWords"
  ]
}