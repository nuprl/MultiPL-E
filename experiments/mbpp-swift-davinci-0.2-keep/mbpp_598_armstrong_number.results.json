{
  "name": "mbpp_598_armstrong_number",
  "language": "swift",
  "prompt": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let lastDigit = temp % 10\n        sum += lastDigit * lastDigit * lastDigit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    var sum = 0\n    for char in number_string {\n        let digit = Int(String(char))!\n        sum += digit * digit * digit\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    let digits = String(number).count\n    while temp > 0 {\n        let digit = temp % 10\n        sum += Int(pow(Double(digit), Double(digits)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "/tmp/tmpx6yrvac5.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    while num > 0 {\n        rem = num % 10\n        sum = sum + rem * rem * rem\n        num = num / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    let sum = digits.map { $0 * $0 * $0 }.reduce(0, +)\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    \n    while number != 0 {\n        remainder = number % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        number /= 10\n        digits += 1\n    }\n    \n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "/tmp/tmphvvd8nt3.swift:11:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp > 0 {\n        remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmp1nfuoxkv.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var temp = 0\n    while number > 0 {\n        temp = number % 10\n        sum += temp * temp * temp\n        number /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "tmp0_o1o6tz/tmp0_o1o6tz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d22a6cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d22763b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9d22763988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9d227627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0_o1o6tz                        0x000055731380123e <unavailable> + 4670\n5    libc.so.6                          0x00002b9d22c58460 __libc_start_main + 245\n6    tmp0_o1o6tz                        0x0000557313800ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    let originalNumber = number\n    while number > 0 {\n        let remainder = number % 10\n        sum += Int(pow(Double(remainder), Double(3)))\n        number /= 10\n    }\n    return sum == originalNumber\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpubsbzut_.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    let digits = String(number).count\n    \n    while temp > 0 {\n        let digit = temp % 10\n        sum += Int(pow(Double(digit), Double(digits)))\n        temp /= 10\n    }\n    \n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpmqelzic6.swift:10:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var number = number\n    while number > 0 {\n        let digit = number % 10\n        sum += digit * digit * digit\n        number /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "tmpmaquw16v/tmpmaquw16v.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b88ca942c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b88ca639b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b88ca639988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b88ca6387b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmaquw16v                        0x00005633d2f7523e <unavailable> + 4670\n5    libc.so.6                          0x00002b88cab2e460 __libc_start_main + 245\n6    tmpmaquw16v                        0x00005633d2f74ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    let digits = String(number).count\n    while temp != 0 {\n        rem = temp % 10\n        sum += Int(pow(Double(rem), Double(digits)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmp78972gv5.swift:10:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(rem), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmp1nfuoxkv.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmp1nfuoxkv.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpojmq5g_b.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    var digits = 0\n    var temp = num\n    while temp != 0 {\n        temp = temp / 10\n        digits += 1\n    }\n    temp = num\n    while temp != 0 {\n        rem = temp % 10\n        sum += Int(pow(Double(rem), Double(digits)))\n        temp = temp / 10\n    }\n    return sum == num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpy5kjqwdq.swift:16:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(rem), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var temp = 0\n    while num > 0 {\n        temp = num % 10\n        sum += temp * temp * temp\n        num /= 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let digits = String(number).map { Int(String($0))! }\n    let sum = digits.reduce(0, { $0 + pow($1, digits.count) })\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpmdtd2w92.swift:5:39: error: cannot find 'pow' in scope\n    let sum = digits.reduce(0, { $0 + pow($1, digits.count) })\n                                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var num = number\n    while num > 0 {\n        let digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpojmq5g_b.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmp1nfuoxkv.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var num = number\n    while num > 0 {\n        let digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    \n    while number != 0 {\n        digits += 1\n        number /= 10\n    }\n    \n    number = number\n    while number != 0 {\n        remainder = number % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        number /= 10\n    }\n    \n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpczo625ok.swift:14:12: error: assigning a variable to itself\n    number = number\n    ~~~~~~ ^ ~~~~~~\n/tmp/tmpczo625ok.swift:17:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var temp = 0\n    while number > 0 {\n        temp = number % 10\n        sum += temp * temp * temp\n        number /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "tmp0_o1o6tz/tmp0_o1o6tz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d22a6cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d22763b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9d22763988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9d227627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0_o1o6tz                        0x000055731380123e <unavailable> + 4670\n5    libc.so.6                          0x00002b9d22c58460 __libc_start_main + 245\n6    tmp0_o1o6tz                        0x0000557313800ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var temp = 0\n    while number > 0 {\n        temp = number % 10\n        sum += temp * temp * temp\n        number /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "tmp0_o1o6tz/tmp0_o1o6tz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d22a6cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d22763b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9d22763988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9d227627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0_o1o6tz                        0x000055731380123e <unavailable> + 4670\n5    libc.so.6                          0x00002b9d22c58460 __libc_start_main + 245\n6    tmp0_o1o6tz                        0x0000557313800ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var count = 0\n    while temp > 0 {\n        temp /= 10\n        count += 1\n    }\n    temp = number\n    while temp > 0 {\n        sum += Int(pow(Double(temp % 10), Double(count)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmph5rumv77.swift:13:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(count)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmp1nfuoxkv.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    while num > 0 {\n        let digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var num = number\n    while num > 0 {\n        let digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    var sum = 0\n    for char in number_string {\n        let digit = Int(String(char))!\n        sum += Int(pow(Double(digit), Double(number_string.count)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpwpmd5ra_.swift:8:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(number_string.count)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var rem = 0\n    while temp != 0 {\n        rem = temp % 10\n        sum += rem * rem * rem\n        temp /= 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    while num > 0 {\n        rem = num % 10\n        sum = sum + (rem * rem * rem)\n        num = num / 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let lastDigit = temp % 10\n        sum += lastDigit * lastDigit * lastDigit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var r = 0\n    while temp != 0 {\n        r = temp % 10\n        sum = sum + r * r * r\n        temp = temp / 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    while num != 0 {\n        rem = num % 10\n        sum += rem * rem * rem\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), 3))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpse14pygo.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), 3))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    var digits = 0\n    \n    while num != 0 {\n        digits += 1\n        num /= 10\n    }\n    \n    num = number\n    \n    while num != 0 {\n        rem = num % 10\n        sum += Int(pow(Double(rem), Double(digits)))\n        num /= 10\n    }\n    \n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmp2nxeug6_.swift:18:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(rem), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    while num > 0 {\n        let digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmp76gyttyi.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmp76gyttyi.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpojmq5g_b.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_string.count)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpkowb7i87.swift:8:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_string.count)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var result = 0\n    var temp = number\n    while temp > 0 {\n        result += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return result == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpknm7danl.swift:7:23: error: cannot find 'pow' in scope\n        result += Int(pow(Double(temp % 10), Double(3)))\n                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var r = 0\n    while temp > 0 {\n        r = temp % 10\n        sum = sum + r * r * r\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var tempNumber = number\n    var total = 0\n    var remainder = 0\n    var digits = 0\n    \n    while tempNumber != 0 {\n        digits += 1\n        tempNumber /= 10\n    }\n    \n    tempNumber = number\n    \n    while tempNumber != 0 {\n        remainder = tempNumber % 10\n        total += Int(pow(Double(remainder), Double(digits)))\n        tempNumber /= 10\n    }\n    \n    if number == total {\n        return true\n    }\n    \n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpl4wq_9s8.swift:18:22: error: cannot find 'pow' in scope\n        total += Int(pow(Double(remainder), Double(digits)))\n                     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmp1nfuoxkv.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    \n    while temp != 0 {\n        digits += 1\n        temp /= 10\n    }\n    \n    temp = number\n    \n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        temp /= 10\n    }\n    \n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpo45sadi6.swift:18:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    let digits = String(number).count\n    while temp > 0 {\n        let digit = temp % 10\n        sum += Int(pow(Double(digit), Double(digits)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "/tmp/tmpx6yrvac5.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var remainder = 0\n    let originalNumber = number\n    while number != 0 {\n        remainder = number % 10\n        sum += remainder * remainder * remainder\n        number /= 10\n    }\n    if originalNumber == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    \n    while temp != 0 {\n        digits += 1\n        temp /= 10\n    }\n    \n    temp = number\n    \n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        temp /= 10\n    }\n    \n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpo45sadi6.swift:18:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var num = number\n    var digits = 0\n    while num > 0 {\n        digits += 1\n        num /= 10\n    }\n    num = number\n    while num > 0 {\n        let digit = num % 10\n        sum += Int(pow(Double(digit), Double(digits)))\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpplsl12r8.swift:14:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        sum += Int(pow(Double(String(char))!, Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmpuoc6t7j8.swift:8:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(String(char))!, Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let numberString = String(number)\n    let numberOfDigits = numberString.count\n    var sum = 0\n    for digit in numberString {\n        sum += Int(pow(Double(String(digit))!, Double(numberOfDigits)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmp6gs1go2i.swift:8:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(String(digit))!, Double(numberOfDigits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var r = 0\n    while temp != 0 {\n        r = temp % 10\n        sum = sum + r * r * r\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp > 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    let length = String(number).count\n    while number > 0 {\n        let digit = number % 10\n        sum += Int(pow(Double(digit), Double(length)))\n        number /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpq50202y3.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var digit = 0\n    while number > 0 {\n        digit = number % 10\n        sum = sum + digit * digit * digit\n        number = number / 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "tmpw6kh0sh3/tmpw6kh0sh3.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2f38dc3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2f38abab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2f38aba988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2f38ab97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw6kh0sh3                        0x000056308b74123e <unavailable> + 4670\n5    libc.so.6                          0x00002b2f38faf460 __libc_start_main + 245\n6    tmpw6kh0sh3                        0x000056308b740ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmp1nfuoxkv.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var n = number\n    while n > 0 {\n        sum += Int(pow(Double(n % 10), 3))\n        n /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmp4094o97o.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(n % 10), 3))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let digits = String(number).map { Int(String($0))! }\n    let sum = digits.reduce(0) { $0 + Int(pow(Double($1), Double(digits.count))) }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmp415j_sxm.swift:5:43: error: cannot find 'pow' in scope\n    let sum = digits.reduce(0) { $0 + Int(pow(Double($1), Double(digits.count))) }\n                                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    while num > 0 {\n        rem = num % 10\n        sum = sum + (rem * rem * rem)\n        num = num / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var temp = 0\n    while num > 0 {\n        temp = num % 10\n        sum += temp * temp * temp\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp != 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp > 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), 3))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpjyqtjj2t.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), 3))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpwys5xbu8.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    var sum = 0\n    for i in number_string {\n        let number = Int(String(i))!\n        sum += Int(pow(Double(number), Double(number_string.count)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpv_gbqmc_.swift:8:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(number), Double(number_string.count)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmp76gyttyi.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var temp = 0\n    while num > 0 {\n        temp = num % 10\n        sum += temp * temp * temp\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpojmq5g_b.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let lastDigit = temp % 10\n        sum += lastDigit * lastDigit * lastDigit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    var count = 0\n    while temp != 0 {\n        temp /= 10\n        count += 1\n    }\n    temp = number\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(count)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpbewtp8wv.swift:15:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(count)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpojmq5g_b.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpwys5xbu8.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let digit = Int(String(char))!\n        sum += Int(pow(Double(digit), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmplgipo19y.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    var digits = 0\n    while temp != 0 {\n        digits += 1\n        temp /= 10\n    }\n    temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += Int(pow(Double(digit), Double(digits)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmp4_4tfz2o.swift:14:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    \n    while number != 0 {\n        digits += 1\n        number /= 10\n    }\n    \n    number = number\n    \n    while number != 0 {\n        remainder = number % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        number /= 10\n    }\n    \n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpqiiyd6p0.swift:14:12: error: assigning a variable to itself\n    number = number\n    ~~~~~~ ^ ~~~~~~\n/tmp/tmpqiiyd6p0.swift:18:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmp1nfuoxkv.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    var temp = 0\n    while num > 0 {\n        rem = num % 10\n        temp = rem * rem * rem\n        sum = sum + temp\n        num = num / 10\n    }\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp > 0 {\n        remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let numberString = String(number)\n    let numberOfDigits = numberString.count\n    var sum = 0\n    for digit in numberString {\n        sum += Int(pow(Double(String(digit))!, Double(numberOfDigits)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmp6gs1go2i.swift:8:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(String(digit))!, Double(numberOfDigits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    while temp != 0 {\n        digits += 1\n        temp /= 10\n    }\n    temp = number\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "/tmp/tmps00ineal.swift:15:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    var digits = 0\n    \n    while temp != 0 {\n        digits += 1\n        temp /= 10\n    }\n    \n    temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += Int(pow(Double(digit), Double(digits)))\n        temp /= 10\n    }\n    \n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpujxab1s6.swift:16:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(3)))\n        temp /= 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpku_cyluo.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    var remainder = 0\n    var digits = 0\n    \n    while temp != 0 {\n        temp /= 10\n        digits += 1\n    }\n    \n    temp = number\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        temp /= 10\n    }\n    \n    if number == sum {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpqns3lihp.swift:17:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var n = number\n    var sum = 0\n    var temp = 0\n    while n > 0 {\n        temp = n % 10\n        sum += temp * temp * temp\n        n /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var temp = 0\n    while num != 0 {\n        temp = num % 10\n        sum += temp * temp * temp\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    while num > 0 {\n        rem = num % 10\n        sum = sum + (rem * rem * rem)\n        num = num / 10\n    }\n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let remainder = temp % 10\n        sum = sum + remainder * remainder * remainder\n        temp = temp / 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        sum += Int(pow(Double(temp % 10), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmpojmq5g_b.swift:7:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(temp % 10), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmphvriz_56.swift:8:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_of_digits = String(number).count\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += Int(pow(Double(digit), Double(number_of_digits)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpke99thew.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit), Double(number_of_digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var rem = 0\n    while num > 0 {\n        rem = num % 10\n        sum += rem * rem * rem\n        num = num / 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let lastDigit = temp % 10\n        sum += Int(pow(Double(lastDigit), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpptnfa4ew.swift:8:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(lastDigit), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var remainder = 0\n    var digits = 0\n    \n    while number != 0 {\n        digits += 1\n        number /= 10\n    }\n    \n    number = number\n    \n    while number != 0 {\n        remainder = number % 10\n        sum += Int(pow(Double(remainder), Double(digits)))\n        number /= 10\n    }\n    \n    if sum == number {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmp0ypmi9ey.swift:14:12: error: assigning a variable to itself\n    number = number\n    ~~~~~~ ^ ~~~~~~\n/tmp/tmp0ypmi9ey.swift:18:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(digits)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp != 0 {\n        remainder = temp % 10\n        sum += Int(pow(Double(remainder), Double(3)))\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "/tmp/tmp76gyttyi.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(remainder), Double(3)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var num = number\n    while num != 0 {\n        let digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var remainder = 0\n    while temp > 0 {\n        remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510426,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for char in number_string {\n        let char_int = Int(String(char))!\n        sum += Int(pow(Double(char_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123114,
      "stdout": "",
      "stderr": "/tmp/tmp1nfuoxkv.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(char_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var digit = 0\n    while temp > 0 {\n        digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var temp = 0\n    while number > 0 {\n        temp = number % 10\n        sum += temp * temp * temp\n        number /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "tmp0_o1o6tz/tmp0_o1o6tz.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d22a6cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d22763b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9d22763988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9d227627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0_o1o6tz                        0x000055731380123e <unavailable> + 4670\n5    libc.so.6                          0x00002b9d22c58460 __libc_start_main + 245\n6    tmp0_o1o6tz                        0x0000557313800ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for digit in number_string {\n        let digit_int = Int(String(digit))!\n        sum += Int(pow(Double(digit_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpl8xxtww_.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for digit in number_string {\n        let digit_int = Int(String(digit))!\n        sum += Int(pow(Double(digit_int), Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpl8xxtww_.swift:9:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(digit_int), Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    var r = 0\n    while temp > 0 {\n        r = temp % 10\n        sum = sum + r * r * r\n        temp = temp / 10\n    }\n    if sum == number {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var number = number\n    var sum = 0\n    var digit = 0\n    while number > 0 {\n        digit = number % 10\n        sum += digit * digit * digit\n        number /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "tmpjbhbg8xu/tmpjbhbg8xu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b503c459c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b503c150b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b503c150988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b503c14f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjbhbg8xu                        0x000055ac1230823e <unavailable> + 4670\n5    libc.so.6                          0x00002b503c645460 __libc_start_main + 245\n6    tmpjbhbg8xu                        0x000055ac12307ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp != 0 {\n        let remainder = temp % 10\n        sum += remainder * remainder * remainder\n        temp /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var num = number\n    var sum = 0\n    var digit = 0\n    while num > 0 {\n        digit = num % 10\n        sum += digit * digit * digit\n        num /= 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1665510425,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    let number_string = String(number)\n    let number_length = number_string.count\n    var sum = 0\n    for i in number_string {\n        sum += Int(pow(Double(String(i))!, Double(number_length)))\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "/tmp/tmpq8aixfnc.swift:8:20: error: cannot find 'pow' in scope\n        sum += Int(pow(Double(String(i))!, Double(number_length)))\n                   ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given number is armstrong or not.\nfunc armstrong_number(number: Int) -> Bool {\n    var temp = number\n    var sum = 0\n    while temp != 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp = temp / 10\n    }\n    return sum == number\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(armstrong_number(number: 153) == true)\nassert(armstrong_number(number: 259) == false)\nassert(armstrong_number(number: 4458) == false)",
      "timestamp": 1666123116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}