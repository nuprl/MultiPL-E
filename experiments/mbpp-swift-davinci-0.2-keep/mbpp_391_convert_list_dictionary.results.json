{
  "name": "mbpp_391_convert_list_dictionary",
  "language": "swift",
  "prompt": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d = [String : [String : Int]]()\n    var dd = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        d = [l1[i] : [l2[i] : l3[i]]]\n        dd.append(d)\n    }\n    return dd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1: [String : [String : Int]] = [:]\n    var d2: [String : [String : Int]] = [:]\n    var d3: [String : [String : Int]] = [:]\n    var d4: [String : [String : Int]] = [:]\n    var d5: [String : [String : Int]] = [:]\n    var d6: [String : [String : Int]] = [:]\n    var d7: [String : [String : Int]] = [:]\n    var d8: [String : [String : Int]] = [:]\n    var d9: [String : [String : Int]] = [:]\n    var d10: [String : [String : Int]] = [:]\n    var d11: [String : [String : Int]] = [:]\n    var d12: [String : [String : Int]] = [:]\n    var d13: [String : [String : Int]] = [:]\n    var d14: [String : [String : Int]] = [:]\n    var d15: [String : [String : Int]] = [:]\n    var d16: [String : [String : Int]] = [:]\n    var d17: [String : [String : Int]] = [:]\n    var d18: [String : [String : Int]] = [:]\n    var d19: [String : [String : Int]] = [:]\n    var d20: [String : [String : Int]] = [:]\n    var d21: [String : [String : Int]] = [:]\n    var d22: [String : [String : Int]] = [:]\n    var d23: [String : [String : Int]] = [:]\n    var d24: [String : [String : Int]] = [:]\n    var d25: [String : [String : Int]] = [:]\n    var d26: [String : [String : Int]] = [:]\n    var d27: [String : [String : Int]] = [:]\n    var d28: [String : [String : Int]] = [:]\n    var d29: [String : [String : Int]] = [:]\n    var d30: [String : [String : Int]] = [:]\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmp729xousl.swift:4:9: warning: variable 'd1' was never used; consider replacing with '_' or removing it\n    var d1: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:5:9: warning: variable 'd2' was never used; consider replacing with '_' or removing it\n    var d2: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:6:9: warning: variable 'd3' was never used; consider replacing with '_' or removing it\n    var d3: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:7:9: warning: variable 'd4' was never used; consider replacing with '_' or removing it\n    var d4: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:8:9: warning: variable 'd5' was never used; consider replacing with '_' or removing it\n    var d5: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:9:9: warning: variable 'd6' was never used; consider replacing with '_' or removing it\n    var d6: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:10:9: warning: variable 'd7' was never used; consider replacing with '_' or removing it\n    var d7: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:11:9: warning: variable 'd8' was never used; consider replacing with '_' or removing it\n    var d8: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:12:9: warning: variable 'd9' was never used; consider replacing with '_' or removing it\n    var d9: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:13:9: warning: variable 'd10' was never used; consider replacing with '_' or removing it\n    var d10: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:14:9: warning: variable 'd11' was never used; consider replacing with '_' or removing it\n    var d11: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:15:9: warning: variable 'd12' was never used; consider replacing with '_' or removing it\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i]: [l2[i]: l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1: [String : [String : Int]] = [:]\n    var d2: [String : [String : Int]] = [:]\n    var d3: [String : [String : Int]] = [:]\n    var d4: [String : [String : Int]] = [:]\n    var d5: [String : [String : Int]] = [:]\n    var d6: [String : [String : Int]] = [:]\n    var d7: [String : [String : Int]] = [:]\n    var d8: [String : [String : Int]] = [:]\n    var d9: [String : [String : Int]] = [:]\n    var d10: [String : [String : Int]] = [:]\n    var d11: [String : [String : Int]] = [:]\n    var d12: [String : [String : Int]] = [:]\n    var d13: [String : [String : Int]] = [:]\n    var d14: [String : [String : Int]] = [:]\n    var d15: [String : [String : Int]] = [:]\n    var d16: [String : [String : Int]] = [:]\n    var d17: [String : [String : Int]] = [:]\n    var d18: [String : [String : Int]] = [:]\n    var d19: [String : [String : Int]] = [:]\n    var d20: [String : [String : Int]] = [:]\n    var d21: [String : [String : Int]] = [:]\n    var d22: [String : [String : Int]] = [:]\n    var d23: [String : [String : Int]] = [:]\n    var d24: [String : [String : Int]] = [:]\n    var d25: [String : [String : Int]] = [:]\n    var d26: [String : [String : Int]] = [:]\n    var d27: [String : [String : Int]] = [:]\n    var d28: [String : [String : Int]] = [:]\n    var d29: [String : [String : Int]] = [:]\n    var d30: [String : [String : Int]] = [:]\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmp729xousl.swift:4:9: warning: variable 'd1' was never used; consider replacing with '_' or removing it\n    var d1: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:5:9: warning: variable 'd2' was never used; consider replacing with '_' or removing it\n    var d2: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:6:9: warning: variable 'd3' was never used; consider replacing with '_' or removing it\n    var d3: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:7:9: warning: variable 'd4' was never used; consider replacing with '_' or removing it\n    var d4: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:8:9: warning: variable 'd5' was never used; consider replacing with '_' or removing it\n    var d5: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:9:9: warning: variable 'd6' was never used; consider replacing with '_' or removing it\n    var d6: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:10:9: warning: variable 'd7' was never used; consider replacing with '_' or removing it\n    var d7: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:11:9: warning: variable 'd8' was never used; consider replacing with '_' or removing it\n    var d8: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:12:9: warning: variable 'd9' was never used; consider replacing with '_' or removing it\n    var d9: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:13:9: warning: variable 'd10' was never used; consider replacing with '_' or removing it\n    var d10: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:14:9: warning: variable 'd11' was never used; consider replacing with '_' or removing it\n    var d11: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:15:9: warning: variable 'd12' was never used; consider replacing with '_' or removing it\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1: [String : [String : Int]] = [:]\n    var d2: [String : [String : Int]] = [:]\n    var d3: [String : [String : Int]] = [:]\n    var d4: [String : [String : Int]] = [:]\n    var d5: [String : [String : Int]] = [:]\n    var d6: [String : [String : Int]] = [:]\n    var d7: [String : [String : Int]] = [:]\n    var d8: [String : [String : Int]] = [:]\n    var d9: [String : [String : Int]] = [:]\n    var d10: [String : [String : Int]] = [:]\n    var d11: [String : [String : Int]] = [:]\n    var d12: [String : [String : Int]] = [:]\n    var d13: [String : [String : Int]] = [:]\n    var d14: [String : [String : Int]] = [:]\n    var d15: [String : [String : Int]] = [:]\n    var d16: [String : [String : Int]] = [:]\n    var d17: [String : [String : Int]] = [:]\n    var d18: [String : [String : Int]] = [:]\n    var d19: [String : [String : Int]] = [:]\n    var d20: [String : [String : Int]] = [:]\n    var d21: [String : [String : Int]] = [:]\n    var d22: [String : [String : Int]] = [:]\n    var d23: [String : [String : Int]] = [:]\n    var d24: [String : [String : Int]] = [:]\n    var d25: [String : [String : Int]] = [:]\n    var d26: [String : [String : Int]] = [:]\n    var d27: [String : [String : Int]] = [:]\n    var d28: [String : [String : Int]] = [:]\n    var d29: [String : [String : Int]] = [:]\n    var d30: [String : [String : Int]] = [:]\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmp729xousl.swift:4:9: warning: variable 'd1' was never used; consider replacing with '_' or removing it\n    var d1: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:5:9: warning: variable 'd2' was never used; consider replacing with '_' or removing it\n    var d2: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:6:9: warning: variable 'd3' was never used; consider replacing with '_' or removing it\n    var d3: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:7:9: warning: variable 'd4' was never used; consider replacing with '_' or removing it\n    var d4: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:8:9: warning: variable 'd5' was never used; consider replacing with '_' or removing it\n    var d5: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:9:9: warning: variable 'd6' was never used; consider replacing with '_' or removing it\n    var d6: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:10:9: warning: variable 'd7' was never used; consider replacing with '_' or removing it\n    var d7: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:11:9: warning: variable 'd8' was never used; consider replacing with '_' or removing it\n    var d8: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:12:9: warning: variable 'd9' was never used; consider replacing with '_' or removing it\n    var d9: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:13:9: warning: variable 'd10' was never used; consider replacing with '_' or removing it\n    var d10: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:14:9: warning: variable 'd11' was never used; consider replacing with '_' or removing it\n    var d11: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:15:9: warning: variable 'd12' was never used; consider replacing with '_' or removing it\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i]: [l2[i]: l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    var dict = [String : [String : Int]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n    }\n    result.append(dict)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpf_fgedf6/tmpf_fgedf6.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afc9c21cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afc9bf13b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afc9bf13988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afc9bf127b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf_fgedf6                        0x000055e2e65fdf58 <unavailable> + 8024\n5    libc.so.6                          0x00002afc9c408460 __libc_start_main + 245\n6    tmpf_fgedf6                        0x000055e2e65fd549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict: [String : [String : Int]] = [:]\n    var dict_list: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        dict_list.append(dict)\n    }\n    return dict_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpm1men859/tmpm1men859.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ba3973c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ba366ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ba366a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ba36697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm1men859                        0x0000558abc893eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b7ba3b5f460 __libc_start_main + 245\n6    tmpm1men859                        0x0000558abc8934a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var temp: [String : [String : Int]] = [:]\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : Int]()\n    var d3 = [[String : [String : Int]]]()\n    \n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n        d1[l1[i]] = d2\n        d3.append(d1)\n    }\n    return d3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpeu0swi4p/tmpeu0swi4p.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79ab560c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79ab257b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b79ab257988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b79ab2567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeu0swi4p                        0x0000564d4315ff58 <unavailable> + 8024\n5    libc.so.6                          0x00002b79ab74c460 __libc_start_main + 245\n6    tmpeu0swi4p                        0x0000564d4315f549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        list.append(dict)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmp0h3l4w_a/tmp0h3l4w_a.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac3a31f8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3a2eefb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3a2eef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3a2eee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0h3l4w_a                        0x0000560e55fb4f58 <unavailable> + 8024\n5    libc.so.6                          0x00002ac3a33e4460 __libc_start_main + 245\n6    tmp0h3l4w_a                        0x0000560e55fb4549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d = [String : [String : Int]]()\n    for i in 0..<l1.count {\n        d[l1[i]] = [l2[i] : l3[i]]\n    }\n    return [d]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpw24zolqw/tmpw24zolqw.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9317b4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9317846b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9317846988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b93178457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw24zolqw                        0x000055a6ce5f3eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b9317d3b460 __libc_start_main + 245\n6    tmpw24zolqw                        0x000055a6ce5f34a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    return [[\"list1\": [\"list2\": l3[0]]], [\"list1\": [\"list2\": l3[1]]], [\"list1\": [\"list2\": l3[2]]]]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpgypgsrs6/tmpgypgsrs6.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5dd5c49c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5dd5940b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5dd5940988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5dd593f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgypgsrs6                        0x0000556f82fe5be8 <unavailable> + 7144\n5    libc.so.6                          0x00002b5dd5e35460 __libc_start_main + 245\n6    tmpgypgsrs6                        0x0000556f82fe51d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    return [[\"l1\" : [\"l2\" : l3[0]]], [\"l1\" : [\"l2\" : l3[1]]], [\"l1\" : [\"l2\" : l3[2]]]]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpbcv93qrw/tmpbcv93qrw.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b00cc48ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b00cc181b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b00cc181988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b00cc1807b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbcv93qrw                        0x00005619c31ecbe8 <unavailable> + 7144\n5    libc.so.6                          0x00002b00cc676460 __libc_start_main + 245\n6    tmpbcv93qrw                        0x00005619c31ec1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for (index, value) in l1.enumerated() {\n        var dict = [String : [String : Int]]()\n        dict[value] = [l2[index] : l3[index]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    return [[\"list1\" : [\"list2\" : l3[0]]], [\"list1\" : [\"list2\" : l3[1]]], [\"list1\" : [\"list2\" : l3[2]]]]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpww4_164m/tmpww4_164m.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b759fa6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b759f765b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b759f765988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b759f7647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpww4_164m                        0x00005601c329ebe8 <unavailable> + 7144\n5    libc.so.6                          0x00002b759fc5a460 __libc_start_main + 245\n6    tmpww4_164m                        0x00005601c329e1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic2 = [String : Int]()\n        dic2[l2[i]] = l3[i]\n        dic.append([l1[i] : dic2])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict1 = [String : [String : Int]]()\n    var dict2 = [String : [String : Int]]()\n    var dict3 = [String : [String : Int]]()\n    var dict4 = [String : [String : Int]]()\n    var dict5 = [String : [String : Int]]()\n    var dict6 = [String : [String : Int]]()\n    var dict7 = [String : [String : Int]]()\n    var dict8 = [String : [String : Int]]()\n    var dict9 = [String : [String : Int]]()\n    var dict10 = [String : [String : Int]]()\n    \n    dict1[l1[0]] = [l2[0] : l3[0]]\n    dict2[l1[0]] = [l2[1] : l3[1]]\n    dict3[l1[0]] = [l2[2] : l3[2]]\n    dict4[l1[0]] = [l2[3] : l3[3]]\n    dict5[l1[0]] = [l2[4] : l3[4]]\n    dict6[l1[1]] = [l2[0] : l3[5]]\n    dict7[l1[1]] = [l2[1] : l3[6]]\n    dict8[l1[1]] = [l2[2] : l3[7]]\n    dict9[l1[1]] = [l2[3] : l3[8]]\n    dict10[l1[1]] = [l2[4] : l3[9]]\n    \n    var result = [dict1, dict2, dict3, dict4, dict5, dict6, dict7, dict8, dict9, dict10]\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b07ec970c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b07ec667561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b07ec667286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b07ec66713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b07ec666bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b07ec467fc3 <unavailable> + 188355\n6    tmpec0dqbes                        0x0000557570483254 <unavailable> + 12884\n7    tmpec0dqbes                        0x00005575704817c5 <unavailable> + 6085\n8    libc.so.6                          0x00002b07ecb5c460 __libc_start_main + 245\n9    tmpec0dqbes                        0x00005575704812c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    var temp = [String : [String : Int]]()\n    for i in 0..<l1.count {\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpb6h6txyg/tmpb6h6txyg.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c282e8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c27fdfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c27fdf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c27fde7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb6h6txyg                        0x0000559610360f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b4c284d4460 __libc_start_main + 245\n6    tmpb6h6txyg                        0x0000559610360549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        list.append(dict)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmp0h3l4w_a/tmp0h3l4w_a.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac3a31f8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3a2eefb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3a2eef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3a2eee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0h3l4w_a                        0x0000560e55fb4f58 <unavailable> + 8024\n5    libc.so.6                          0x00002ac3a33e4460 __libc_start_main + 245\n6    tmp0h3l4w_a                        0x0000560e55fb4549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic = [String : [String : Int]]()\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    var dict: [String : [String : Int]] = [:]\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n    }\n    result.append(dict)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpde37ps6g/tmpde37ps6g.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a87158c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a86e4fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a86e4f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a86e4e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpde37ps6g                        0x0000563aefac3eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b0a87344460 __libc_start_main + 245\n6    tmpde37ps6g                        0x0000563aefac34a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    \n    d1[\"first\"] = [l1[0] : l3[0]]\n    d1[\"second\"] = [l1[1] : l3[1]]\n    d1[\"third\"] = [l1[2] : l3[2]]\n    \n    d2[\"first\"] = [l2[0] : l3[0]]\n    d2[\"second\"] = [l2[1] : l3[1]]\n    d2[\"third\"] = [l2[2] : l3[2]]\n    \n    d3[\"first\"] = [l1[0] : l3[0]]\n    d3[\"second\"] = [l2[1] : l3[1]]\n    d3[\"third\"] = [l1[2] : l3[2]]\n    \n    return [d1, d2, d3]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmphfdnkzh1/tmphfdnkzh1.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4afe35bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4afe052b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4afe052988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4afe0517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphfdnkzh1                        0x000056034ff2acd8 <unavailable> + 7384\n5    libc.so.6                          0x00002b4afe547460 __libc_start_main + 245\n6    tmphfdnkzh1                        0x000056034ff2a2c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : Int]()\n    var d3 = [[String : [String : Int]]]()\n    \n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n        d1[l1[i]] = d2\n        d3.append(d1)\n    }\n    return d3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpeu0swi4p/tmpeu0swi4p.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79ab560c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79ab257b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b79ab257988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b79ab2567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeu0swi4p                        0x0000564d4315ff58 <unavailable> + 8024\n5    libc.so.6                          0x00002b79ab74c460 __libc_start_main + 245\n6    tmpeu0swi4p                        0x0000564d4315f549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    for (index, value) in l1.enumerated() {\n        dict[value] = [l2[index] : l3[index]]\n    }\n    return [dict]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmp54w9zuze/tmp54w9zuze.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af98881cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af988513b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af988513988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9885127b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp54w9zuze                        0x000055db2d34bee8 <unavailable> + 7912\n5    libc.so.6                          0x00002af988a08460 __libc_start_main + 245\n6    tmp54w9zuze                        0x000055db2d34b4d9 <unavailable> + 5337\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d = [String : [String : Int]]()\n    var d2 = [String : Int]()\n    var d3 = [[String : [String : Int]]]()\n    \n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n        d[l1[i]] = d2\n        d3.append(d)\n    }\n    return d3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpjjs8jv3v/tmpjjs8jv3v.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5a7604cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5a75d43b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5a75d43988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5a75d427b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjjs8jv3v                        0x000055e216b49f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b5a76238460 __libc_start_main + 245\n6    tmpjjs8jv3v                        0x000055e216b49549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : Int]()\n    var d3 = [[String : [String : Int]]]()\n    \n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n        d1[l1[i]] = d2\n        d3.append(d1)\n    }\n    return d3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpeu0swi4p/tmpeu0swi4p.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79ab560c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79ab257b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b79ab257988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b79ab2567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeu0swi4p                        0x0000564d4315ff58 <unavailable> + 8024\n5    libc.so.6                          0x00002b79ab74c460 __libc_start_main + 245\n6    tmpeu0swi4p                        0x0000564d4315f549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    var dict = [String : [String : Int]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n    }\n    result.append(dict)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpf_fgedf6/tmpf_fgedf6.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afc9c21cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afc9bf13b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afc9bf13988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afc9bf127b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf_fgedf6                        0x000055e2e65fdf58 <unavailable> + 8024\n5    libc.so.6                          0x00002afc9c408460 __libc_start_main + 245\n6    tmpf_fgedf6                        0x000055e2e65fd549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpxj7yyz3l/tmpxj7yyz3l.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c82a75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c8276cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c8276c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c8276b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxj7yyz3l                        0x00005623955d1f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b1c82c61460 __libc_start_main + 245\n6    tmpxj7yyz3l                        0x00005623955d1549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : Int]()\n    var d3 = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n        d1[l1[i]] = d2\n        d3.append(d1)\n    }\n    return d3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpo09_zfsn/tmpo09_zfsn.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acce5283c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acce4f7ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acce4f7a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acce4f797b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo09_zfsn                        0x0000560926eaff58 <unavailable> + 8024\n5    libc.so.6                          0x00002acce546f460 __libc_start_main + 245\n6    tmpo09_zfsn                        0x0000560926eaf549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    return [[\"list1\" : [\"list2\" : l3[0]]], [\"list1\" : [\"list2\" : l3[1]]], [\"list1\" : [\"list2\" : l3[2]]]]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpww4_164m/tmpww4_164m.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b759fa6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b759f765b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b759f765988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b759f7647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpww4_164m                        0x00005601c329ebe8 <unavailable> + 7144\n5    libc.so.6                          0x00002b759fc5a460 __libc_start_main + 245\n6    tmpww4_164m                        0x00005601c329e1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    result.append([\"first\" : [\"second\" : l3[0]]])\n    result.append([\"first\" : [\"second\" : l3[1]]])\n    result.append([\"first\" : [\"second\" : l3[2]]])\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmp1wxf32w8/tmp1wxf32w8.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0496c50c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0496947b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0496947988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b04969467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1wxf32w8                        0x000055a7cc56ec88 <unavailable> + 7304\n5    libc.so.6                          0x00002b0496e3c460 __libc_start_main + 245\n6    tmp1wxf32w8                        0x000055a7cc56e279 <unavailable> + 4729\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        list.append(dict)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmp0h3l4w_a/tmp0h3l4w_a.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac3a31f8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3a2eefb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3a2eef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3a2eee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0h3l4w_a                        0x0000560e55fb4f58 <unavailable> + 8024\n5    libc.so.6                          0x00002ac3a33e4460 __libc_start_main + 245\n6    tmp0h3l4w_a                        0x0000560e55fb4549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        list.append(dict)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmp0h3l4w_a/tmp0h3l4w_a.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac3a31f8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3a2eefb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3a2eef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3a2eee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0h3l4w_a                        0x0000560e55fb4f58 <unavailable> + 8024\n5    libc.so.6                          0x00002ac3a33e4460 __libc_start_main + 245\n6    tmp0h3l4w_a                        0x0000560e55fb4549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : Int]()\n    var d3 = [[String : [String : Int]]]()\n    \n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n        d1[l1[i]] = d2\n        d3.append(d1)\n    }\n    return d3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpeu0swi4p/tmpeu0swi4p.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79ab560c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79ab257b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b79ab257988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b79ab2567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeu0swi4p                        0x0000564d4315ff58 <unavailable> + 8024\n5    libc.so.6                          0x00002b79ab74c460 __libc_start_main + 245\n6    tmpeu0swi4p                        0x0000564d4315f549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpxj7yyz3l/tmpxj7yyz3l.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c82a75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c8276cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c8276c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c8276b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxj7yyz3l                        0x00005623955d1f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b1c82c61460 __libc_start_main + 245\n6    tmpxj7yyz3l                        0x00005623955d1549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for (index, item) in l1.enumerated() {\n        result.append([item : [l2[index] : l3[index]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : Int]()\n    var d3 = [[String : [String : Int]]]()\n    \n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n        d1[l1[i]] = d2\n        d3.append(d1)\n    }\n    return d3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpeu0swi4p/tmpeu0swi4p.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79ab560c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79ab257b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b79ab257988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b79ab2567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeu0swi4p                        0x0000564d4315ff58 <unavailable> + 8024\n5    libc.so.6                          0x00002b79ab74c460 __libc_start_main + 245\n6    tmpeu0swi4p                        0x0000564d4315f549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : Int]()\n    var d3 = [[String : [String : Int]]]()\n    \n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n        d1[l1[i]] = d2\n        d3.append(d1)\n    }\n    return d3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpeu0swi4p/tmpeu0swi4p.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79ab560c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79ab257b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b79ab257988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b79ab2567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeu0swi4p                        0x0000564d4315ff58 <unavailable> + 8024\n5    libc.so.6                          0x00002b79ab74c460 __libc_start_main + 245\n6    tmpeu0swi4p                        0x0000564d4315f549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : Int]()\n    var d3 = [[String : [String : Int]]]()\n    \n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n        d1[l1[i]] = d2\n        d3.append(d1)\n    }\n    return d3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpeu0swi4p/tmpeu0swi4p.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79ab560c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79ab257b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b79ab257988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b79ab2567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeu0swi4p                        0x0000564d4315ff58 <unavailable> + 8024\n5    libc.so.6                          0x00002b79ab74c460 __libc_start_main + 245\n6    tmpeu0swi4p                        0x0000564d4315f549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d = [String : [String : Int]]()\n    var d1 = [String : Int]()\n    var d2 = [String : Int]()\n    var d3 = [String : Int]()\n    var d4 = [String : Int]()\n    var d5 = [String : Int]()\n    var d6 = [String : Int]()\n    var d7 = [String : Int]()\n    var d8 = [String : Int]()\n    var d9 = [String : Int]()\n    var d10 = [String : Int]()\n    var d11 = [String : Int]()\n    var d12 = [String : Int]()\n    var d13 = [String : Int]()\n    var d14 = [String : Int]()\n    var d15 = [String : Int]()\n    var d16 = [String : Int]()\n    var d17 = [String : Int]()\n    var d18 = [String : Int]()\n    var d19 = [String : Int]()\n    var d20 = [String : Int]()\n    var d21 = [String : Int]()\n    var d22 = [String : Int]()\n    var d23 = [String : Int]()\n    var d24 = [String : Int]()\n    var d25 = [String : Int]()\n    var d26 = [String : Int]()\n    var d27 = [String : Int]()\n    var d28 = [String : Int]()\n    var d29 = [String : Int]()\n    var d30 = [String : Int]()\n    var d31 = [String : Int]()\n    var d32 = [String : Int]()\n    var d33 = [String : Int]()\n    var d34 = [String : Int]()\n    var d35 = [String : Int]()\n    var d36 = [String : Int]()\n    var d37 = [String : Int]()\n    var d38 = [String : Int]()\n    var d39 = [String : Int]()\n    var d40 = [String : Int]()\n    var d41 = [String : Int]()\n    var d42 =\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "/tmp/tmp2fmlkacs.swift:46:14: error: expected initial value after '='\n    var d42 =\n             ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    \n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    \n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmp548xdcms/tmp548xdcms.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17fd789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17fd480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17fd480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17fd47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp548xdcms                        0x000055bf2e88bf58 <unavailable> + 8024\n5    libc.so.6                          0x00002b17fd975460 __libc_start_main + 245\n6    tmp548xdcms                        0x000055bf2e88b549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d = [String : [String : Int]]()\n    var l = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        d[l1[i]] = [l2[i] : l3[i]]\n        l.append(d)\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpqm268a_o/tmpqm268a_o.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48d3772c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48d3469b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b48d3469988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48d34687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqm268a_o                        0x000055b0a4db8f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b48d395e460 __libc_start_main + 245\n6    tmpqm268a_o                        0x000055b0a4db8549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d = [String : [String : Int]]()\n    var l = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        d[l1[i]] = [l2[i] : l3[i]]\n        l.append(d)\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpqm268a_o/tmpqm268a_o.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48d3772c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48d3469b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b48d3469988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48d34687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqm268a_o                        0x000055b0a4db8f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b48d395e460 __libc_start_main + 245\n6    tmpqm268a_o                        0x000055b0a4db8549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic: [String : [String : Int]] = [:]\n    var dic_list: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpfpw8bsnp/tmpfpw8bsnp.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba903a47c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba90373eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba90373e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba90373d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfpw8bsnp                        0x000055eb21d40eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002ba903c33460 __libc_start_main + 245\n6    tmpfpw8bsnp                        0x000055eb21d404a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1: [String : [String : Int]] = [:]\n    var d2: [String : [String : Int]] = [:]\n    var d3: [String : [String : Int]] = [:]\n    var d4: [String : [String : Int]] = [:]\n    var d5: [String : [String : Int]] = [:]\n    var d6: [String : [String : Int]] = [:]\n    var d7: [String : [String : Int]] = [:]\n    var d8: [String : [String : Int]] = [:]\n    var d9: [String : [String : Int]] = [:]\n    var d10: [String : [String : Int]] = [:]\n    var d11: [String : [String : Int]] = [:]\n    var d12: [String : [String : Int]] = [:]\n    var d13: [String : [String : Int]] = [:]\n    var d14: [String : [String : Int]] = [:]\n    var d15: [String : [String : Int]] = [:]\n    var d16: [String : [String : Int]] = [:]\n    var d17: [String : [String : Int]] = [:]\n    var d18: [String : [String : Int]] = [:]\n    var d19: [String : [String : Int]] = [:]\n    var d20: [String : [String : Int]] = [:]\n    var d21: [String : [String : Int]] = [:]\n    var d22: [String : [String : Int]] = [:]\n    var d23: [String : [String : Int]] = [:]\n    var d24: [String : [String : Int]] = [:]\n    var d25: [String : [String : Int]] = [:]\n    var d26: [String : [String : Int]] = [:]\n    var d27: [String : [String : Int]] = [:]\n    var d28: [String : [String : Int]] = [:]\n    var d29: [String : [String : Int]] = [:]\n    var d30: [String : [String : Int]] = [:]\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmp729xousl.swift:4:9: warning: variable 'd1' was never used; consider replacing with '_' or removing it\n    var d1: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:5:9: warning: variable 'd2' was never used; consider replacing with '_' or removing it\n    var d2: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:6:9: warning: variable 'd3' was never used; consider replacing with '_' or removing it\n    var d3: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:7:9: warning: variable 'd4' was never used; consider replacing with '_' or removing it\n    var d4: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:8:9: warning: variable 'd5' was never used; consider replacing with '_' or removing it\n    var d5: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:9:9: warning: variable 'd6' was never used; consider replacing with '_' or removing it\n    var d6: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:10:9: warning: variable 'd7' was never used; consider replacing with '_' or removing it\n    var d7: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:11:9: warning: variable 'd8' was never used; consider replacing with '_' or removing it\n    var d8: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:12:9: warning: variable 'd9' was never used; consider replacing with '_' or removing it\n    var d9: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:13:9: warning: variable 'd10' was never used; consider replacing with '_' or removing it\n    var d10: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:14:9: warning: variable 'd11' was never used; consider replacing with '_' or removing it\n    var d11: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:15:9: warning: variable 'd12' was never used; consider replacing with '_' or removing it\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d = [String : [String : Int]]()\n    var d1 = [String : Int]()\n    var d2 = [String : Int]()\n    var d3 = [String : Int]()\n    for i in 0..<l1.count {\n        d1[l1[i]] = l3[i]\n    }\n    for i in 0..<l2.count {\n        d2[l2[i]] = l3[i]\n    }\n    for i in 0..<l3.count {\n        d3[String(l3[i])] = l3[i]\n    }\n    d[\"d1\"] = d1\n    d[\"d2\"] = d2\n    d[\"d3\"] = d3\n    return [d]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpdp077v1i/tmpdp077v1i.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a1f554c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a1f24bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a1f24b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a1f24a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdp077v1i                        0x000055faab579fd8 <unavailable> + 8152\n5    libc.so.6                          0x00002b2a1f740460 __libc_start_main + 245\n6    tmpdp077v1i                        0x000055faab5795c9 <unavailable> + 5577\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d = [String : [String : Int]]()\n    for i in 0..<l1.count {\n        d[l1[i]] = [l2[i] : l3[i]]\n    }\n    return [d]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpw24zolqw/tmpw24zolqw.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9317b4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9317846b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9317846988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b93178457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw24zolqw                        0x000055a6ce5f3eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b9317d3b460 __libc_start_main + 245\n6    tmpw24zolqw                        0x000055a6ce5f34a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d = [String : [String : Int]]()\n    var l = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        d[l1[i]] = [l2[i] : l3[i]]\n        l.append(d)\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpqm268a_o/tmpqm268a_o.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48d3772c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48d3469b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b48d3469988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48d34687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqm268a_o                        0x000055b0a4db8f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b48d395e460 __libc_start_main + 245\n6    tmpqm268a_o                        0x000055b0a4db8549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var temp = [String : [String : Int]]()\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for (index, value) in l1.enumerated() {\n        var dict: [String : [String : Int]] = [:]\n        dict[value] = [l2[index] : l3[index]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    var dict = [String : Int]()\n    var dict2 = [String : [String : Int]]()\n    for i in 0..<l1.count {\n        dict[l2[i]] = l3[i]\n        dict2[l1[i]] = dict\n    }\n    result.append(dict2)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpzowqv2y4/tmpzowqv2y4.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f5997bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f59672b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f59672988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f596717b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzowqv2y4                        0x000055682a103f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b7f59b67460 __libc_start_main + 245\n6    tmpzowqv2y4                        0x000055682a103549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var innerDict = [String : Int]()\n        innerDict[l2[i]] = l3[i]\n        var outerDict = [String : [String : Int]]()\n        outerDict[l1[i]] = innerDict\n        result.append(outerDict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var dict_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        dict_list.append(dict)\n    }\n    return dict_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmptbyo4o_c/tmptbyo4o_c.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ce7cd2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ce79c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ce79c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ce79c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptbyo4o_c                        0x0000564a2648cf58 <unavailable> + 8024\n5    libc.so.6                          0x00002b8ce7ebe460 __libc_start_main + 245\n6    tmptbyo4o_c                        0x0000564a2648c549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    var dict: [String : [String : Int]] = [:]\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n    }\n    result.append(dict)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpde37ps6g/tmpde37ps6g.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a87158c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a86e4fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a86e4f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a86e4e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpde37ps6g                        0x0000563aefac3eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b0a87344460 __libc_start_main + 245\n6    tmpde37ps6g                        0x0000563aefac34a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d = [String : [String : Int]]()\n    var l = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        d[l1[i]] = [l2[i] : l3[i]]\n        l.append(d)\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpqm268a_o/tmpqm268a_o.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48d3772c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48d3469b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b48d3469988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48d34687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqm268a_o                        0x000055b0a4db8f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b48d395e460 __libc_start_main + 245\n6    tmpqm268a_o                        0x000055b0a4db8549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var d = [String : [String : Int]]()\n        d[l1[i]] = [l2[i] : l3[i]]\n        result.append(d)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var dict_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        dict_list.append(dict)\n    }\n    return dict_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmptbyo4o_c/tmptbyo4o_c.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ce7cd2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ce79c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ce79c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ce79c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptbyo4o_c                        0x0000564a2648cf58 <unavailable> + 8024\n5    libc.so.6                          0x00002b8ce7ebe460 __libc_start_main + 245\n6    tmptbyo4o_c                        0x0000564a2648c549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : Int]()\n    var d3 = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n        d1[l1[i]] = d2\n        d3.append(d1)\n    }\n    return d3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpo09_zfsn/tmpo09_zfsn.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acce5283c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acce4f7ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acce4f7a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acce4f797b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo09_zfsn                        0x0000560926eaff58 <unavailable> + 8024\n5    libc.so.6                          0x00002acce546f460 __libc_start_main + 245\n6    tmpo09_zfsn                        0x0000560926eaf549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict: [String : [String : Int]] = [:]\n    var dict_list: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        dict_list.append(dict)\n    }\n    return dict_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpm1men859/tmpm1men859.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ba3973c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ba366ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ba366a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ba36697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm1men859                        0x0000558abc893eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b7ba3b5f460 __libc_start_main + 245\n6    tmpm1men859                        0x0000558abc8934a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1: [String : [String : Int]] = [:]\n    var d2: [String : [String : Int]] = [:]\n    var d3: [String : [String : Int]] = [:]\n    var d4: [String : [String : Int]] = [:]\n    var d5: [String : [String : Int]] = [:]\n    var d6: [String : [String : Int]] = [:]\n    var d7: [String : [String : Int]] = [:]\n    var d8: [String : [String : Int]] = [:]\n    var d9: [String : [String : Int]] = [:]\n    var d10: [String : [String : Int]] = [:]\n    var d11: [String : [String : Int]] = [:]\n    var d12: [String : [String : Int]] = [:]\n    var d13: [String : [String : Int]] = [:]\n    var d14: [String : [String : Int]] = [:]\n    var d15: [String : [String : Int]] = [:]\n    var d16: [String : [String : Int]] = [:]\n    var d17: [String : [String : Int]] = [:]\n    var d18: [String : [String : Int]] = [:]\n    var d19: [String : [String : Int]] = [:]\n    var d20: [String : [String : Int]] = [:]\n    var d21: [String : [String : Int]] = [:]\n    var d22: [String : [String : Int]] = [:]\n    var d23: [String : [String : Int]] = [:]\n    var d24: [String : [String : Int]] = [:]\n    var d25: [String : [String : Int]] = [:]\n    var d26: [String : [String : Int]] = [:]\n    var d27: [String : [String : Int]] = [:]\n    var d28: [String : [String : Int]] = [:]\n    var d29: [String : [String : Int]] = [:]\n    var d30: [String : [String : Int]] = [:]\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmp729xousl.swift:4:9: warning: variable 'd1' was never used; consider replacing with '_' or removing it\n    var d1: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:5:9: warning: variable 'd2' was never used; consider replacing with '_' or removing it\n    var d2: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:6:9: warning: variable 'd3' was never used; consider replacing with '_' or removing it\n    var d3: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:7:9: warning: variable 'd4' was never used; consider replacing with '_' or removing it\n    var d4: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:8:9: warning: variable 'd5' was never used; consider replacing with '_' or removing it\n    var d5: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:9:9: warning: variable 'd6' was never used; consider replacing with '_' or removing it\n    var d6: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:10:9: warning: variable 'd7' was never used; consider replacing with '_' or removing it\n    var d7: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:11:9: warning: variable 'd8' was never used; consider replacing with '_' or removing it\n    var d8: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:12:9: warning: variable 'd9' was never used; consider replacing with '_' or removing it\n    var d9: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:13:9: warning: variable 'd10' was never used; consider replacing with '_' or removing it\n    var d10: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:14:9: warning: variable 'd11' was never used; consider replacing with '_' or removing it\n    var d11: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:15:9: warning: variable 'd12' was never used; consider replacing with '_' or removing it\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    var dict = [String : Int]()\n    var dict2 = [String : [String : Int]]()\n    for i in 0..<l1.count {\n        dict[l2[i]] = l3[i]\n        dict2[l1[i]] = dict\n        result.append(dict2)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmp8c0s6045/tmp8c0s6045.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7acbb9dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7acb894b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7acb894988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7acb8937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8c0s6045                        0x00005622fe8c6f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b7acbd89460 __libc_start_main + 245\n6    tmp8c0s6045                        0x00005622fe8c6549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for (index, value) in l1.enumerated() {\n        var dic1 = [String : Int]()\n        dic1[l2[index]] = l3[index]\n        dic.append([value : dic1])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var dict_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        dict_list.append(dict)\n    }\n    return dict_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmptbyo4o_c/tmptbyo4o_c.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ce7cd2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ce79c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ce79c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ce79c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptbyo4o_c                        0x0000564a2648cf58 <unavailable> + 8024\n5    libc.so.6                          0x00002b8ce7ebe460 __libc_start_main + 245\n6    tmptbyo4o_c                        0x0000564a2648c549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : Int]()\n    var d3 = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n        d1[l1[i]] = d2\n        d3.append(d1)\n    }\n    return d3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpo09_zfsn/tmpo09_zfsn.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acce5283c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acce4f7ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acce4f7a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acce4f797b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo09_zfsn                        0x0000560926eaff58 <unavailable> + 8024\n5    libc.so.6                          0x00002acce546f460 __libc_start_main + 245\n6    tmpo09_zfsn                        0x0000560926eaf549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var temp: [String : [String : Int]] = [:]\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for (index, element) in l1.enumerated() {\n        var temp = [String : [String : Int]]()\n        temp[element] = [l2[index] : l3[index]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for (index, value) in l1.enumerated() {\n        result.append([value : [l2[index] : l3[index]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1: [String : [String : Int]] = [:]\n    var d2: [String : [String : Int]] = [:]\n    var d3: [String : [String : Int]] = [:]\n    var d4: [String : [String : Int]] = [:]\n    var d5: [String : [String : Int]] = [:]\n    var d6: [String : [String : Int]] = [:]\n    var d7: [String : [String : Int]] = [:]\n    var d8: [String : [String : Int]] = [:]\n    var d9: [String : [String : Int]] = [:]\n    var d10: [String : [String : Int]] = [:]\n    var d11: [String : [String : Int]] = [:]\n    var d12: [String : [String : Int]] = [:]\n    var d13: [String : [String : Int]] = [:]\n    var d14: [String : [String : Int]] = [:]\n    var d15: [String : [String : Int]] = [:]\n    var d16: [String : [String : Int]] = [:]\n    var d17: [String : [String : Int]] = [:]\n    var d18: [String : [String : Int]] = [:]\n    var d19: [String : [String : Int]] = [:]\n    var d20: [String : [String : Int]] = [:]\n    var d21: [String : [String : Int]] = [:]\n    var d22: [String : [String : Int]] = [:]\n    var d23: [String : [String : Int]] = [:]\n    var d24: [String : [String : Int]] = [:]\n    var d25: [String : [String : Int]] = [:]\n    var d26: [String : [String : Int]] = [:]\n    var d27: [String : [String : Int]] = [:]\n    var d28: [String : [String : Int]] = [:]\n    var d29: [String : [String : Int]] = [:]\n    var d30: [String : [String : Int]] = [:]\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmp729xousl.swift:4:9: warning: variable 'd1' was never used; consider replacing with '_' or removing it\n    var d1: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:5:9: warning: variable 'd2' was never used; consider replacing with '_' or removing it\n    var d2: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:6:9: warning: variable 'd3' was never used; consider replacing with '_' or removing it\n    var d3: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:7:9: warning: variable 'd4' was never used; consider replacing with '_' or removing it\n    var d4: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:8:9: warning: variable 'd5' was never used; consider replacing with '_' or removing it\n    var d5: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:9:9: warning: variable 'd6' was never used; consider replacing with '_' or removing it\n    var d6: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:10:9: warning: variable 'd7' was never used; consider replacing with '_' or removing it\n    var d7: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:11:9: warning: variable 'd8' was never used; consider replacing with '_' or removing it\n    var d8: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:12:9: warning: variable 'd9' was never used; consider replacing with '_' or removing it\n    var d9: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:13:9: warning: variable 'd10' was never used; consider replacing with '_' or removing it\n    var d10: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:14:9: warning: variable 'd11' was never used; consider replacing with '_' or removing it\n    var d11: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:15:9: warning: variable 'd12' was never used; consider replacing with '_' or removing it\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic2 = [String : Int]()\n    var dic3 = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic2[l2[i]] = l3[i]\n        dic[l1[i]] = dic2\n        dic3.append(dic)\n    }\n    return dic3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpib29g2eg/tmpib29g2eg.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3ea7321c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3ea7018b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3ea7018988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3ea70177b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpib29g2eg                        0x0000556af0a83f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b3ea750d460 __libc_start_main + 245\n6    tmpib29g2eg                        0x0000556af0a83549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var dic: [String : [String : Int]] = [:]\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict: [String : [String : Int]] = [:]\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpo2xza0dh/tmpo2xza0dh.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b43b1a61c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b43b1758b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b43b1758988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b43b17577b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo2xza0dh                        0x0000555c1dec9eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b43b1c4d460 __libc_start_main + 245\n6    tmpo2xza0dh                        0x0000555c1dec94a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1: [String : [String : Int]] = [:]\n    var d2: [String : [String : Int]] = [:]\n    var d3: [String : [String : Int]] = [:]\n    var d4: [String : [String : Int]] = [:]\n    var d5: [String : [String : Int]] = [:]\n    var d6: [String : [String : Int]] = [:]\n    var d7: [String : [String : Int]] = [:]\n    var d8: [String : [String : Int]] = [:]\n    var d9: [String : [String : Int]] = [:]\n    var d10: [String : [String : Int]] = [:]\n    var d11: [String : [String : Int]] = [:]\n    var d12: [String : [String : Int]] = [:]\n    var d13: [String : [String : Int]] = [:]\n    var d14: [String : [String : Int]] = [:]\n    var d15: [String : [String : Int]] = [:]\n    var d16: [String : [String : Int]] = [:]\n    var d17: [String : [String : Int]] = [:]\n    var d18: [String : [String : Int]] = [:]\n    var d19: [String : [String : Int]] = [:]\n    var d20: [String : [String : Int]] = [:]\n    var d21: [String : [String : Int]] = [:]\n    var d22: [String : [String : Int]] = [:]\n    var d23: [String : [String : Int]] = [:]\n    var d24: [String : [String : Int]] = [:]\n    var d25: [String : [String : Int]] = [:]\n    var d26: [String : [String : Int]] = [:]\n    var d27: [String : [String : Int]] = [:]\n    var d28: [String : [String : Int]] = [:]\n    var d29: [String : [String : Int]] = [:]\n    var d30: [String : [String : Int]] = [:]\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmp729xousl.swift:4:9: warning: variable 'd1' was never used; consider replacing with '_' or removing it\n    var d1: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:5:9: warning: variable 'd2' was never used; consider replacing with '_' or removing it\n    var d2: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:6:9: warning: variable 'd3' was never used; consider replacing with '_' or removing it\n    var d3: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:7:9: warning: variable 'd4' was never used; consider replacing with '_' or removing it\n    var d4: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:8:9: warning: variable 'd5' was never used; consider replacing with '_' or removing it\n    var d5: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:9:9: warning: variable 'd6' was never used; consider replacing with '_' or removing it\n    var d6: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:10:9: warning: variable 'd7' was never used; consider replacing with '_' or removing it\n    var d7: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:11:9: warning: variable 'd8' was never used; consider replacing with '_' or removing it\n    var d8: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:12:9: warning: variable 'd9' was never used; consider replacing with '_' or removing it\n    var d9: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:13:9: warning: variable 'd10' was never used; consider replacing with '_' or removing it\n    var d10: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:14:9: warning: variable 'd11' was never used; consider replacing with '_' or removing it\n    var d11: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:15:9: warning: variable 'd12' was never used; consider replacing with '_' or removing it\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic: [String : [String : Int]] = [:]\n    var dic_list: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpfpw8bsnp/tmpfpw8bsnp.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba903a47c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba90373eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba90373e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba90373d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfpw8bsnp                        0x000055eb21d40eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002ba903c33460 __libc_start_main + 245\n6    tmpfpw8bsnp                        0x000055eb21d404a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic2 = [String : Int]()\n    var dic3 = [[String : [String : Int]]]()\n    for (index, value) in l1.enumerated() {\n        dic2[l2[index]] = l3[index]\n        dic[value] = dic2\n        dic3.append(dic)\n    }\n    return dic3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpg6an356p/tmpg6an356p.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaab1d99c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaab1a90b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaab1a90988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaab1a8f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg6an356p                        0x00005580086f1f88 <unavailable> + 8072\n5    libc.so.6                          0x00002aaab1f85460 __libc_start_main + 245\n6    tmpg6an356p                        0x00005580086f1579 <unavailable> + 5497\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dictionary = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dictionary.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return dictionary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d = [String : [String : Int]]()\n    var d1 = [String : Int]()\n    var d2 = [String : Int]()\n    var d3 = [String : Int]()\n    var d4 = [String : Int]()\n    var d5 = [String : Int]()\n    var d6 = [String : Int]()\n    var d7 = [String : Int]()\n    var d8 = [String : Int]()\n    var d9 = [String : Int]()\n    var d10 = [String : Int]()\n    var d11 = [String : Int]()\n    var d12 = [String : Int]()\n    var d13 = [String : Int]()\n    var d14 = [String : Int]()\n    var d15 = [String : Int]()\n    var d16 = [String : Int]()\n    var d17 = [String : Int]()\n    var d18 = [String : Int]()\n    var d19 = [String : Int]()\n    var d20 = [String : Int]()\n    var d21 = [String : Int]()\n    var d22 = [String : Int]()\n    var d23 = [String : Int]()\n    var d24 = [String : Int]()\n    var d25 = [String : Int]()\n    var d26 = [String : Int]()\n    var d27 = [String : Int]()\n    var d28 = [String : Int]()\n    var d29 = [String : Int]()\n    var d30 = [String : Int]()\n    var d31 = [String : Int]()\n    var d32 = [String : Int]()\n    var d33 = [String : Int]()\n    var d34 = [String : Int]()\n    var d35 = [String : Int]()\n    var d36 = [String : Int]()\n    var d37 = [String : Int]()\n    var d38 = [String : Int]()\n    var d39 = [String : Int]()\n    var d40 = [String : Int]()\n    var d41 = [String : Int]()\n    var d42 =\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "/tmp/tmp2fmlkacs.swift:46:14: error: expected initial value after '='\n    var d42 =\n             ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic_temp = [String : [String : Int]]()\n        dic_temp[l1[i]] = [l2[i] : l3[i]]\n        dic.append(dic_temp)\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic2 = [String : Int]()\n    var dic3 = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic2[l2[i]] = l3[i]\n        dic[l1[i]] = dic2\n        dic3.append(dic)\n    }\n    return dic3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpib29g2eg/tmpib29g2eg.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3ea7321c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3ea7018b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3ea7018988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3ea70177b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpib29g2eg                        0x0000556af0a83f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b3ea750d460 __libc_start_main + 245\n6    tmpib29g2eg                        0x0000556af0a83549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic: [String : [String : Int]] = [:]\n    var dic_list: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpfpw8bsnp/tmpfpw8bsnp.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba903a47c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba90373eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba90373e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba90373d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfpw8bsnp                        0x000055eb21d40eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002ba903c33460 __libc_start_main + 245\n6    tmpfpw8bsnp                        0x000055eb21d404a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    var d1: [String : [String : Int]] = [:]\n    var d2: [String : Int] = [:]\n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n        d1[l1[i]] = d2\n        result.append(d1)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpg3hbdhva/tmpg3hbdhva.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abeb486fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abeb4566b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abeb4566988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abeb45657b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg3hbdhva                        0x0000561ddb4e9eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002abeb4a5b460 __libc_start_main + 245\n6    tmpg3hbdhva                        0x0000561ddb4e94a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    var dic = [String : Int]()\n    for i in 0..<l3.count {\n        dic[l2[i]] = l3[i]\n    }\n    for i in 0..<l1.count {\n        result.append([l1[i] : dic])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpyxnvx3tu/tmpyxnvx3tu.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b51493bbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b51490b2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b51490b2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b51490b17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyxnvx3tu                        0x000056195f635fa8 <unavailable> + 8104\n5    libc.so.6                          0x00002b51495a7460 __libc_start_main + 245\n6    tmpyxnvx3tu                        0x000056195f635599 <unavailable> + 5529\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : Int]()\n    var d3 = [[String : [String : Int]]]()\n    \n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n        d1[l1[i]] = d2\n        d3.append(d1)\n    }\n    return d3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpeu0swi4p/tmpeu0swi4p.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b79ab560c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b79ab257b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b79ab257988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b79ab2567b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeu0swi4p                        0x0000564d4315ff58 <unavailable> + 8024\n5    libc.so.6                          0x00002b79ab74c460 __libc_start_main + 245\n6    tmpeu0swi4p                        0x0000564d4315f549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    return [[\"list1\" : [\"list2\" : l3[0]]], [\"list1\" : [\"list2\" : l3[1]]], [\"list1\" : [\"list2\" : l3[2]]]]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpww4_164m/tmpww4_164m.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b759fa6ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b759f765b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b759f765988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b759f7647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpww4_164m                        0x00005601c329ebe8 <unavailable> + 7144\n5    libc.so.6                          0x00002b759fc5a460 __libc_start_main + 245\n6    tmpww4_164m                        0x00005601c329e1d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var temp: [String : [String : Int]] = [:]\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var temp: [String : [String : Int]] = [:]\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var list = [[String : [String : Int]]]()\n    for (i, j) in zip(l1, l2) {\n        dict[i] = [j : l3[i.count]]\n        list.append(dict)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab8636c2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab8633b9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab8633b9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab8633b913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab8633b8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ab8631b9e83 <unavailable> + 188035\n6    tmp4if194ak                        0x000055df3e1adf2f <unavailable> + 12079\n7    tmp4if194ak                        0x000055df3e1ac865 <unavailable> + 6245\n8    libc.so.6                          0x00002ab8638ae460 __libc_start_main + 245\n9    tmp4if194ak                        0x000055df3e1ac369 <unavailable> + 4969\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for (index, element) in l1.enumerated() {\n        result.append([element : [l2[index] : l3[index]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpxj7yyz3l/tmpxj7yyz3l.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c82a75c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c8276cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c8276c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c8276b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxj7yyz3l                        0x00005623955d1f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b1c82c61460 __libc_start_main + 245\n6    tmpxj7yyz3l                        0x00005623955d1549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dictionary: [String : [String : Int]] = [:]\n    var list: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        dictionary[l1[i]] = [l2[i] : l3[i]]\n        list.append(dictionary)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpj1xwcc3d/tmpj1xwcc3d.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8305f02c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8305bf9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8305bf9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8305bf87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj1xwcc3d                        0x000055d25fa5beb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b83060ee460 __libc_start_main + 245\n6    tmpj1xwcc3d                        0x000055d25fa5b4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict = [String : [String : Int]]()\n    var list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        list.append(dict)\n    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmp0h3l4w_a/tmp0h3l4w_a.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac3a31f8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3a2eefb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3a2eef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3a2eee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0h3l4w_a                        0x0000560e55fb4f58 <unavailable> + 8024\n5    libc.so.6                          0x00002ac3a33e4460 __libc_start_main + 245\n6    tmp0h3l4w_a                        0x0000560e55fb4549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var d: [String : [String : Int]] = [:]\n        d[l1[i]] = [l2[i] : l3[i]]\n        result.append(d)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    var dict = [String : [String : Int]]()\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmp1j1vm6rd/tmp1j1vm6rd.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8223738c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b822342fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b822342f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b822342e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1j1vm6rd                        0x0000556b836d3f58 <unavailable> + 8024\n5    libc.so.6                          0x00002b8223924460 __libc_start_main + 245\n6    tmp1j1vm6rd                        0x0000556b836d3549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    let d1 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d2 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d3 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d4 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d5 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d6 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d7 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d8 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d9 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d10 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d11 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d12 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d13 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d14 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d15 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d16 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d17 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d18 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d19 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n    let d20 = [\"name\": l1, \"surname\": l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "/tmp/tmp458546ir.swift:23:40: error: expected ']' in container literal expression\n    let d20 = [\"name\": l1, \"surname\": l\n                                       ^\n/tmp/tmp458546ir.swift:23:15: note: to match this opening '['\n    let d20 = [\"name\": l1, \"surname\": l\n              ^\n/tmp/tmp458546ir.swift:4:14: error: heterogeneous collection literal could only be inferred to '[String : Any]'; add explicit type annotation if this is intentional\n    let d1 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                                                    as [String : Any]\n/tmp/tmp458546ir.swift:5:14: error: heterogeneous collection literal could only be inferred to '[String : Any]'; add explicit type annotation if this is intentional\n    let d2 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                                                    as [String : Any]\n/tmp/tmp458546ir.swift:6:14: error: heterogeneous collection literal could only be inferred to '[String : Any]'; add explicit type annotation if this is intentional\n    let d3 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                                                    as [String : Any]\n/tmp/tmp458546ir.swift:7:14: error: heterogeneous collection literal could only be inferred to '[String : Any]'; add explicit type annotation if this is intentional\n    let d4 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                                                    as [String : Any]\n/tmp/tmp458546ir.swift:8:14: error: heterogeneous collection literal could only be inferred to '[String : Any]'; add explicit type annotation if this is intentional\n    let d5 = [\"name\": l1, \"surname\": l2, \"age\": l3]\n             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                                                    as [String : Any]\n/tmp/tmp458546ir.swift:9:14: error: heterogeneous collection literal cou",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic2 = [String : [String : Int]]()\n    var dic3 = [String : [String : Int]]()\n    var dic4 = [String : [String : Int]]()\n    var dic5 = [String : [String : Int]]()\n    var dic6 = [String : [String : Int]]()\n    var dic7 = [String : [String : Int]]()\n    var dic8 = [String : [String : Int]]()\n    var dic9 = [String : [String : Int]]()\n    var dic10 = [String : [String : Int]]()\n    var dic11 = [String : [String : Int]]()\n    var dic12 = [String : [String : Int]]()\n    var dic13 = [String : [String : Int]]()\n    var dic14 = [String : [String : Int]]()\n    var dic15 = [String : [String : Int]]()\n    var dic16 = [String : [String : Int]]()\n    var dic17 = [String : [String : Int]]()\n    var dic18 = [String : [String : Int]]()\n    var dic19 = [String : [String : Int]]()\n    var dic20 = [String : [String : Int]]()\n    var dic21 = [String : [String : Int]]()\n    var dic22 = [String : [String : Int]]()\n    var dic23 = [String : [String : Int]]()\n    var dic24 = [String : [String : Int]]()\n    var dic25 = [String : [String : Int]]()\n    var dic26 = [String : [String : Int]]()\n    var dic27 = [String : [String : Int]]()\n    var dic28 = [String : [String : Int]]()\n    var dic29 = [String : [String : Int]]()\n    var dic30 = [String : [String : Int]]()\n    var dic31 = [String : [String : Int]]()\n    var dic32 = [String : [String : Int]]()\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "/tmp/tmp6gvfdn43.swift:4:9: warning: initialization of variable 'dic' was never used; consider replacing with assignment to '_' or removing it\n    var dic = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmp6gvfdn43.swift:5:9: warning: initialization of variable 'dic2' was never used; consider replacing with assignment to '_' or removing it\n    var dic2 = [String : [String : Int]]()\n    ~~~~^~~~\n    _\n/tmp/tmp6gvfdn43.swift:6:9: warning: initialization of variable 'dic3' was never used; consider replacing with assignment to '_' or removing it\n    var dic3 = [String : [String : Int]]()\n    ~~~~^~~~\n    _\n/tmp/tmp6gvfdn43.swift:7:9: warning: initialization of variable 'dic4' was never used; consider replacing with assignment to '_' or removing it\n    var dic4 = [String : [String : Int]]()\n    ~~~~^~~~\n    _\n/tmp/tmp6gvfdn43.swift:8:9: warning: initialization of variable 'dic5' was never used; consider replacing with assignment to '_' or removing it\n    var dic5 = [String : [String : Int]]()\n    ~~~~^~~~\n    _\n/tmp/tmp6gvfdn43.swift:9:9: warning: initialization of variable 'dic6' was never used; consider replacing with assignment to '_' or removing it\n    var dic6 = [String : [String : Int]]()\n    ~~~~^~~~\n    _\n/tmp/tmp6gvfdn43.swift:10:9: warning: initialization of variable 'dic7' was never used; consider replacing with assignment to '_' or removing it\n    var dic7 = [String : [String : Int]]()\n    ~~~~^~~~\n    _\n/tmp/tmp6gvfdn43.swift:11:9: warning: initialization of variable 'dic8' was never used; consider replacing with assignment to '_' or removing it\n    var dic8 = [String : [String : Int]]()\n    ~~~~^~~~\n    _\n/tmp/tmp6gvfdn43.swift:12:9: warning: initialization of variable 'dic9' was never used; consider replacing with assignment to '_' or removing it\n    var dic9 = [String : [String : Int]]()\n    ~~~~^~~~\n    _\n/tmp/tmp6gvfdn43.swift:13:9: warning: initialization of variable 'dic10' was never used; consider replacing with assignment to '_' or removing it\n    var dic10 = [String : [String : Int]]()\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    var dict: [String : [String : Int]] = [:]\n    for i in 0..<l1.count {\n        dict[l1[i]] = [l2[i] : l3[i]]\n    }\n    result.append(dict)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpde37ps6g/tmpde37ps6g.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a87158c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a86e4fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a86e4f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a86e4e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpde37ps6g                        0x0000563aefac3eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002b0a87344460 __libc_start_main + 245\n6    tmpde37ps6g                        0x0000563aefac34a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for (index, value) in l1.enumerated() {\n        result.append([value : [l2[index] : l3[index]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for (index, value) in l1.enumerated() {\n        var dict = [String : [String : Int]]()\n        dict[value] = [l2[index] : l3[index]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dict: [String : [String : Int]] = [:]\n    var dict_list: [[String : [String : Int]]] = []\n    for (index, value) in l1.enumerated() {\n        dict[value] = [l2[index] : l3[index]]\n        dict_list.append(dict)\n    }\n    return dict_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpkduocsd6/tmpkduocsd6.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afdd7442c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afdd7139b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afdd7139988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afdd71387b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkduocsd6                        0x0000558e206d0ef8 <unavailable> + 7928\n5    libc.so.6                          0x00002afdd762e460 __libc_start_main + 245\n6    tmpkduocsd6                        0x0000558e206d04e9 <unavailable> + 5353\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        let dic = [l1[i] : [l2[i] : l3[i]]]\n        result.append(dic)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic: [String : [String : Int]] = [:]\n    var dic_list: [[String : [String : Int]]] = []\n    var i = 0\n    while i < l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n        dic = [:]\n        i += 1\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1: [String : [String : Int]] = [:]\n    var d2: [String : [String : Int]] = [:]\n    var d3: [String : [String : Int]] = [:]\n    var d4: [String : [String : Int]] = [:]\n    var d5: [String : [String : Int]] = [:]\n    var d6: [String : [String : Int]] = [:]\n    var d7: [String : [String : Int]] = [:]\n    var d8: [String : [String : Int]] = [:]\n    var d9: [String : [String : Int]] = [:]\n    var d10: [String : [String : Int]] = [:]\n    var d11: [String : [String : Int]] = [:]\n    var d12: [String : [String : Int]] = [:]\n    var d13: [String : [String : Int]] = [:]\n    var d14: [String : [String : Int]] = [:]\n    var d15: [String : [String : Int]] = [:]\n    var d16: [String : [String : Int]] = [:]\n    var d17: [String : [String : Int]] = [:]\n    var d18: [String : [String : Int]] = [:]\n    var d19: [String : [String : Int]] = [:]\n    var d20: [String : [String : Int]] = [:]\n    var d21: [String : [String : Int]] = [:]\n    var d22: [String : [String : Int]] = [:]\n    var d23: [String : [String : Int]] = [:]\n    var d24: [String : [String : Int]] = [:]\n    var d25: [String : [String : Int]] = [:]\n    var d26: [String : [String : Int]] = [:]\n    var d27: [String : [String : Int]] = [:]\n    var d28: [String : [String : Int]] = [:]\n    var d29: [String : [String : Int]] = [:]\n    var d30: [String : [String : Int]] = [:]\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmp729xousl.swift:4:9: warning: variable 'd1' was never used; consider replacing with '_' or removing it\n    var d1: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:5:9: warning: variable 'd2' was never used; consider replacing with '_' or removing it\n    var d2: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:6:9: warning: variable 'd3' was never used; consider replacing with '_' or removing it\n    var d3: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:7:9: warning: variable 'd4' was never used; consider replacing with '_' or removing it\n    var d4: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:8:9: warning: variable 'd5' was never used; consider replacing with '_' or removing it\n    var d5: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:9:9: warning: variable 'd6' was never used; consider replacing with '_' or removing it\n    var d6: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:10:9: warning: variable 'd7' was never used; consider replacing with '_' or removing it\n    var d7: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:11:9: warning: variable 'd8' was never used; consider replacing with '_' or removing it\n    var d8: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:12:9: warning: variable 'd9' was never used; consider replacing with '_' or removing it\n    var d9: [String : [String : Int]] = [:]\n        ^~\n        _\n/tmp/tmp729xousl.swift:13:9: warning: variable 'd10' was never used; consider replacing with '_' or removing it\n    var d10: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:14:9: warning: variable 'd11' was never used; consider replacing with '_' or removing it\n    var d11: [String : [String : Int]] = [:]\n        ^~~\n        _\n/tmp/tmp729xousl.swift:15:9: warning: variable 'd12' was never used; consider replacing with '_' or removing it\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        var d: [String : [String : Int]] = [:]\n        d[l1[i]] = [l2[i] : l3[i]]\n        result.append(d)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : Int]()\n    \n    for i in 0..<l1.count {\n        d2[l2[i]] = l3[i]\n    }\n    d1[l1[0]] = d2\n    return [d1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmp1wq4_wiz/tmp1wq4_wiz.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba2586c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba2583bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba2583bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba2583bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1wq4_wiz                        0x00005573e4694eb8 <unavailable> + 7864\n5    libc.so.6                          0x00002ba2588b2460 __libc_start_main + 245\n6    tmp1wq4_wiz                        0x00005573e46944a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [String : [String : Int]]()\n    var dic_list = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        dic[l1[i]] = [l2[i] : l3[i]]\n        dic_list.append(dic)\n    }\n    return dic_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "tmpravtmwzf/tmpravtmwzf.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad29b789c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad29b480b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad29b480988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad29b47f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpravtmwzf                        0x000055b2cadebf58 <unavailable> + 8024\n5    libc.so.6                          0x00002ad29b975460 __libc_start_main + 245\n6    tmpravtmwzf                        0x000055b2cadeb549 <unavailable> + 5449\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    return [[\"list1\": [\"list2\": l3[0], \"list3\": l3[1]]], [\"list1\": [\"list2\": l3[2], \"list3\": l3[3]]]]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpkodb9zpm/tmpkodb9zpm.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b928985ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9289555b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9289555988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b92895547b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkodb9zpm                        0x0000556120a19be8 <unavailable> + 7144\n5    libc.so.6                          0x00002b9289a4a460 __libc_start_main + 245\n6    tmpkodb9zpm                        0x0000556120a191d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var dic = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dic1 = [String : [String : Int]]()\n        var dic2 = [String : Int]()\n        dic2[l2[i]] = l3[i]\n        dic1[l1[i]] = dic2\n        dic.append(dic1)\n    }\n    return dic\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result: [[String : [String : Int]]] = []\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        var dict = [String : [String : Int]]()\n        dict[l1[i]] = [l2[i] : l3[i]]\n        result.append(dict)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    for i in 0..<l1.count {\n        d1[l1[i]] = [l2[i] : l3[i]]\n    }\n    return [d1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "tmpu70cuant/tmpu70cuant.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad2aec3fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad2ae936b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad2ae936988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad2ae9357b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu70cuant                        0x00005591b257feb8 <unavailable> + 7864\n5    libc.so.6                          0x00002ad2aee2b460 __libc_start_main + 245\n6    tmpu70cuant                        0x00005591b257f4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var result = [[String : [String : Int]]]()\n    for i in 0..<l1.count {\n        result.append([l1[i] : [l2[i] : l3[i]]])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1666123537,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert more than one list to nested dictionary.\nfunc convert_list_dictionary(l1: [String], l2: [String], l3: [Int]) -> [[String : [String : Int]]] {\n    var d1 = [String : [String : Int]]()\n    var d2 = [String : [String : Int]]()\n    var d3 = [String : [String : Int]]()\n    var d4 = [String : [String : Int]]()\n    var d5 = [String : [String : Int]]()\n    var d6 = [String : [String : Int]]()\n    var d7 = [String : [String : Int]]()\n    var d8 = [String : [String : Int]]()\n    var d9 = [String : [String : Int]]()\n    var d10 = [String : [String : Int]]()\n    var d11 = [String : [String : Int]]()\n    var d12 = [String : [String : Int]]()\n    var d13 = [String : [String : Int]]()\n    var d14 = [String : [String : Int]]()\n    var d15 = [String : [String : Int]]()\n    var d16 = [String : [String : Int]]()\n    var d17 = [String : [String : Int]]()\n    var d18 = [String : [String : Int]]()\n    var d19 = [String : [String : Int]]()\n    var d20 = [String : [String : Int]]()\n    var d21 = [String : [String : Int]]()\n    var d22 = [String : [String : Int]]()\n    var d23 = [String : [String : Int]]()\n    var d24 = [String : [String : Int]]()\n    var d25 = [String : [String : Int]]()\n    var d26 = [String : [String : Int]]()\n    var d27 = [String : [String : Int]]()\n    var d28 = [String : [String : Int]]()\n    var d29 = [String : [String : Int]]()\n    var d30 = [String : [String : Int]]()\n    var d31 = [String : [String : Int]]()\n    var d32 = [String : [String : Int]]()\n    var d33 = [String : [String : Int]]()\n    var d34 = [String : [String : Int]]()\n   \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(convert_list_dictionary(l1: [\"S001\", \"S002\", \"S003\", \"S004\"], l2: [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], l3: [85, 98, 89, 92]) == [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]])\nassert(convert_list_dictionary(l1: [\"abc\", \"def\", \"ghi\", \"jkl\"], l2: [\"python\", \"program\", \"language\", \"programs\"], l3: [100, 200, 300, 400]) == [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]])\nassert(convert_list_dictionary(l1: [\"A1\", \"A2\", \"A3\", \"A4\"], l2: [\"java\", \"C\", \"C++\", \"DBMS\"], l3: [10, 20, 30, 40]) == [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]])",
      "timestamp": 1665510627,
      "stdout": "",
      "stderr": "/tmp/tmpb_uaex_l.swift:4:9: warning: initialization of variable 'd1' was never used; consider replacing with assignment to '_' or removing it\n    var d1 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:5:9: warning: initialization of variable 'd2' was never used; consider replacing with assignment to '_' or removing it\n    var d2 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:6:9: warning: initialization of variable 'd3' was never used; consider replacing with assignment to '_' or removing it\n    var d3 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:7:9: warning: initialization of variable 'd4' was never used; consider replacing with assignment to '_' or removing it\n    var d4 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:8:9: warning: initialization of variable 'd5' was never used; consider replacing with assignment to '_' or removing it\n    var d5 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:9:9: warning: initialization of variable 'd6' was never used; consider replacing with assignment to '_' or removing it\n    var d6 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:10:9: warning: initialization of variable 'd7' was never used; consider replacing with assignment to '_' or removing it\n    var d7 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:11:9: warning: initialization of variable 'd8' was never used; consider replacing with assignment to '_' or removing it\n    var d8 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:12:9: warning: initialization of variable 'd9' was never used; consider replacing with assignment to '_' or removing it\n    var d9 = [String : [String : Int]]()\n    ~~~~^~\n    _\n/tmp/tmpb_uaex_l.swift:13:9: warning: initialization of variable 'd10' was never used; consider replacing with assignment to '_' or removing it\n    var d10 = [String : [String : Int]]()\n    ~~~~^~~\n    _\n/tmp/tmpb_uaex_l.swift:14:9: warning: ini",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}