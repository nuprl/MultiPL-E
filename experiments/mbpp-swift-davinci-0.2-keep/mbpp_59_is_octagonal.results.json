{
  "name": "mbpp_59_is_octagonal",
  "language": "swift",
  "prompt": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return (n * (3 * n - 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the nth octagonal number.\nfunc is_octagonal(n: Int) -> Int {\n    return n * (3 * n - 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_octagonal(n: 5) == 65)\nassert(is_octagonal(n: 10) == 280)\nassert(is_octagonal(n: 15) == 645)",
      "timestamp": 1665510616,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}