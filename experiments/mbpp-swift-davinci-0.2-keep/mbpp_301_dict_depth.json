{
  "name": "mbpp_301_dict_depth",
  "language": "swift",
  "prompt": "\n/// Write a function to find the depth of a dictionary.\nfunc dict_depth(d: AnyHashable) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(dict_depth(d: [\"a\" : 1, \"b\" : [\"c\" : [\"d\" : [:] as [AnyHashable : AnyHashable]]]]) == 4)\nassert(dict_depth(d: [\"a\" : 1, \"b\" : [\"c\" : \"python\"]]) == 2)\nassert(dict_depth(d: [1 : \"Sun\", 2 : [3 : [4 : \"Mon\"]]]) == 3)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var depth = 0\n    if let dict = d as? [AnyHashable: AnyHashable] {\n        for (_, v) in dict {\n            depth = max(depth, dict_depth(d: v))\n        }\n        return depth + 1\n    }\n    return depth",
    "    var depth = 0\n    if let d = d as? [AnyHashable: AnyHashable] {\n        for (_, v) in d {\n            depth = max(depth, dict_depth(d: v))\n        }\n        return depth + 1\n    }\n    return 0",
    "    if let d = d as? [AnyHashable: AnyHashable] {\n        return 1 + d.map { dict_depth(d: $0.value) }.max()!\n    }\n    return 0",
    "    if let d = d as? [AnyHashable: AnyHashable] {\n        return 1 + d.values.map(dict_depth).max()!\n    }\n    return 0",
    "    var depth = 0\n    if let d = d as? [AnyHashable: AnyHashable] {\n        for (_, v) in d {\n            depth = max(depth, dict_depth(d: v))\n        }\n        return depth + 1\n    }\n    return 0",
    "    var depth = 0\n    if let dict = d as? [AnyHashable: AnyHashable] {\n        for (_, v) in dict {\n            depth = max(depth, dict_depth(d: v))\n        }\n        depth += 1\n    }\n    return depth",
    "    if let d = d as? [AnyHashable: AnyHashable] {\n        return 1 + d.map { dict_depth(d: $0.value) }.max()!\n    }\n    return 0",
    "    var depth = 0\n    if let dict = d as? [AnyHashable: AnyHashable] {\n        for (_, value) in dict {\n            depth = max(depth, dict_depth(d: value))\n        }\n        depth += 1\n    }\n    return depth",
    "    var depth = 0\n    if let dict = d as? [AnyHashable: AnyHashable] {\n        for (_, value) in dict {\n            depth = max(depth, dict_depth(d: value))\n        }\n        return depth + 1\n    }\n    return 0",
    "    var depth = 0\n    if let d = d as? [AnyHashable: AnyHashable] {\n        for (_, v) in d {\n            depth = max(depth, dict_depth(d: v))\n        }\n        depth += 1\n    }\n    return depth",
    "    var depth = 0\n    if let d = d as? [AnyHashable: AnyHashable] {\n        for v in d.values {\n            depth = max(depth, dict_depth(d: v))\n        }\n        depth += 1\n    }\n    return depth",
    "    var depth = 0\n    if let dict = d as? [AnyHashable: AnyHashable] {\n        for (_, value) in dict {\n            depth = max(depth, dict_depth(d: value))\n        }\n        depth += 1\n    }\n    return depth",
    "    var depth = 0\n    if let dict = d as? [AnyHashable: AnyHashable] {\n        for (_, value) in dict {\n            depth = max(depth, dict_depth(d: value))\n        }\n    }\n    return depth + 1",
    "    var depth = 0\n    if let d = d as? [AnyHashable: AnyHashable] {\n        for (_, v) in d {\n            depth = max(depth, dict_depth(d: v))\n        }\n        depth += 1\n    }\n    return depth",
    "    if let d = d as? [AnyHashable: AnyHashable] {\n        return 1 + d.map { dict_depth(d: $0.value) }.max()!\n    }\n    return 0",
    "    var depth = 0\n    if let dict = d as? [AnyHashable: AnyHashable] {\n        for (_, value) in dict {\n            depth = max(depth, dict_depth(d: value))\n        }\n        return depth + 1\n    }\n    return 0",
    "    var max_depth = 0\n    var depth = 0\n    func _dict_depth(d: AnyHashable) {\n        if let dict = d as? [AnyHashable: AnyHashable] {\n            depth += 1\n            for (_, value) in dict {\n                _dict_depth(d: value)\n            }\n        } else if let array = d as? [AnyHashable] {\n            depth += 1\n            for value in array {\n                _dict_depth(d: value)\n            }\n        } else {\n            max_depth = max(max_depth, depth)\n            depth -= 1\n        }\n    }\n    _dict_depth(d: d)\n    return max_depth",
    "    var depth = 0\n    if let d = d as? [AnyHashable: AnyHashable] {\n        for (_, v) in d {\n            depth = max(depth, dict_depth(d: v))\n        }\n        return depth + 1\n    }\n    return 0",
    "    var depth = 0\n    if let d = d as? [AnyHashable: AnyHashable] {\n        for v in d.values {\n            depth = max(depth, dict_depth(d: v))\n        }\n        return depth + 1\n    }\n    return 0",
    "    if let _ = d as? [AnyHashable: AnyHashable] {\n        return 1 + dict_depth(d: d as! [AnyHashable: AnyHashable])\n    }\n    return 0"
  ]
}