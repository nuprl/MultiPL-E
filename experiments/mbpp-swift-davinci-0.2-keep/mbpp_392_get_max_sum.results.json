{
  "name": "mbpp_392_get_max_sum",
  "language": "swift",
  "prompt": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    let divisors = [2, 3, 4, 5]\n    for divisor in divisors {\n        let sum = get_max_sum(n: n/divisor)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "tmppn0gu9m6/tmppn0gu9m6.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b69b84f7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b69b81eeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b69b81ee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b69b81ed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppn0gu9m6                        0x000055b60aa504b5 <unavailable> + 5301\n5    libc.so.6                          0x00002b69b86e3460 __libc_start_main + 245\n6    tmppn0gu9m6                        0x000055b60aa50169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    if sum > n {\n        return sum\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 1, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n-i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    var sum = n\n    let divisors = [2, 3, 4, 5]\n    for divisor in divisors {\n        if n % divisor == 0 {\n            sum = max(sum, get_max_sum(n: n / divisor))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "tmpflhtcsvm/tmpflhtcsvm.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b173d5cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b173d2c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b173d2c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b173d2c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpflhtcsvm                        0x000055efe2b8a555 <unavailable> + 5461\n5    libc.so.6                          0x00002b173d7b6460 __libc_start_main + 245\n6    tmpflhtcsvm                        0x000055efe2b8a209 <unavailable> + 4617\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        if n % i == 0 {\n            sum += get_max_sum(n: n / i)\n        }\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "tmpqy9o2pq8/tmpqy9o2pq8.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae26abd3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae26a8cab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae26a8ca988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae26a8c97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqy9o2pq8                        0x000055c6e75613c5 <unavailable> + 5061\n5    libc.so.6                          0x00002ae26adbf460 __libc_start_main + 245\n6    tmpqy9o2pq8                        0x000055c6e7561079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    \n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    \n    return max(a+b+c+d, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var sum = 0\n    var max_sum = 0\n    for i in 2...5 {\n        if n % i == 0 {\n            sum = get_max_sum(n: n/i)\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "tmpqmoc2r_2/tmpqmoc2r_2.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b297842ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2978121b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2978121988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b29781207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqmoc2r_2                        0x000056110f90d335 <unavailable> + 4917\n5    libc.so.6                          0x00002b2978616460 __libc_start_main + 245\n6    tmpqmoc2r_2                        0x000056110f90cfe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    return max(a+b+c+d, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123025,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = 0\n    for i in 2...5 {\n        max_sum = max(max_sum, get_max_sum(n: n / i))\n    }\n    return max_sum + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "tmpazk1_g0n/tmpazk1_g0n.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba9cbd54c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba9cba4bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba9cba4b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba9cba4a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpazk1_g0n                        0x000055e063e433c5 <unavailable> + 5061\n5    libc.so.6                          0x00002ba9cbf40460 __libc_start_main + 245\n6    tmpazk1_g0n                        0x000055e063e43079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        if n % i == 0 {\n            max_sum = max(max_sum, get_max_sum(n: n/i))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpyaqpzclv/tmpyaqpzclv.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aabc674ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aabc6441b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aabc6441988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aabc64407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyaqpzclv                        0x0000557eb7ee23c5 <unavailable> + 5061\n5    libc.so.6                          0x00002aabc6936460 __libc_start_main + 245\n6    tmpyaqpzclv                        0x0000557eb7ee2079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(i, dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5])\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    let e = get_max_sum(n: n/6)\n    let f = get_max_sum(n: n/7)\n    let g = get_max_sum(n: n/8)\n    let h = get_max_sum(n: n/9)\n    let i = get_max_sum(n: n/10)\n    let j = get_max_sum(n: n/11)\n    let k = get_max_sum(n: n/12)\n    let l = get_max_sum(n: n/13)\n    let m = get_max_sum(n: n/14)\n    let o = get_max_sum(n: n/15)\n    let p = get_max_sum(n: n/16)\n    let q = get_max_sum(n: n/17)\n    let r = get_max_sum(n: n/18)\n    let s = get_max_sum(n: n/19)\n    let t = get_max_sum(n: n/20)\n    let u = get_max_sum(n: n/21)\n    let v = get_max_sum(n: n/22)\n    let w = get_max_sum(n: n/23)\n    let x = get_max_sum(n: n/24)\n    let y = get_max_sum(n: n/25)\n    let z = get_max_sum(n: n/26)\n    let aa = get_max_sum(n: n/27)\n    let ab = get_max_sum(n: n/28)\n    let ac = get_max_sum(n: n/29)\n    let ad = get_max_sum(n: n/30)\n    let a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "/tmp/tmpbl7cialu.swift:36:9: error: type annotation missing in pattern\n    let a\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n-i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    let n_by_2 = n/2\n    let n_by_3 = n/3\n    let n_by_4 = n/4\n    let n_by_5 = n/5\n    let sum = get_max_sum(n: n_by_2) + get_max_sum(n: n_by_3) + get_max_sum(n: n_by_4) + get_max_sum(n: n_by_5)\n    if sum > max_sum {\n        max_sum = sum\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        if n % i == 0 {\n            max_sum = max(max_sum, get_max_sum(n: n / i))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpu3_0fgkg/tmpu3_0fgkg.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2d06dddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2d06ad4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2d06ad4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2d06ad37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu3_0fgkg                        0x0000557c820733c5 <unavailable> + 5061\n5    libc.so.6                          0x00002b2d06fc9460 __libc_start_main + 245\n6    tmpu3_0fgkg                        0x0000557c82073079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n-i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        if n % i == 0 {\n            max_sum = max(max_sum, get_max_sum(n: n/i) + get_max_sum(n: n/i))\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpe7k94xjf/tmpe7k94xjf.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8914040c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8913d37b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8913d37988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8913d367b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe7k94xjf                        0x00005637859993c5 <unavailable> + 5061\n5    libc.so.6                          0x00002b891422c460 __libc_start_main + 245\n6    tmpe7k94xjf                        0x0000563785999079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    \n    var max_sum = n\n    let max_sum_1 = get_max_sum(n: n/2)\n    let max_sum_2 = get_max_sum(n: n/3)\n    let max_sum_3 = get_max_sum(n: n/4)\n    let max_sum_4 = get_max_sum(n: n/5)\n    \n    if max_sum_1 + max_sum_2 + max_sum_3 + max_sum_4 > max_sum {\n        max_sum = max_sum_1 + max_sum_2 + max_sum_3 + max_sum_4\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    var dp = [Int](repeating: 0, count: n+1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    dp[4] = 4\n    dp[5] = 5\n    for i in 6...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b47c97d3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b47c94ca561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b47c94ca286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b47c94ca13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b47c94c9bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b47c92ca7ec <unavailable> + 186348\n6    tmpzxyj4iff                        0x0000557de8f72722 <unavailable> + 5922\n7    tmpzxyj4iff                        0x0000557de8f7256e <unavailable> + 5486\n8    libc.so.6                          0x00002b47c99bf460 __libc_start_main + 245\n9    tmpzxyj4iff                        0x0000557de8f72199 <unavailable> + 4505\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, through: n/5, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmp86ckn4_8/tmp86ckn4_8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002addf2054c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002addf1d4bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002addf1d4b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002addf1d4a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp86ckn4_8                        0x000055877d537475 <unavailable> + 5237\n5    libc.so.6                          0x00002addf2240460 __libc_start_main + 245\n6    tmp86ckn4_8                        0x000055877d537129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    var memo = [Int](repeating: 0, count: n + 1)\n    return get_max_sum(n: n, memo: &memo)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "/tmp/tmpdm8ey1uz.swift:5:36: error: extra argument 'memo' in call\n    return get_max_sum(n: n, memo: &memo)\n                      ~~~~~~~~~~~~~^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    sum = max(sum, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n    sum = max(sum, n)\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    var dp = Array(repeating: 0, count: n+1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    \n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123025,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "tmpztcg_5z8/tmpztcg_5z8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10b7fa5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10b7c9cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10b7c9c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10b7c9b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpztcg_5z8                        0x00005560c6f5f335 <unavailable> + 4917\n5    libc.so.6                          0x00002b10b8191460 __libc_start_main + 245\n6    tmpztcg_5z8                        0x00005560c6f5efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    let e = a + b + c + d\n    return max(n, e)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum = max(sum, get_max_sum(n: n/i))\n    }\n    return sum + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmpikkcsz6t/tmpikkcsz6t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b28729f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b28726eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b28726ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b28726e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpikkcsz6t                        0x000055697d0fb3c5 <unavailable> + 5061\n5    libc.so.6                          0x00002b2872bdf460 __libc_start_main + 245\n6    tmpikkcsz6t                        0x000055697d0fb079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    var sum = n\n    let temp = n / 2\n    if temp > 0 {\n        sum += get_max_sum(n: temp)\n    }\n    let temp2 = n / 3\n    if temp2 > 0 {\n        sum += get_max_sum(n: temp2)\n    }\n    let temp3 = n / 4\n    if temp3 > 0 {\n        sum += get_max_sum(n: temp3)\n    }\n    let temp4 = n / 5\n    if temp4 > 0 {\n        sum += get_max_sum(n: temp4)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpt7uqc6id/tmpt7uqc6id.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af2a27edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af2a24e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af2a24e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af2a24e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt7uqc6id                        0x0000558d2ffd9245 <unavailable> + 4677\n5    libc.so.6                          0x00002af2a29d9460 __libc_start_main + 245\n6    tmpt7uqc6id                        0x0000558d2ffd8ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 1 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    if sum > n {\n        return sum\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n-i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510121,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpq6jmeoj1/tmpq6jmeoj1.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab149465c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab14915cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab14915c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab14915b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq6jmeoj1                        0x000055da394bd335 <unavailable> + 4917\n5    libc.so.6                          0x00002ab149651460 __libc_start_main + 245\n6    tmpq6jmeoj1                        0x000055da394bcfe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(i, dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5])\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    \n    var sum = n\n    let divisors = [2, 3, 4, 5]\n    for divisor in divisors {\n        if n % divisor == 0 {\n            sum += get_max_sum(n: n / divisor)\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmp1t6oy956/tmp1t6oy956.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b74b4690c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b74b4387b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b74b4387988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b74b43867b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1t6oy956                        0x000055fada8554b5 <unavailable> + 5301\n5    libc.so.6                          0x00002b74b487c460 __libc_start_main + 245\n6    tmp1t6oy956                        0x000055fada855169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    let n1 = get_max_sum(n: n/2)\n    let n2 = get_max_sum(n: n/3)\n    let n3 = get_max_sum(n: n/4)\n    let n4 = get_max_sum(n: n/5)\n    return max(n, n1+n2+n3+n4)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpgjcoj9f4/tmpgjcoj9f4.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b321003ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b320fd31b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b320fd31988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b320fd307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgjcoj9f4                        0x0000561f004022d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b3210226460 __libc_start_main + 245\n6    tmpgjcoj9f4                        0x0000561f00401f89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    var sum = 0\n    for i in 2...5 {\n        sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmps6kkh4ge/tmps6kkh4ge.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9fad1a2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9face99b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9face99988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9face987b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps6kkh4ge                        0x000055e5a74d8335 <unavailable> + 4917\n5    libc.so.6                          0x00002b9fad38e460 __libc_start_main + 245\n6    tmps6kkh4ge                        0x000055e5a74d7fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 || n == 1 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    var arr = [Int](repeating: 0, count: n + 1)\n    arr[0] = 0\n    arr[1] = 1\n    arr[2] = 2\n    arr[3] = 3\n    arr[4] = 4\n    arr[5] = 5\n    for i in 6...n {\n        arr[i] = max(arr[i / 2] + arr[i / 3] + arr[i / 4] + arr[i / 5], i)\n    }\n    return arr[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    var sum = 0\n    sum = max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    sum = max(sum, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n    sum = max(sum, n)\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, through: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123025,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "tmpztcg_5z8/tmpztcg_5z8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10b7fa5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10b7c9cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10b7c9c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10b7c9b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpztcg_5z8                        0x00005560c6f5f335 <unavailable> + 4917\n5    libc.so.6                          0x00002b10b8191460 __libc_start_main + 245\n6    tmpztcg_5z8                        0x00005560c6f5efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 6 {\n        return n\n    }\n    var sum = 0\n    for i in stride(from: n/2, to: n/5, by: -1) {\n        sum = max(sum, get_max_sum(n: i))\n    }\n    return sum + n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmplsoqx0a7/tmplsoqx0a7.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b27f93dfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b27f90d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b27f90d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b27f90d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplsoqx0a7                        0x000055c968a6f4e5 <unavailable> + 5349\n5    libc.so.6                          0x00002b27f95cb460 __libc_start_main + 245\n6    tmplsoqx0a7                        0x000055c968a6f199 <unavailable> + 4505\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "tmpztcg_5z8/tmpztcg_5z8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10b7fa5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10b7c9cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10b7c9c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10b7c9b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpztcg_5z8                        0x00005560c6f5f335 <unavailable> + 4917\n5    libc.so.6                          0x00002b10b8191460 __libc_start_main + 245\n6    tmpztcg_5z8                        0x00005560c6f5efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        if n % i == 0 {\n            let sum = get_max_sum(n: n/i)\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpcddawv3h/tmpcddawv3h.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0d2c38bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0d2c082b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0d2c082988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0d2c0817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcddawv3h                        0x0000555b032f2335 <unavailable> + 4917\n5    libc.so.6                          0x00002b0d2c577460 __libc_start_main + 245\n6    tmpcddawv3h                        0x0000555b032f1fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return 1\n    }\n    \n    var sum = 0\n    sum = max(sum, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n    sum = max(sum, n)\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    \n    var cache = [Int](repeating: 0, count: n + 1)\n    cache[0] = 0\n    cache[1] = 1\n    for i in 2...n {\n        cache[i] = max(cache[i/2] + cache[i/3] + cache[i/4] + cache[i/5], i)\n    }\n    return cache[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return 1\n    }\n    \n    if n == 2 {\n        return 2\n    }\n    \n    if n == 3 {\n        return 3\n    }\n    \n    if n == 4 {\n        return 4\n    }\n    \n    if n == 5 {\n        return 5\n    }\n    \n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    \n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: 1, through: n/5, by: 1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123025,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    var sum = 0\n    sum = max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    var arr = Array(repeating: 0, count: n+1)\n    arr[0] = 0\n    arr[1] = 1\n    for i in 2...n {\n        arr[i] = max(arr[i/2] + arr[i/3] + arr[i/4] + arr[i/5], i)\n    }\n    return arr[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n+1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    dp[4] = 4\n    dp[5] = 5\n    for i in 6...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    let sum = get_max_sum(n: n / 2) + get_max_sum(n: n / 3) + get_max_sum(n: n / 4) + get_max_sum(n: n / 5)\n    return max(n, sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 || n == 1 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    let max_sum = max(a+b+c+d, n)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n / i)\n    }\n    return max(n, sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    let e = get_max_sum(n: n/6)\n    return max(a+b+c+d+e, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpj0vfdx2y/tmpj0vfdx2y.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acaedd5fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acaeda56b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acaeda56988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acaeda557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj0vfdx2y                        0x00005595103052d5 <unavailable> + 4821\n5    libc.so.6                          0x00002acaedf4b460 __libc_start_main + 245\n6    tmpj0vfdx2y                        0x0000559510304f89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    if sum < n {\n        sum = n\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(n, sum)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpqqmvfrb2/tmpqqmvfrb2.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a72d26c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a72a1db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4a72a1d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4a72a1c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqqmvfrb2                        0x000055a74b9392d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b4a72f12460 __libc_start_main + 245\n6    tmpqqmvfrb2                        0x000055a74b938f89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n < 2 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    if sum > n {\n        return sum\n    } else {\n        return n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    \n    if n == 0 {\n        return 0\n    }\n    \n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n+1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    dp[4] = 4\n    dp[5] = 5\n    for i in 6...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    for i in stride(from: n/2, through: 1, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123025,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 || n == 1 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_sum = n\n    var i = 2\n    while i <= 5 {\n        let temp = get_max_sum(n: n/i)\n        if max_sum < temp {\n            max_sum = temp\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmprs238utt/tmprs238utt.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad03982ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad039521b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad039521988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad0395207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprs238utt                        0x000055b855bc7245 <unavailable> + 4677\n5    libc.so.6                          0x00002ad039a16460 __libc_start_main + 245\n6    tmprs238utt                        0x000055b855bc6ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "tmpztcg_5z8/tmpztcg_5z8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b10b7fa5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b10b7c9cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b10b7c9c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10b7c9b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpztcg_5z8                        0x00005560c6f5f335 <unavailable> + 4917\n5    libc.so.6                          0x00002b10b8191460 __libc_start_main + 245\n6    tmpztcg_5z8                        0x00005560c6f5efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510127,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    if sum > n {\n        return sum\n    }\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = n\n    var sum1 = get_max_sum(n: n/2)\n    var sum2 = get_max_sum(n: n/3)\n    var sum3 = get_max_sum(n: n/4)\n    var sum4 = get_max_sum(n: n/5)\n    sum = max(sum, sum1 + sum2 + sum3 + sum4)\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123012,
      "stdout": "",
      "stderr": "tmpfesj_cni/tmpfesj_cni.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7cc8cd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7cc89ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7cc89cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7cc89cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfesj_cni                        0x0000558d99b5d2d5 <unavailable> + 4821\n5    libc.so.6                          0x00002b7cc8ec1460 __libc_start_main + 245\n6    tmpfesj_cni                        0x0000558d99b5cf89 <unavailable> + 3977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, through: n/5, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123013,
      "stdout": "",
      "stderr": "tmp86ckn4_8/tmp86ckn4_8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002addf2054c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002addf1d4bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002addf1d4b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002addf1d4a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp86ckn4_8                        0x000055877d537475 <unavailable> + 5237\n5    libc.so.6                          0x00002addf2240460 __libc_start_main + 245\n6    tmp86ckn4_8                        0x000055877d537129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    let max_sum = max(a + b + c + d, n)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 2 {\n        return n\n    }\n    var max_sum = n\n    var i = 2\n    while i <= 5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmp2kg875el/tmp2kg875el.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d05b5dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d05854b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9d05854988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9d058537b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2kg875el                        0x00005601d27ff245 <unavailable> + 4677\n5    libc.so.6                          0x00002b9d05d49460 __libc_start_main + 245\n6    tmp2kg875el                        0x00005601d27feef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    var temp_sum = 0\n    for i in stride(from: 2, through: 5, by: 1) {\n        temp_sum = get_max_sum(n: n/i)\n        if temp_sum > max_sum {\n            max_sum = temp_sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpfp_zpfng/tmpfp_zpfng.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8fc9f3dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8fc9c34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8fc9c34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8fc9c337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfp_zpfng                        0x000055e29bea8475 <unavailable> + 5237\n5    libc.so.6                          0x00002b8fca129460 __libc_start_main + 245\n6    tmpfp_zpfng                        0x000055e29bea8129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var result = n\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    result = max(a+b+c+d, result)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        max_sum = max(max_sum, get_max_sum(n: i) + get_max_sum(n: n-i))\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123025,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    var sum = n\n    let n2 = n / 2\n    let n3 = n / 3\n    let n4 = n / 4\n    let n5 = n / 5\n    if n2 > 0 {\n        sum += get_max_sum(n: n2)\n    }\n    if n3 > 0 {\n        sum += get_max_sum(n: n3)\n    }\n    if n4 > 0 {\n        sum += get_max_sum(n: n4)\n    }\n    if n5 > 0 {\n        sum += get_max_sum(n: n5)\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmp0dfttce2/tmp0dfttce2.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11b5e64c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11b5b5bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b11b5b5b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b11b5b5a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0dfttce2                        0x00005607da4e7245 <unavailable> + 4677\n5    libc.so.6                          0x00002b11b6050460 __libc_start_main + 245\n6    tmp0dfttce2                        0x00005607da4e6ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1665510116,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: 1, to: n, by: 1) {\n        let sum = get_max_sum(n: i/2) + get_max_sum(n: i/3) + get_max_sum(n: i/4) + get_max_sum(n: i/5)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "tmpsique3cv/tmpsique3cv.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7aa3121c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7aa2e18b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7aa2e18988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7aa2e177b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsique3cv                        0x00005646dd056455 <unavailable> + 5205\n5    libc.so.6                          0x00002b7aa330d460 __libc_start_main + 245\n6    tmpsique3cv                        0x00005646dd056109 <unavailable> + 4361\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}