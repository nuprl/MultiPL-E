{
  "name": "mbpp_623_nth_nums",
  "language": "swift",
  "prompt": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    for num in nums {\n        result.append(num ^ n)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmpl6drcpt5/tmpl6drcpt5.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3506734c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b350642bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b350642b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b350642a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl6drcpt5                        0x000055b92ee28661 <unavailable> + 5729\n5    libc.so.6                          0x00002b3506920460 __libc_start_main + 245\n6    tmpl6drcpt5                        0x000055b92ee281e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ** n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmp0qe0vqq1.swift:4:26: error: cannot find operator '**' in scope\n    return nums.map { $0 ** n }\n                         ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    var result: [Int] = []\n    for num in nums {\n        result.append(Int(pow(Double(num), Double(n))))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmppt8jf_04.swift:6:27: error: cannot find 'pow' in scope\n        result.append(Int(pow(Double(num), Double(n))))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.power(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpf6cv7g1r.swift:4:26: error: value of type 'Int' has no member 'power'\n    return nums.map { $0.power(n) }\n                      ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.power(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpf6cv7g1r.swift:4:26: error: value of type 'Int' has no member 'power'\n    return nums.map { $0.power(n) }\n                      ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    for num in nums {\n        result.append(Int(pow(Double(num), Double(n))))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpcxpjpfx4.swift:6:27: error: cannot find 'pow' in scope\n        result.append(Int(pow(Double(num), Double(n))))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { pow($0, n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmp8epgqqct.swift:4:23: error: cannot find 'pow' in scope\n    return nums.map { pow($0, n) }\n                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.power(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpf6cv7g1r.swift:4:26: error: value of type 'Int' has no member 'power'\n    return nums.map { $0.power(n) }\n                      ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ** n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmp0qe0vqq1.swift:4:26: error: cannot find operator '**' in scope\n    return nums.map { $0 ** n }\n                         ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.power(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpf6cv7g1r.swift:4:26: error: value of type 'Int' has no member 'power'\n    return nums.map { $0.power(n) }\n                      ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.power(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpf6cv7g1r.swift:4:26: error: value of type 'Int' has no member 'power'\n    return nums.map { $0.power(n) }\n                      ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.power(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpf6cv7g1r.swift:4:26: error: value of type 'Int' has no member 'power'\n    return nums.map { $0.power(n) }\n                      ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { pow($0, n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmp8epgqqct.swift:4:23: error: cannot find 'pow' in scope\n    return nums.map { pow($0, n) }\n                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.power(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpf6cv7g1r.swift:4:26: error: value of type 'Int' has no member 'power'\n    return nums.map { $0.power(n) }\n                      ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { pow($0, n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmp8epgqqct.swift:4:23: error: cannot find 'pow' in scope\n    return nums.map { pow($0, n) }\n                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    for num in nums {\n        result.append(Int(pow(Double(num), Double(n))))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpcxpjpfx4.swift:6:27: error: cannot find 'pow' in scope\n        result.append(Int(pow(Double(num), Double(n))))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ** n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmp0qe0vqq1.swift:4:26: error: cannot find operator '**' in scope\n    return nums.map { $0 ** n }\n                         ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.power(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpf6cv7g1r.swift:4:26: error: value of type 'Int' has no member 'power'\n    return nums.map { $0.power(n) }\n                      ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ** n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmp0qe0vqq1.swift:4:26: error: cannot find operator '**' in scope\n    return nums.map { $0 ** n }\n                         ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.power(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpf6cv7g1r.swift:4:26: error: value of type 'Int' has no member 'power'\n    return nums.map { $0.power(n) }\n                      ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    var result: [Int] = []\n    for num in nums {\n        result.append(Int(pow(Double(num), Double(n))))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmppt8jf_04.swift:6:27: error: cannot find 'pow' in scope\n        result.append(Int(pow(Double(num), Double(n))))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    for num in nums {\n        result.append(Int(pow(Double(num), Double(n))))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpcxpjpfx4.swift:6:27: error: cannot find 'pow' in scope\n        result.append(Int(pow(Double(num), Double(n))))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.power(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpf6cv7g1r.swift:4:26: error: value of type 'Int' has no member 'power'\n    return nums.map { $0.power(n) }\n                      ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    var result: [Int] = []\n    for num in nums {\n        result.append(Int(pow(Double(num), Double(n))))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmppt8jf_04.swift:6:27: error: cannot find 'pow' in scope\n        result.append(Int(pow(Double(num), Double(n))))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ** n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmp0qe0vqq1.swift:4:26: error: cannot find operator '**' in scope\n    return nums.map { $0 ** n }\n                         ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.power(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpf6cv7g1r.swift:4:26: error: value of type 'Int' has no member 'power'\n    return nums.map { $0.power(n) }\n                      ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    var result: [Int] = []\n    for num in nums {\n        result.append(Int(pow(Double(num), Double(n))))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmppt8jf_04.swift:6:27: error: cannot find 'pow' in scope\n        result.append(Int(pow(Double(num), Double(n))))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    var result: [Int] = []\n    for num in nums {\n        result.append(Int(pow(Double(num), Double(n))))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmppt8jf_04.swift:6:27: error: cannot find 'pow' in scope\n        result.append(Int(pow(Double(num), Double(n))))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { pow($0, n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmp8epgqqct.swift:4:23: error: cannot find 'pow' in scope\n    return nums.map { pow($0, n) }\n                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ** n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmp0qe0vqq1.swift:4:26: error: cannot find operator '**' in scope\n    return nums.map { $0 ** n }\n                         ^~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    var result: [Int] = []\n    for num in nums {\n        result.append(Int(pow(Double(num), Double(n))))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmppt8jf_04.swift:6:27: error: cannot find 'pow' in scope\n        result.append(Int(pow(Double(num), Double(n))))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.power(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpf6cv7g1r.swift:4:26: error: value of type 'Int' has no member 'power'\n    return nums.map { $0.power(n) }\n                      ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.power(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpf6cv7g1r.swift:4:26: error: value of type 'Int' has no member 'power'\n    return nums.map { $0.power(n) }\n                      ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { pow($0, n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmp8epgqqct.swift:4:23: error: cannot find 'pow' in scope\n    return nums.map { pow($0, n) }\n                      ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.power(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpf6cv7g1r.swift:4:26: error: value of type 'Int' has no member 'power'\n    return nums.map { $0.power(n) }\n                      ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0.pow(n) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "/tmp/tmpu475yjed.swift:4:26: error: value of type 'Int' has no member 'pow'\n    return nums.map { $0.pow(n) }\n                      ~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    for num in nums {\n        result.append(Int(pow(Double(num), Double(n))))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1666124136,
      "stdout": "",
      "stderr": "/tmp/tmpcxpjpfx4.swift:6:27: error: cannot find 'pow' in scope\n        result.append(Int(pow(Double(num), Double(n))))\n                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to compute the n-th power of each number in a list.\nfunc nth_nums(nums: [Int], n: Int) -> [Int] {\n    return nums.map { $0 ^ n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(nth_nums(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n: 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100])\nassert(nth_nums(nums: [10, 20, 30], n: 3) == [1000, 8000, 27000])\nassert(nth_nums(nums: [12, 15], n: 5) == [248832, 759375])",
      "timestamp": 1665509921,
      "stdout": "",
      "stderr": "tmp96u014ad/tmp96u014ad.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b267b427c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b267b11eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b267b11e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b267b11d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96u014ad                        0x00005607e8a4a4f1 <unavailable> + 5361\n5    libc.so.6                          0x00002b267b613460 __libc_start_main + 245\n6    tmp96u014ad                        0x00005607e8a4a079 <unavailable> + 4217\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}