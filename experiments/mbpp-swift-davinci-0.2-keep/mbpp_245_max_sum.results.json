{
  "name": "mbpp_245_max_sum",
  "language": "swift",
  "prompt": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(max_sum_left[i-1] + arr[i], arr[i])\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        if i == arr.count - 1 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(max_sum_right[i+1] + arr[i], arr[i])\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmp8ci2n89_/tmp8ci2n89_.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad03ba5ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad03b755b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad03b755988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad03b7547b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8ci2n89_                        0x000055fe9ffbe988 <unavailable> + 6536\n5    libc.so.6                          0x00002ad03bc4a460 __libc_start_main + 245\n6    tmp8ci2n89_                        0x000055fe9ffbe5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_till_now = 0\n    for i in 0..<arr.count {\n        max_sum_till_now = max(arr[i], max_sum_till_now + arr[i])\n        max_sum = max(max_sum, max_sum_till_now)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpv6dzxn7_/tmpv6dzxn7_.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae6d7328c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae6d701fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae6d701f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae6d701e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv6dzxn7_                        0x000055847123f608 <unavailable> + 5640\n5    libc.so.6                          0x00002ae6d7514460 __libc_start_main + 245\n6    tmpv6dzxn7_                        0x000055847123f239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmphfkkugwy/tmphfkkugwy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7401c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba73febdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba73febd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba73febc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphfkkugwy                        0x000055a3e52993e8 <unavailable> + 5096\n5    libc.so.6                          0x00002ba7403b2460 __libc_start_main + 245\n6    tmphfkkugwy                        0x000055a3e5299019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 1..<arr.count {\n        if arr[i] > arr[i-1] {\n            max_sum_left[i] = max_sum_left[i-1] + arr[i]\n        } else {\n            max_sum_left[i] = arr[i]\n        }\n    }\n    \n    for i in (0..<arr.count-1).reversed() {\n        if arr[i] > arr[i+1] {\n            max_sum_right[i] = max_sum_right[i+1] + arr[i]\n        } else {\n            max_sum_right[i] = arr[i]\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmp6mas4l3e/tmp6mas4l3e.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7189aebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b71897e2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b71897e2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b71897e17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6mas4l3e                        0x000056232c63a988 <unavailable> + 6536\n5    libc.so.6                          0x00002b7189cd7460 __libc_start_main + 245\n6    tmp6mas4l3e                        0x000056232c63a5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum = 0\n        for j in i..<arr.count {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpafspr6wf/tmpafspr6wf.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab4676bec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab4673b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab4673b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab4673b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpafspr6wf                        0x0000563e3ecf2578 <unavailable> + 5496\n5    libc.so.6                          0x00002ab4678aa460 __libc_start_main + 245\n6    tmpafspr6wf                        0x0000563e3ecf21a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        var sum = 0\n        var sum_arr = [Int]()\n        for j in i..<arr.count {\n            if sum_arr.count == 0 {\n                sum_arr.append(arr[j])\n                sum += arr[j]\n            } else {\n                if sum_arr.last! < arr[j] {\n                    sum_arr.append(arr[j])\n                    sum += arr[j]\n                } else {\n                    break\n                }\n            }\n        }\n        for j in (0..<i).reversed() {\n            if sum_arr.count == 0 {\n                sum_arr.append(arr[j])\n                sum += arr[j]\n            } else {\n                if sum_arr.last! > arr[j] {\n                    sum_arr.append(arr[j])\n                    sum += arr[j]\n                } else {\n                    break\n                }\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_sum_arr = sum_arr\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpfc2__f0a/tmpfc2__f0a.swift:57: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a871c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a86ebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a86ebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a86ebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfc2__f0a                        0x000055a371594b28 <unavailable> + 6952\n5    libc.so.6                          0x00002b9a873b2460 __libc_start_main + 245\n6    tmpfc2__f0a                        0x000055a371594759 <unavailable> + 5977\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmp1x679s_f/tmp1x679s_f.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63b069dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63b0394b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63b0394988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63b03937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1x679s_f                        0x00005609a1353578 <unavailable> + 5496\n5    libc.so.6                          0x00002b63b0889460 __libc_start_main + 245\n6    tmp1x679s_f                        0x00005609a13531a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_ending_here = 0\n    var max_sum_starting_here = 0\n    var max_sum_ending_here_reverse = 0\n    var max_sum_starting_here_reverse = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here = max(max_sum_ending_here + arr[i], arr[i])\n        max_sum_starting_here = max(max_sum_starting_here + arr[arr.count - i - 1], arr[arr.count - i - 1])\n        max_sum = max(max_sum, max_sum_ending_here)\n        max_sum = max(max_sum, max_sum_starting_here)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmp2n1r8eie/tmp2n1r8eie.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57ea908c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57ea5ffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b57ea5ff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b57ea5fe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2n1r8eie                        0x000055cb4c856608 <unavailable> + 5640\n5    libc.so.6                          0x00002b57eaaf4460 __libc_start_main + 245\n6    tmp2n1r8eie                        0x000055cb4c856239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var sum = 0\n    var sum_arr = [Int]()\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        sum_arr.append(arr[i])\n        if sum > max_sum {\n            max_sum = sum\n            max_sum_arr = sum_arr\n        }\n        if sum < 0 {\n            sum = 0\n            sum_arr = []\n        }\n        i += 1\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmp7uvznvaa/tmp7uvznvaa.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1461ebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab145ee2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab145ee2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab145ee17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7uvznvaa                        0x00005601bdf12638 <unavailable> + 5688\n5    libc.so.6                          0x00002ab1463d7460 __libc_start_main + 245\n6    tmp7uvznvaa                        0x00005601bdf12269 <unavailable> + 4713\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int](repeating: 0, count: arr.count)\n    var max_sum_arr_rev = [Int](repeating: 0, count: arr.count)\n    var max_sum_arr_rev_rev = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_arr[i] = arr[i]\n        max_sum_arr_rev[i] = arr[i]\n        max_sum_arr_rev_rev[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_arr[i] < max_sum_arr[j] + arr[i] {\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in (0..<arr.count-1).reversed() {\n        for j in (i+1..<arr.count).reversed() {\n            if arr[i] > arr[j] && max_sum_arr_rev[i] < max_sum_arr_rev[j] + arr[i] {\n                max_sum_arr_rev[i] = max_sum_arr_rev[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum_arr_rev_rev[i] = max_sum_arr_rev[arr.count - 1 - i]\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_arr[i] + max_sum_arr_rev_rev[i] - arr[i] {\n            max_sum = max_sum_arr[i] + max_sum_arr_rev_rev[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmp5t131_tk/tmp5t131_tk.swift:57: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17c8396c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17c808db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17c808d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17c808c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5t131_tk                        0x00005611a98a58f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b17c8582460 __libc_start_main + 245\n6    tmp5t131_tk                        0x00005611a98a5529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumSoFar2 = 0\n    for i in 0..<arr.count {\n        maxSumSoFar = max(maxSumSoFar + arr[i], arr[i])\n        maxSum = max(maxSum, maxSumSoFar)\n        maxSumSoFar2 = max(maxSumSoFar2 + arr[arr.count - 1 - i], arr[arr.count - 1 - i])\n        maxSum = max(maxSum, maxSumSoFar2)\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpkjeiunjc/tmpkjeiunjc.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b04bf461c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b04bf158b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b04bf158988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b04bf1577b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkjeiunjc                        0x00005602dc8ba608 <unavailable> + 5640\n5    libc.so.6                          0x00002b04bf64d460 __libc_start_main + 245\n6    tmpkjeiunjc                        0x00005602dc8ba239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        if i > 0 && arr[i] > arr[i-1] {\n            max_sum_left[i] += max_sum_left[i-1]\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        max_sum_right[i] = arr[i]\n        if i < arr.count-1 && arr[i] > arr[i+1] {\n            max_sum_right[i] += max_sum_right[i+1]\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpzlor_zs6/tmpzlor_zs6.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afcad1a9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afcacea0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afcacea0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afcace9f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzlor_zs6                        0x000055909971d988 <unavailable> + 6536\n5    libc.so.6                          0x00002afcad395460 __libc_start_main + 245\n6    tmpzlor_zs6                        0x000055909971d5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far += arr[i]\n        if max_sum_so_far < 0 {\n            max_sum_so_far = 0\n        }\n        if max_sum < max_sum_so_far {\n            max_sum = max_sum_so_far\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpqvt13vl8/tmpqvt13vl8.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0ef516ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0ef4e61b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0ef4e61988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0ef4e607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqvt13vl8                        0x00005642d8c8f578 <unavailable> + 5496\n5    libc.so.6                          0x00002b0ef5356460 __libc_start_main + 245\n6    tmpqvt13vl8                        0x00005642d8c8f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_inc = [Int](repeating: 0, count: arr.count)\n    var max_sum_dec = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_inc[i] = arr[i]\n        max_sum_dec[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_inc[i] < max_sum_inc[j] + arr[i] {\n                max_sum_inc[i] = max_sum_inc[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in (0..<arr.count-1).reversed() {\n        for j in (i+1..<arr.count).reversed() {\n            if arr[i] > arr[j] && max_sum_dec[i] < max_sum_dec[j] + arr[i] {\n                max_sum_dec[i] = max_sum_dec[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_inc[i] + max_sum_dec[i] - arr[i] {\n            max_sum = max_sum_inc[i] + max_sum_dec[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var maxSum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > maxSum {\n            maxSum = sum\n        }\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpvh42fu1p/tmpvh42fu1p.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6a27d3dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6a27a34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6a27a34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6a27a337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvh42fu1p                        0x0000564794896578 <unavailable> + 5496\n5    libc.so.6                          0x00002b6a27f29460 __libc_start_main + 245\n6    tmpvh42fu1p                        0x00005647948961a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    for i in 0..<arr.count {\n        maxSumSoFar += arr[i]\n        if maxSumSoFar < 0 {\n            maxSumSoFar = 0\n        }\n        if maxSum < maxSumSoFar {\n            maxSum = maxSumSoFar\n        }\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpgeau5n0d/tmpgeau5n0d.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8195ec8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8195bbfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8195bbf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8195bbe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgeau5n0d                        0x000055628f6e9578 <unavailable> + 5496\n5    libc.so.6                          0x00002b81960b4460 __libc_start_main + 245\n6    tmpgeau5n0d                        0x000055628f6e91a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmp2zp_9ocu/tmp2zp_9ocu.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bc183ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bc1535b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3bc1535988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3bc15347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2zp_9ocu                        0x0000558f9b9ab8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b3bc1a2a460 __libc_start_main + 245\n6    tmp2zp_9ocu                        0x0000558f9b9ab529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_so_far = 0\n    var max_sum_ending_here_so_far_index = 0\n    var max_sum_ending_here_index = 0\n    var max_sum_ending_here_index_so_far = 0\n    var max_sum_ending_here_index_so_far_index = 0\n    var max_sum_ending_here_index_so_far_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "/tmp/tmpmydxaq0c.swift:23:9: error: type annotation missing in pattern\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index_index\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmptffkc__7/tmptffkc__7.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cabcccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cab9c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cab9c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cab9c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptffkc__7                        0x000055b4b2b7d988 <unavailable> + 6536\n5    libc.so.6                          0x00002b6cabeb8460 __libc_start_main + 245\n6    tmptffkc__7                        0x000055b4b2b7d5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far = max(arr[i], max_sum_so_far + arr[i])\n        max_sum = max(max_sum, max_sum_so_far)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp247xyzrk/tmp247xyzrk.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba207710c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba207407b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba207407988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba2074067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp247xyzrk                        0x000055c03c86d608 <unavailable> + 5640\n5    libc.so.6                          0x00002ba2078fc460 __libc_start_main + 245\n6    tmp247xyzrk                        0x000055c03c86d239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    \n    for i in 0..<arr.count {\n        var sum = 0\n        var sum_arr = [Int]()\n        var sum_arr_rev = [Int]()\n        var sum_arr_rev_rev = [Int]()\n        var sum_arr_rev_rev_rev = [Int]()\n        \n        for j in i..<arr.count {\n            sum += arr[j]\n            sum_arr.append(arr[j])\n            sum_arr_rev.append(arr[j])\n            sum_arr_rev_rev.append(arr[j])\n            sum_arr_rev_rev_rev.append(arr[j])\n            \n            if sum > max_sum {\n                max_sum = sum\n                max_sum_arr = sum_arr\n                max_sum_arr_rev = sum_arr_rev\n                max_sum_arr_rev_rev = sum_arr_rev_rev\n                max_sum_arr_rev_rev_rev = sum_arr_rev_rev_rev\n            }\n        }\n    }\n    \n    max_sum_arr_rev.reverse()\n    max_sum_arr_rev_rev = max_sum_arr_rev.reversed()\n    max_sum_arr_rev_rev_rev = max_sum_arr_rev_rev.reversed()\n    \n    print(max_sum_arr)\n    print(max_sum_arr_rev)\n    print(max_sum_arr_rev_rev)\n    print(max_sum_arr_rev_rev_rev)\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpnqrcjm8j/tmpnqrcjm8j.swift:59: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba105303c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba104ffab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba104ffa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba104ff97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnqrcjm8j                        0x0000556d5d862908 <unavailable> + 6408\n5    libc.so.6                          0x00002ba1054ef460 __libc_start_main + 245\n6    tmpnqrcjm8j                        0x0000556d5d862539 <unavailable> + 5433\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmphfkkugwy/tmphfkkugwy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7401c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba73febdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba73febd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba73febc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphfkkugwy                        0x000055a3e52993e8 <unavailable> + 5096\n5    libc.so.6                          0x00002ba7403b2460 __libc_start_main + 245\n6    tmphfkkugwy                        0x000055a3e5299019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1], arr[i])\n    }\n    for i in (0..<arr.count - 1).reversed() {\n        dec[i] = max(dec[i + 1], arr[i])\n    }\n    var sum = 0\n    for i in 0..<arr.count {\n        sum = max(sum, inc[i] + dec[i] - arr[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpv3yi7ams/tmpv3yi7ams.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b311d3e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b311d0d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b311d0d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b311d0d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv3yi7ams                        0x000055927296a988 <unavailable> + 6536\n5    libc.so.6                          0x00002b311d5cc460 __libc_start_main + 245\n6    tmpv3yi7ams                        0x000055927296a5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_ending_here = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum = max(max_sum, max_sum_ending_here)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpadxpi3he/tmpadxpi3he.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac4cc651c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac4cc348b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac4cc348988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac4cc3477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpadxpi3he                        0x0000559e06111608 <unavailable> + 5640\n5    libc.so.6                          0x00002ac4cc83d460 __libc_start_main + 245\n6    tmpadxpi3he                        0x0000559e06111239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumEndingHere = 0\n    var maxSumStartingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere = max(maxSumEndingHere + arr[i], arr[i])\n        maxSum = max(maxSum, maxSumEndingHere)\n    }\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        maxSumStartingHere = max(maxSumStartingHere + arr[i], arr[i])\n        maxSum = max(maxSum, maxSumStartingHere)\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp1vze_bxq/tmp1vze_bxq.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fd6784c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3fd647bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3fd647b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3fd647a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1vze_bxq                        0x000055e9ed564828 <unavailable> + 6184\n5    libc.so.6                          0x00002b3fd6970460 __libc_start_main + 245\n6    tmp1vze_bxq                        0x000055e9ed564459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    var max_so_far = 0\n    for i in 0..<arr.count {\n        max_so_far = max(max_so_far + arr[i], arr[i])\n        max_sum_left[i] = max_so_far\n    }\n    \n    max_so_far = 0\n    for i in (0..<arr.count).reversed() {\n        max_so_far = max(max_so_far + arr[i], arr[i])\n        max_sum_right[i] = max_so_far\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpsknrjrq1/tmpsknrjrq1.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2526662c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2526359b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2526359988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b25263587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsknrjrq1                        0x0000561fde326988 <unavailable> + 6536\n5    libc.so.6                          0x00002b252684e460 __libc_start_main + 245\n6    tmpsknrjrq1                        0x0000561fde3265b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        inc[i] = max(arr[i], inc[i - 1] + arr[i])\n    }\n    for i in (0..<arr.count - 1).reversed() {\n        dec[i] = max(arr[i], dec[i + 1] + arr[i])\n    }\n    var maxSum = inc[0] + dec[0] - arr[0]\n    for i in 1..<arr.count {\n        maxSum = max(maxSum, inc[i] + dec[i] - arr[i])\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpamxi8q30/tmpamxi8q30.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af50594ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af505641b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af505641988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af5056407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpamxi8q30                        0x000055ea5840b988 <unavailable> + 6536\n5    libc.so.6                          0x00002af505b36460 __libc_start_main + 245\n6    tmpamxi8q30                        0x000055ea5840b5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1], arr[i])\n    }\n    for i in (0..<arr.count - 1).reversed() {\n        dec[i] = max(dec[i + 1], arr[i])\n    }\n    var sum = 0\n    for i in 0..<arr.count {\n        sum = max(sum, inc[i] + dec[i] - arr[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpv3yi7ams/tmpv3yi7ams.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b311d3e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b311d0d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b311d0d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b311d0d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv3yi7ams                        0x000055927296a988 <unavailable> + 6536\n5    libc.so.6                          0x00002b311d5cc460 __libc_start_main + 245\n6    tmpv3yi7ams                        0x000055927296a5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_so_far_rev = 0\n    \n    for i in 0..<arr.count {\n        max_sum_so_far += arr[i]\n        if max_sum_so_far < 0 {\n            max_sum_so_far = 0\n        }\n        if max_sum_so_far > max_sum {\n            max_sum = max_sum_so_far\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        max_sum_so_far_rev += arr[i]\n        if max_sum_so_far_rev < 0 {\n            max_sum_so_far_rev = 0\n        }\n        if max_sum_so_far_rev > max_sum {\n            max_sum = max_sum_so_far_rev\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpsxmqw2n8/tmpsxmqw2n8.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5dd3246c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5dd2f3db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5dd2f3d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5dd2f3c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsxmqw2n8                        0x000055a6ebe37838 <unavailable> + 6200\n5    libc.so.6                          0x00002b5dd3432460 __libc_start_main + 245\n6    tmpsxmqw2n8                        0x000055a6ebe37469 <unavailable> + 5225\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far += arr[i]\n        if max_sum_so_far < 0 {\n            max_sum_so_far = 0\n        }\n        if max_sum < max_sum_so_far {\n            max_sum = max_sum_so_far\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpqvt13vl8/tmpqvt13vl8.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0ef516ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0ef4e61b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0ef4e61988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0ef4e607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqvt13vl8                        0x00005642d8c8f578 <unavailable> + 5496\n5    libc.so.6                          0x00002b0ef5356460 __libc_start_main + 245\n6    tmpqvt13vl8                        0x00005642d8c8f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        for j in i..<arr.count {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpe1t32m9w/tmpe1t32m9w.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac28f8e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac28f5dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac28f5db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac28f5da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe1t32m9w                        0x000055e92438a578 <unavailable> + 5496\n5    libc.so.6                          0x00002ac28fad0460 __libc_start_main + 245\n6    tmpe1t32m9w                        0x000055e92438a1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        max_sum_left[i] = max(arr[i], max_sum_left[i - 1] + arr[i])\n    }\n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(arr[i], max_sum_right[i + 1] + arr[i])\n    }\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp1x__z7wb/tmp1x__z7wb.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aec1f667c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aec1f35eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aec1f35e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aec1f35d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1x__z7wb                        0x00005650a2ecb988 <unavailable> + 6536\n5    libc.so.6                          0x00002aec1f853460 __libc_start_main + 245\n6    tmp1x__z7wb                        0x00005650a2ecb5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int](repeating: 0, count: arr.count)\n    var max_sum_arr_rev = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_arr[0] = arr[0]\n    max_sum_arr_rev[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_arr[i] = max(max_sum_arr[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_arr_rev[i] = max(max_sum_arr_rev[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_arr[i] + max_sum_arr_rev[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp6ea_xsjo/tmp6ea_xsjo.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7d20c1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7d1db8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7d1db8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7d1db77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6ea_xsjo                        0x0000564afecca988 <unavailable> + 6536\n5    libc.so.6                          0x00002ad7d22ad460 __libc_start_main + 245\n6    tmp6ea_xsjo                        0x0000564afecca5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_inc = [Int](repeating: 0, count: arr.count)\n    var max_sum_dec = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_inc[0] = arr[0]\n    max_sum_dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_inc[i] = max(arr[i], arr[i] + max_sum_inc[i - 1])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_dec[i] = max(arr[i], arr[i] + max_sum_dec[i + 1])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_inc[i] + max_sum_dec[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpww0zmplu/tmpww0zmplu.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4830fe9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4830ce0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4830ce0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4830cdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpww0zmplu                        0x00005622f674e988 <unavailable> + 6536\n5    libc.so.6                          0x00002b48311d5460 __libc_start_main + 245\n6    tmpww0zmplu                        0x00005622f674e5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        var sum = 0\n        var sum_arr = [Int]()\n        for j in i..<arr.count {\n            if sum_arr.count == 0 {\n                sum_arr.append(arr[j])\n                sum += arr[j]\n            } else {\n                if arr[j] > sum_arr.last! {\n                    sum_arr.append(arr[j])\n                    sum += arr[j]\n                } else if arr[j] < sum_arr.last! {\n                    sum_arr.append(arr[j])\n                    sum += arr[j]\n                    break\n                }\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_sum_arr = sum_arr\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpgvl84hfm/tmpgvl84hfm.swift:46: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab33bad2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab33b7c9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab33b7c9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab33b7c87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgvl84hfm                        0x000055f203e39858 <unavailable> + 6232\n5    libc.so.6                          0x00002ab33bcbe460 __libc_start_main + 245\n6    tmpgvl84hfm                        0x000055f203e39489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    \n    // max sum from right\n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(arr[i], max_sum_right[i - 1] + arr[i])\n        }\n    }\n    \n    // max sum from left\n    for i in (0..<arr.count).reversed() {\n        if i == arr.count - 1 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(arr[i], max_sum_left[i + 1] + arr[i])\n        }\n    }\n    \n    // max sum\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_right[i] + max_sum_left[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp39ryfgex/tmp39ryfgex.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b72cac62c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b72ca959b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b72ca959988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b72ca9587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp39ryfgex                        0x00005627362d8988 <unavailable> + 6536\n5    libc.so.6                          0x00002b72cae4e460 __libc_start_main + 245\n6    tmp39ryfgex                        0x00005627362d85b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmp2zp_9ocu/tmp2zp_9ocu.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bc183ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bc1535b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3bc1535988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3bc15347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2zp_9ocu                        0x0000558f9b9ab8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b3bc1a2a460 __libc_start_main + 245\n6    tmp2zp_9ocu                        0x0000558f9b9ab529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    \n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(dec[i + 1], arr[i])\n    }\n    \n    var sum = 0\n    for i in 0..<arr.count {\n        sum = max(sum, inc[i] + dec[i])\n    }\n    \n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpca7r0447/tmpca7r0447.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b026aaa8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b026a79fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b026a79f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b026a79e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpca7r0447                        0x000055f4ddc648f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b026ac94460 __libc_start_main + 245\n6    tmpca7r0447                        0x000055f4ddc64529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_so_far = 0\n    var max_sum_ending_here_so_far_index = 0\n    var max_sum_ending_here_index = 0\n    var max_sum_ending_here_so_far_index_temp = 0\n    var max_sum_ending_here_index_temp = 0\n    var max_sum_ending_here_so_far_temp = 0\n    var max_sum_ending_here_temp = 0\n    var max_sum_ending_here_so_far_temp_index = 0\n    var max_sum_ending_here_temp_index = 0\n    var max_sum_ending_here_so_far_temp_index_temp = 0\n    var max_sum_ending_here_temp_index_temp = 0\n    var max_sum_ending_here_so_far_temp_temp = 0\n    var max_sum_ending_here_temp_temp = 0\n    var max_sum_ending_here_so_far_temp_temp_index = 0\n    var max_sum_ending_here_temp_temp_index = 0\n    var max_sum_ending_here_so_far_temp_temp_index_temp = 0\n    var max_sum_ending_here_temp_temp_index_temp = 0\n    var max_sum_ending_here_so_far_temp_temp_temp = 0\n    var max_sum_ending_here_temp_temp_temp = 0\n    var max_sum_ending_here_so_far_temp_temp_temp_index = 0\n    var max_sum_ending_here_temp_temp_temp_index = 0\n    var max_sum_ending_here_so_far_temp_temp_temp_index_temp = 0\n    var max_sum_ending_here_temp_temp_temp_index_temp = 0\n    var max_sum_ending_here_so_far_temp_temp_temp_temp = 0\n    var max_sum_ending_here_temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "/tmp/tmpww2m9g2n.swift:31:9: error: type annotation missing in pattern\n    var max_sum_ending_here_temp\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere = maxSumEndingHere + arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumSoFar < maxSumEndingHere {\n            maxSumSoFar = maxSumEndingHere\n        }\n    }\n    maxSum = maxSumSoFar\n    maxSumSoFar = 0\n    maxSumEndingHere = 0\n    for i in (0..<arr.count).reversed() {\n        maxSumEndingHere = maxSumEndingHere + arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumSoFar < maxSumEndingHere {\n            maxSumSoFar = maxSumEndingHere\n        }\n    }\n    maxSum = max(maxSum, maxSumSoFar)\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpe0byitzc/tmpe0byitzc.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9ea8ea8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9ea8b9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9ea8b9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9ea8b9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe0byitzc                        0x00005568773918c8 <unavailable> + 6344\n5    libc.so.6                          0x00002b9ea9094460 __libc_start_main + 245\n6    tmpe0byitzc                        0x00005568773914f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_inc = [Int](repeating: 0, count: arr.count)\n    var max_sum_dec = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_inc[0] = arr[0]\n    max_sum_dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_inc[i] = max(max_sum_inc[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_dec[i] = max(max_sum_dec[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpmgiz3ez7/tmpmgiz3ez7.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aacd4162c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aacd3e59b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aacd3e59988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aacd3e587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmgiz3ez7                        0x000056268f040988 <unavailable> + 6536\n5    libc.so.6                          0x00002aacd434e460 __libc_start_main + 245\n6    tmpmgiz3ez7                        0x000056268f0405b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count-2, through: 0, by: -1) {\n        for j in stride(from: arr.count-1, through: i, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        } else if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpy3uzxats/tmpy3uzxats.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b15e5ef7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b15e5beeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b15e5bee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b15e5bed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy3uzxats                        0x0000557f94bd1578 <unavailable> + 5496\n5    libc.so.6                          0x00002b15e60e3460 __libc_start_main + 245\n6    tmpy3uzxats                        0x0000557f94bd11a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmphfkkugwy/tmphfkkugwy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7401c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba73febdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba73febd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba73febc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphfkkugwy                        0x000055a3e52993e8 <unavailable> + 5096\n5    libc.so.6                          0x00002ba7403b2460 __libc_start_main + 245\n6    tmphfkkugwy                        0x000055a3e5299019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum = 0\n        for j in i..<arr.count {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpafspr6wf/tmpafspr6wf.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab4676bec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab4673b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab4673b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab4673b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpafspr6wf                        0x0000563e3ecf2578 <unavailable> + 5496\n5    libc.so.6                          0x00002ab4678aa460 __libc_start_main + 245\n6    tmpafspr6wf                        0x0000563e3ecf21a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    var inc = true\n    while i < j {\n        if arr[i] < arr[i + 1] {\n            sum += arr[i]\n            i += 1\n        } else {\n            inc = false\n            sum += arr[i]\n            break\n        }\n    }\n    while j > i {\n        if arr[j] < arr[j - 1] {\n            sum += arr[j]\n            j -= 1\n        } else {\n            sum += arr[j]\n            break\n        }\n    }\n    if inc {\n        sum += arr[i]\n    }\n    max_sum = sum\n    sum = 0\n    i = 0\n    j = arr.count - 1\n    inc = false\n    while i < j {\n        if arr[i] < arr[i + 1] {\n            sum += arr[i]\n            i += 1\n        } else {\n            inc = true\n            sum += arr[i]\n            break\n        }\n    }\n    while j > i {\n        if arr[j] < arr[j - 1] {\n            sum += arr[j]\n            j -= 1\n        } else {\n            sum += arr[j]\n            break\n        }\n    }\n    if inc {\n        sum += arr[i]\n    }\n    if sum > max_sum {\n        max_sum = sum\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpoce3rnmq/tmpoce3rnmq.swift:77: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad94c394c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad94c08bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad94c08b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad94c08a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoce3rnmq                        0x00005559e2e7e3e8 <unavailable> + 5096\n5    libc.so.6                          0x00002ad94c580460 __libc_start_main + 245\n6    tmpoce3rnmq                        0x00005559e2e7e019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        var sum = 0\n        var sum_arr = [Int]()\n        for j in i..<arr.count {\n            sum += arr[j]\n            sum_arr.append(arr[j])\n            if sum > max_sum {\n                max_sum = sum\n                max_sum_arr = sum_arr\n            }\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmprbk1mb6r/tmprbk1mb6r.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14144c0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14141b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14141b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14141b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprbk1mb6r                        0x000055bbd03827c8 <unavailable> + 6088\n5    libc.so.6                          0x00002b14146ac460 __libc_start_main + 245\n6    tmprbk1mb6r                        0x000055bbd03823f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    \n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    }\n    \n    var maxSum = Int.min\n    for i in 0..<arr.count {\n        maxSum = max(maxSum, inc[i] + dec[i] - arr[i])\n    }\n    \n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpbytm27oo/tmpbytm27oo.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae068089c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae067d80b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae067d80988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae067d7f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbytm27oo                        0x000055627eca88f8 <unavailable> + 6392\n5    libc.so.6                          0x00002ae068275460 __libc_start_main + 245\n6    tmpbytm27oo                        0x000055627eca8529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumEndingHere = 0\n    var maxSumStartingHere = 0\n    var maxSumStartingHereEndingHere = 0\n    \n    for i in 0..<arr.count {\n        maxSumEndingHere = max(maxSumEndingHere + arr[i], arr[i])\n        maxSum = max(maxSum, maxSumEndingHere)\n        \n        maxSumStartingHereEndingHere = max(maxSumStartingHereEndingHere + arr[i], maxSumStartingHere + arr[i])\n        maxSumStartingHere = max(maxSumStartingHere + arr[i], arr[i])\n    }\n    \n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp8486km4_/tmp8486km4_.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1152987c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b115267eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b115267e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b115267d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8486km4_                        0x0000556270d85608 <unavailable> + 5640\n5    libc.so.6                          0x00002b1152b73460 __libc_start_main + 245\n6    tmp8486km4_                        0x0000556270d85239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_element = 0\n    for i in 0..<arr.count {\n        max_sum_so_far += arr[i]\n        if max_sum_so_far < 0 {\n            max_sum_so_far = 0\n        }\n        if max_sum_so_far > max_sum {\n            max_sum = max_sum_so_far\n            max_element = arr[i]\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpjh176fii/tmpjh176fii.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6a8122ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6a80f21b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6a80f21988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6a80f207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjh176fii                        0x000055ea5f9a1578 <unavailable> + 5496\n5    libc.so.6                          0x00002b6a81416460 __libc_start_main + 245\n6    tmpjh176fii                        0x000055ea5f9a11a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count-1] = arr[arr.count-1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i-1], arr[i])\n    }\n    \n    for i in stride(from: arr.count-2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i+1], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp3owd6nv2/tmp3owd6nv2.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ada19a1ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ada19711b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ada19711988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ada197107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3owd6nv2                        0x000055e0931028f8 <unavailable> + 6392\n5    libc.so.6                          0x00002ada19c06460 __libc_start_main + 245\n6    tmp3owd6nv2                        0x000055e093102529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere = max(arr[i], maxSumEndingHere + arr[i])\n        maxSum = max(maxSum, maxSumEndingHere)\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp9vca4nx5/tmp9vca4nx5.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9f8f606c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9f8f2fdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9f8f2fd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9f8f2fc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9vca4nx5                        0x000055e9954b4608 <unavailable> + 5640\n5    libc.so.6                          0x00002b9f8f7f2460 __libc_start_main + 245\n6    tmp9vca4nx5                        0x000055e9954b4239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmphfkkugwy/tmphfkkugwy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7401c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba73febdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba73febd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba73febc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphfkkugwy                        0x000055a3e52993e8 <unavailable> + 5096\n5    libc.so.6                          0x00002ba7403b2460 __libc_start_main + 245\n6    tmphfkkugwy                        0x000055a3e5299019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // max sum of increasing subsequence from left to right\n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        for j in 0..<i {\n            if arr[j] < arr[i] {\n                max_sum_left[i] = max(max_sum_left[i], max_sum_left[j] + arr[i])\n            }\n        }\n    }\n    \n    // max sum of increasing subsequence from right to left\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        max_sum_right[i] = arr[i]\n        for j in stride(from: arr.count - 1, through: i, by: -1) {\n            if arr[j] < arr[i] {\n                max_sum_right[i] = max(max_sum_right[i], max_sum_right[j] + arr[i])\n            }\n        }\n    }\n    \n    // max sum of bitonic subsequence\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        if i == arr.count - 1 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpe1pfe_rw/tmpe1pfe_rw.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8c8ff01c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8c8fbf8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8c8fbf8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8c8fbf77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe1pfe_rw                        0x000055d0a5d19988 <unavailable> + 6536\n5    libc.so.6                          0x00002b8c900ed460 __libc_start_main + 245\n6    tmpe1pfe_rw                        0x000055d0a5d195b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    \n    for i in 0..<arr.count {\n        max_sum_arr.append(arr[i])\n        max_sum_arr_rev.append(arr[i])\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_arr[i] < max_sum_arr[j] + arr[i] {\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_arr_rev[i] < max_sum_arr_rev[j] + arr[i] {\n                max_sum_arr_rev[i] = max_sum_arr_rev[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_arr[i] + max_sum_arr_rev[i] - arr[i] {\n            max_sum = max_sum_arr[i] + max_sum_arr_rev[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        sum = sum + arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        max_sum_left[i] = max(max_sum_left[i-1], sum)\n    }\n    \n    sum = 0\n    for i in stride(from: arr.count-1, through: 0, by: -1) {\n        sum = sum + arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        max_sum_right[i] = max(max_sum_right[i+1], sum)\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad6cd12dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6cce24561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad6cce24286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad6cce2413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad6cce23bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ad6ccc24e83 <unavailable> + 188035\n6    tmp_hg9ndkb                        0x0000563f63d1cd98 <unavailable> + 7576\n7    tmp_hg9ndkb                        0x0000563f63d1c878 <unavailable> + 6264\n8    libc.so.6                          0x00002ad6cd319460 __libc_start_main + 245\n9    tmp_hg9ndkb                        0x0000563f63d1c529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere += arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumSoFar < maxSumEndingHere {\n            maxSumSoFar = maxSumEndingHere\n        }\n    }\n    maxSum = maxSumSoFar\n    maxSumSoFar = 0\n    maxSumEndingHere = 0\n    for i in (0..<arr.count).reversed() {\n        maxSumEndingHere += arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumSoFar < maxSumEndingHere {\n            maxSumSoFar = maxSumEndingHere\n        }\n    }\n    maxSum += maxSumSoFar\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpty6f9fej/tmpty6f9fej.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b16e7f5bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b16e7c52b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b16e7c52988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b16e7c517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpty6f9fej                        0x0000557c22556838 <unavailable> + 6200\n5    libc.so.6                          0x00002b16e8147460 __libc_start_main + 245\n6    tmpty6f9fej                        0x0000557c22556469 <unavailable> + 5225\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far += arr[i]\n        if max_sum_so_far < 0 {\n            max_sum_so_far = 0\n        }\n        if max_sum < max_sum_so_far {\n            max_sum = max_sum_so_far\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpqvt13vl8/tmpqvt13vl8.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0ef516ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0ef4e61b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0ef4e61988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0ef4e607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqvt13vl8                        0x00005642d8c8f578 <unavailable> + 5496\n5    libc.so.6                          0x00002b0ef5356460 __libc_start_main + 245\n6    tmpqvt13vl8                        0x00005642d8c8f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmphfkkugwy/tmphfkkugwy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7401c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba73febdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba73febd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba73febc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphfkkugwy                        0x000055a3e52993e8 <unavailable> + 5096\n5    libc.so.6                          0x00002ba7403b2460 __libc_start_main + 245\n6    tmphfkkugwy                        0x000055a3e5299019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far = max(max_sum_so_far + arr[i], arr[i])\n        max_sum = max(max_sum, max_sum_so_far)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpayd4pima/tmpayd4pima.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a6e6c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a6e3bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a6e3bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a6e3ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpayd4pima                        0x000055978eecd608 <unavailable> + 5640\n5    libc.so.6                          0x00002b9a6e8b0460 __libc_start_main + 245\n6    tmpayd4pima                        0x000055978eecd239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        var sum = 0\n        var sum_arr = [Int]()\n        for j in i..<arr.count {\n            sum += arr[j]\n            sum_arr.append(arr[j])\n            if sum > max_sum {\n                max_sum = sum\n                max_sum_arr = sum_arr\n            }\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmprbk1mb6r/tmprbk1mb6r.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14144c0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14141b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14141b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14141b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprbk1mb6r                        0x000055bbd03827c8 <unavailable> + 6088\n5    libc.so.6                          0x00002b14146ac460 __libc_start_main + 245\n6    tmprbk1mb6r                        0x000055bbd03823f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmp1x679s_f/tmp1x679s_f.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63b069dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63b0394b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63b0394988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63b03937b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1x679s_f                        0x00005609a1353578 <unavailable> + 5496\n5    libc.so.6                          0x00002b63b0889460 __libc_start_main + 245\n6    tmp1x679s_f                        0x00005609a13531a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    var max_sum_left_right = [Int](repeating: 0, count: arr.count)\n    \n    // max sum from left to right\n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        for j in 0..<i {\n            if arr[j] < arr[i] {\n                max_sum_left[i] = max(max_sum_left[i], max_sum_left[j] + arr[i])\n            }\n        }\n    }\n    \n    // max sum from right to left\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        max_sum_right[i] = arr[i]\n        for j in stride(from: arr.count - 1, through: i, by: -1) {\n            if arr[j] < arr[i] {\n                max_sum_right[i] = max(max_sum_right[i], max_sum_right[j] + arr[i])\n            }\n        }\n    }\n    \n    // max sum from left to right and right to left\n    for i in 0..<arr.count {\n        max_sum_left_right[i] = max_sum_left[i] + max_sum_right[i] - arr[i]\n    }\n    \n    max_sum = max_sum_left_right.max()!\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpg9_enm5w/tmpg9_enm5w.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8abe87fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8abe576b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8abe576988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8abe5757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg9_enm5w                        0x000055712d9b78f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b8abea6b460 __libc_start_main + 245\n6    tmpg9_enm5w                        0x000055712d9b7529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_so_far = 0\n    var max_sum_ending_here_so_far_index = 0\n    var max_sum_ending_here_index = 0\n    var max_sum_ending_here_index_so_far = 0\n    var max_sum_ending_here_index_so_far_index = 0\n    var max_sum_ending_here_index_so_far_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "/tmp/tmpmydxaq0c.swift:23:9: error: type annotation missing in pattern\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index_index\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        max_sum = max(max_sum, sum)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmptmmgm88k/tmptmmgm88k.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8b7ef0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8b7ec05b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8b7ec05988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8b7ec047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptmmgm88k                        0x0000556505c29608 <unavailable> + 5640\n5    libc.so.6                          0x00002b8b7f0fa460 __libc_start_main + 245\n6    tmptmmgm88k                        0x0000556505c29239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else {\n            sum += arr[j]\n            j -= 1\n        }\n        max_sum = max(max_sum, sum)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp6_fbhe3m/tmp6_fbhe3m.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6449b9bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6449892b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6449892988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b64498917b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6_fbhe3m                        0x000055c143997478 <unavailable> + 5240\n5    libc.so.6                          0x00002b6449d87460 __libc_start_main + 245\n6    tmp6_fbhe3m                        0x000055c1439970a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        sum = max(arr[i], sum + arr[i])\n        max_sum = max(max_sum, sum)\n        max_sum_left[i] = max_sum\n    }\n    \n    sum = 0\n    max_sum = 0\n    for i in (0..<arr.count).reversed() {\n        sum = max(arr[i], sum + arr[i])\n        max_sum = max(max_sum, sum)\n        max_sum_right[i] = max_sum\n    }\n    \n    max_sum = 0\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpglkmbird/tmpglkmbird.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb71a12c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb71709b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb71709988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb717087b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpglkmbird                        0x000056367fd9a988 <unavailable> + 6536\n5    libc.so.6                          0x00002aeb71bfe460 __libc_start_main + 245\n6    tmpglkmbird                        0x000056367fd9a5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_ending_here = 0\n    var min_ending_here = 0\n    var min_sum_so_far = 0\n    var min_sum = 0\n    for i in 0..<arr.count {\n        max_ending_here += arr[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_sum_so_far < max_ending_here {\n            max_sum_so_far = max_ending_here\n        }\n        min_ending_here += arr[arr.count - 1 - i]\n        if min_ending_here > 0 {\n            min_ending_here = 0\n        }\n        if min_sum_so_far > min_ending_here {\n            min_sum_so_far = min_ending_here\n        }\n    }\n    min_sum = min_sum_so_far\n    max_sum = max_sum_so_far\n    for i in 0..<arr.count - 1 {\n        max_sum_so_far = max_sum_so_far - arr[i]\n        min_sum_so_far = min_sum_so_far + arr[arr.count - 2 - i]\n        if max_sum < max_sum_so_far + min_sum_so_far {\n            max_sum = max_sum_so_far + min_sum_so_far\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp8x83jac2/tmp8x83jac2.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5d3901ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5d38d15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5d38d15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5d38d147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8x83jac2                        0x0000560698702578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5d3920a460 __libc_start_main + 245\n6    tmp8x83jac2                        0x00005606987021a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_till_now = 0\n    for i in 0..<arr.count {\n        max_sum_till_now += arr[i]\n        if max_sum_till_now < 0 {\n            max_sum_till_now = 0\n        }\n        if max_sum < max_sum_till_now {\n            max_sum = max_sum_till_now\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp9t_eilpj/tmp9t_eilpj.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3a764abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3a761a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3a761a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3a761a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9t_eilpj                        0x000055ebec38a578 <unavailable> + 5496\n5    libc.so.6                          0x00002b3a76697460 __libc_start_main + 245\n6    tmp9t_eilpj                        0x000055ebec38a1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    \n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(arr[i], inc[i - 1] + arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(arr[i], dec[i + 1] + arr[i])\n    }\n    \n    var max_sum = 0\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpnqzwsngu/tmpnqzwsngu.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afb3d97fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afb3d676b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afb3d676988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afb3d6757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnqzwsngu                        0x000055af8b1058f8 <unavailable> + 6392\n5    libc.so.6                          0x00002afb3db6b460 __libc_start_main + 245\n6    tmpnqzwsngu                        0x000055af8b105529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere += arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumSoFar < maxSumEndingHere {\n            maxSumSoFar = maxSumEndingHere\n        }\n    }\n    maxSum = maxSumSoFar\n    maxSumSoFar = 0\n    maxSumEndingHere = 0\n    for i in (0..<arr.count).reversed() {\n        maxSumEndingHere += arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumSoFar < maxSumEndingHere {\n            maxSumSoFar = maxSumEndingHere\n        }\n    }\n    maxSum += maxSumSoFar\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpty6f9fej/tmpty6f9fej.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b16e7f5bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b16e7c52b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b16e7c52988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b16e7c517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpty6f9fej                        0x0000557c22556838 <unavailable> + 6200\n5    libc.so.6                          0x00002b16e8147460 __libc_start_main + 245\n6    tmpty6f9fej                        0x0000557c22556469 <unavailable> + 5225\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumLeft = [Int](repeating: 0, count: arr.count)\n    var maxSumRight = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        maxSumLeft[i] = arr[i]\n        maxSumRight[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && maxSumLeft[i] < maxSumLeft[j] + arr[i] {\n                maxSumLeft[i] = maxSumLeft[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && maxSumRight[i] < maxSumRight[j] + arr[i] {\n                maxSumRight[i] = maxSumRight[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if maxSum < maxSumLeft[i] + maxSumRight[i] - arr[i] {\n            maxSum = maxSumLeft[i] + maxSumRight[i] - arr[i]\n        }\n    }\n    \n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumLeft = [Int](repeating: 0, count: arr.count)\n    var maxSumRight = [Int](repeating: 0, count: arr.count)\n    \n    // find max sum from left to right\n    for i in 0..<arr.count {\n        if i == 0 {\n            maxSumLeft[i] = arr[i]\n        } else {\n            maxSumLeft[i] = max(maxSumLeft[i-1], arr[i])\n        }\n    }\n    \n    // find max sum from right to left\n    for i in (0..<arr.count).reversed() {\n        if i == arr.count - 1 {\n            maxSumRight[i] = arr[i]\n        } else {\n            maxSumRight[i] = max(maxSumRight[i+1], arr[i])\n        }\n    }\n    \n    // find max sum\n    for i in 0..<arr.count {\n        maxSum = max(maxSum, maxSumLeft[i] + maxSumRight[i] - arr[i])\n    }\n    \n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp8517ytos/tmp8517ytos.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b12fab6bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b12fa862b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b12fa862988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b12fa8617b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8517ytos                        0x000055d9fcbc2988 <unavailable> + 6536\n5    libc.so.6                          0x00002b12fad57460 __libc_start_main + 245\n6    tmp8517ytos                        0x000055d9fcbc25b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[j] < arr[i] {\n                max_sum_left[i] = max(max_sum_left[i], max_sum_left[j] + arr[i])\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i, by: -1) {\n            if arr[j] < arr[i] {\n                max_sum_right[i] = max(max_sum_right[i], max_sum_right[j] + arr[i])\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        sum += arr[i]\n        max_sum_left[i] = sum\n    }\n    \n    sum = 0\n    for i in (0..<arr.count).reversed() {\n        sum += arr[i]\n        max_sum_right[i] = sum\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpbc7nw1km/tmpbc7nw1km.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af3b9616c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af3b930db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af3b930d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af3b930c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbc7nw1km                        0x000055b03af05988 <unavailable> + 6536\n5    libc.so.6                          0x00002af3b9802460 __libc_start_main + 245\n6    tmpbc7nw1km                        0x000055b03af055b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_so_far = 0\n    var max_sum_ending_here_so_far_index = 0\n    var max_sum_ending_here_index = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n            max_sum_ending_here_index = i + 1\n        } else if max_sum_ending_here > max_sum_ending_here_so_far {\n            max_sum_ending_here_so_far = max_sum_ending_here\n            max_sum_ending_here_so_far_index = max_sum_ending_here_index\n        }\n    }\n    max_sum_ending_here = 0\n    max_sum_ending_here_index = arr.count - 1\n    for i in (0..<arr.count).reversed() {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n            max_sum_ending_here_index = i - 1\n        } else if max_sum_ending_here > max_sum_ending_here_so_far {\n            max_sum_ending_here_so_far = max_sum_ending_here\n            max_sum_ending_here_so_far_index = max_sum_ending_here_index\n        }\n    }\n    max_sum_so_far = max_sum_ending_here_so_far\n    max_sum_ending_here = 0\n    max_sum_ending_here_index = 0\n    for i in 0..<max_sum_ending_here_so_far_index {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n            max_sum_ending_here\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "/tmp/tmptq9v4kqc.swift:57:60: error: expected '}' at end of brace statement\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)\n                                                           ^\n/tmp/tmptq9v4kqc.swift:35:51: note: to match this opening '{'\n    for i in 0..<max_sum_ending_here_so_far_index {\n                                                  ^\n/tmp/tmptq9v4kqc.swift:57:60: error: expected '}' at end of brace statement\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)\n                                                           ^\n/tmp/tmptq9v4kqc.swift:3:33: note: to match this opening '{'\nfunc max_sum(arr: [Int]) -> Int {\n                                ^\n/tmp/tmptq9v4kqc.swift:39:13: warning: variable is unused\n            max_sum_ending_here\n            ^~~~~~~~~~~~~~~~~~~\n/tmp/tmptq9v4kqc.swift:43:6: error: operator functions can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmptq9v4kqc.swift:55:8: error: cannot call value of non-function type 'Int'\nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\n       ^\n/tmp/tmptq9v4kqc.swift:56:8: error: cannot call value of non-function type 'Int'\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\n       ^\n/tmp/tmptq9v4kqc.swift:57:8: error: cannot call value of non-function type 'Int'\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)\n       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else {\n            sum += arr[j]\n            j -= 1\n        }\n        maxSum = max(maxSum, sum)\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp12xii48t/tmp12xii48t.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab660ac5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6607bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6607bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6607bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp12xii48t                        0x0000560da2926478 <unavailable> + 5240\n5    libc.so.6                          0x00002ab660cb1460 __libc_start_main + 245\n6    tmp12xii48t                        0x0000560da29260a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        var sum = 0\n        var sum_arr = [Int]()\n        for j in i..<arr.count {\n            sum += arr[j]\n            sum_arr.append(arr[j])\n            if sum > max_sum {\n                max_sum = sum\n                max_sum_arr = sum_arr\n            }\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmprbk1mb6r/tmprbk1mb6r.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14144c0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14141b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14141b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14141b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprbk1mb6r                        0x000055bbd03827c8 <unavailable> + 6088\n5    libc.so.6                          0x00002b14146ac460 __libc_start_main + 245\n6    tmprbk1mb6r                        0x000055bbd03823f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp0tgkaorh/tmp0tgkaorh.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aee7d0afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aee7cda6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aee7cda6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aee7cda57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0tgkaorh                        0x0000558cfd5d63e8 <unavailable> + 5096\n5    libc.so.6                          0x00002aee7d29b460 __libc_start_main + 245\n6    tmp0tgkaorh                        0x0000558cfd5d6019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var dp1 = Array(repeating: 0, count: arr.count)\n    var dp2 = Array(repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        dp1[i] = arr[i]\n        for j in 0..<i {\n            if arr[i] > arr[j] && dp1[i] < dp1[j] + arr[i] {\n                dp1[i] = dp1[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        dp2[i] = arr[i]\n        for j in (i+1..<arr.count).reversed() {\n            if arr[i] > arr[j] && dp2[i] < dp2[j] + arr[i] {\n                dp2[i] = dp2[j] + arr[i]\n            }\n        }\n    }\n    \n    var max = 0\n    for i in 0..<arr.count {\n        if dp1[i] + dp2[i] - arr[i] > max {\n            max = dp1[i] + dp2[i] - arr[i]\n        }\n    }\n    \n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp2bj8l7df/tmp2bj8l7df.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9c1da71c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9c1d768b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9c1d768988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9c1d7677b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2bj8l7df                        0x00005617a33cb3e8 <unavailable> + 5096\n5    libc.so.6                          0x00002b9c1dc5d460 __libc_start_main + 245\n6    tmp2bj8l7df                        0x00005617a33cb019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    \n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        dec[i] = max(dec[i + 1], arr[i])\n    }\n    \n    var maxSum = 0\n    for i in 0..<arr.count {\n        maxSum = max(maxSum, inc[i] + dec[i])\n    }\n    \n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp1f10yk4_/tmp1f10yk4_.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b009f714c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b009f40bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b009f40b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b009f40a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1f10yk4_                        0x000055821909a988 <unavailable> + 6536\n5    libc.so.6                          0x00002b009f900460 __libc_start_main + 245\n6    tmp1f10yk4_                        0x000055821909a5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumLeft = [Int](repeating: 0, count: arr.count)\n    var maxSumRight = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        maxSumLeft[i] = arr[i]\n        maxSumRight[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && maxSumLeft[i] < maxSumLeft[j] + arr[i] {\n                maxSumLeft[i] = maxSumLeft[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in (0..<arr.count-1).reversed() {\n        for j in (i+1..<arr.count).reversed() {\n            if arr[i] > arr[j] && maxSumRight[i] < maxSumRight[j] + arr[i] {\n                maxSumRight[i] = maxSumRight[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if maxSum < maxSumLeft[i] + maxSumRight[i] - arr[i] {\n            maxSum = maxSumLeft[i] + maxSumRight[i] - arr[i]\n        }\n    }\n    \n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_so_far_reverse = 0\n    var max_sum_so_far_reverse_temp = 0\n    for i in 0..<arr.count {\n        max_sum_so_far += arr[i]\n        if max_sum_so_far < 0 {\n            max_sum_so_far = 0\n        }\n        if max_sum_so_far > max_sum {\n            max_sum = max_sum_so_far\n        }\n    }\n    for i in (0..<arr.count).reversed() {\n        max_sum_so_far_reverse_temp += arr[i]\n        if max_sum_so_far_reverse_temp < 0 {\n            max_sum_so_far_reverse_temp = 0\n        }\n        if max_sum_so_far_reverse_temp > max_sum_so_far_reverse {\n            max_sum_so_far_reverse = max_sum_so_far_reverse_temp\n        }\n    }\n    return max_sum + max_sum_so_far_reverse\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpphg2ty4w/tmpphg2ty4w.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b93778b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b93775abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b93775ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b93775aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpphg2ty4w                        0x00005611dccd8838 <unavailable> + 6200\n5    libc.so.6                          0x00002b9377aa0460 __libc_start_main + 245\n6    tmpphg2ty4w                        0x00005611dccd8469 <unavailable> + 5225\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumEndingHere = 0\n    var maxSumSoFar = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere += arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumSoFar < maxSumEndingHere {\n            maxSumSoFar = maxSumEndingHere\n        }\n    }\n    return maxSumSoFar\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp31bacif_/tmp31bacif_.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ed7b78c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ed786fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ed786f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ed786e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp31bacif_                        0x000056040f180578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ed7d64460 __libc_start_main + 245\n6    tmp31bacif_                        0x000056040f1801a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var max_sum_arr = [Int]()\n    var sum_arr = [Int]()\n    for i in 0..<arr.count {\n        sum = 0\n        for j in i..<arr.count {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n                max_sum_arr = Array(arr[i...j])\n            }\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmp50rbghwk/tmp50rbghwk.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae4c8870c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae4c8567b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae4c8567988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae4c85667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp50rbghwk                        0x000056116797a968 <unavailable> + 6504\n5    libc.so.6                          0x00002ae4c8a5c460 __libc_start_main + 245\n6    tmp50rbghwk                        0x000056116797a599 <unavailable> + 5529\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = 0\n    while i < arr.count {\n        sum = 0\n        j = i\n        while j < arr.count {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp5jdtn8nm/tmp5jdtn8nm.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67065d4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67062cbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67062cb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67062ca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5jdtn8nm                        0x000055f0437663e8 <unavailable> + 5096\n5    libc.so.6                          0x00002b67067c0460 __libc_start_main + 245\n6    tmp5jdtn8nm                        0x000055f043766019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(arr[i], max_sum_left[i - 1] + arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(arr[i], max_sum_right[i + 1] + arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp12cbtyaz/tmp12cbtyaz.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad42d976c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad42d66db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad42d66d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad42d66c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp12cbtyaz                        0x000055dee6c87988 <unavailable> + 6536\n5    libc.so.6                          0x00002ad42db62460 __libc_start_main + 245\n6    tmp12cbtyaz                        0x000055dee6c875b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > max_sum {\n            max_sum = sum\n            max_sum_arr.append(arr[i])\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpcgs6t4k1/tmpcgs6t4k1.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2e8102c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2e7df9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2e7df9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2e7df87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcgs6t4k1                        0x000055b901c217c8 <unavailable> + 6088\n5    libc.so.6                          0x00002ae2e82ee460 __libc_start_main + 245\n6    tmpcgs6t4k1                        0x000055b901c213f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var max = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpmayb6obb/tmpmayb6obb.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b385255fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3852256b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3852256988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38522557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmayb6obb                        0x0000563b8b07f578 <unavailable> + 5496\n5    libc.so.6                          0x00002b385274b460 __libc_start_main + 245\n6    tmpmayb6obb                        0x0000563b8b07f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_inc = [Int](repeating: 0, count: arr.count)\n    var max_sum_dec = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_inc[0] = arr[0]\n    max_sum_dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_inc[i] = max(max_sum_inc[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_dec[i] = max(max_sum_dec[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmpy3lulw5v/tmpy3lulw5v.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af87d98dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af87d684b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af87d684988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af87d6837b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy3lulw5v                        0x00005570ab0078f8 <unavailable> + 6392\n5    libc.so.6                          0x00002af87db79460 __libc_start_main + 245\n6    tmpy3lulw5v                        0x00005570ab007529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // Fill max_sum_left\n    max_sum_left[0] = arr[0]\n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i-1], arr[i])\n    }\n    \n    // Fill max_sum_right\n    max_sum_right[arr.count-1] = arr[arr.count-1]\n    for i in stride(from: arr.count-2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i+1], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpulw7_zsh/tmpulw7_zsh.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b93db1acc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b93daea3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b93daea3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b93daea27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpulw7_zsh                        0x0000561014a1c8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b93db398460 __libc_start_main + 245\n6    tmpulw7_zsh                        0x0000561014a1c529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far += arr[i]\n        if max_sum_so_far < 0 {\n            max_sum_so_far = 0\n        }\n        if max_sum < max_sum_so_far {\n            max_sum = max_sum_so_far\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpqvt13vl8/tmpqvt13vl8.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0ef516ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0ef4e61b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0ef4e61988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0ef4e607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqvt13vl8                        0x00005642d8c8f578 <unavailable> + 5496\n5    libc.so.6                          0x00002b0ef5356460 __libc_start_main + 245\n6    tmpqvt13vl8                        0x00005642d8c8f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumArr = [Int]()\n    var maxSumArrIndex = [Int]()\n    var maxSumArrIndex2 = [Int]()\n    var maxSumArrIndex3 = [Int]()\n    var maxSumArrIndex4 = [Int]()\n    var maxSumArrIndex5 = [Int]()\n    var maxSumArrIndex6 = [Int]()\n    var maxSumArrIndex7 = [Int]()\n    var maxSumArrIndex8 = [Int]()\n    var maxSumArrIndex9 = [Int]()\n    var maxSumArrIndex10 = [Int]()\n    var maxSumArrIndex11 = [Int]()\n    var maxSumArrIndex12 = [Int]()\n    var maxSumArrIndex13 = [Int]()\n    var maxSumArrIndex14 = [Int]()\n    var maxSumArrIndex15 = [Int]()\n    var maxSumArrIndex16 = [Int]()\n    var maxSumArrIndex17 = [Int]()\n    var maxSumArrIndex18 = [Int]()\n    var maxSumArrIndex19 = [Int]()\n    var maxSumArrIndex20 = [Int]()\n    var maxSumArrIndex21 = [Int]()\n    var maxSumArrIndex22 = [Int]()\n    var maxSumArrIndex23 = [Int]()\n    var maxSumArrIndex24 = [Int]()\n    var maxSumArrIndex25 = [Int]()\n    var maxSumArrIndex26 = [Int]()\n    var maxSumArrIndex27 = [Int]()\n    var maxSumArrIndex28 = [Int]()\n    var maxSumArrIndex29 = [Int]()\n    var maxSumArrIndex30 = [Int]()\n    var maxSumArrIndex31 = [Int]()\n    var maxSumArrIndex32 = [Int]()\n    var maxSumArrIndex33 = [Int]()\n    var maxSumArrIndex34 = [Int]()\n    var maxSumArrIndex35 = [Int]()\n    var max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "/tmp/tmpkqb4o0eo.swift:41:9: error: type annotation missing in pattern\n    var max\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpg9_enm5w/tmpg9_enm5w.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8abe87fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8abe576b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8abe576988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8abe5757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg9_enm5w                        0x000055712d9b78f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b8abea6b460 __libc_start_main + 245\n6    tmpg9_enm5w                        0x000055712d9b7529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // max sum from left to right\n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(max_sum_left[i-1] + arr[i], arr[i])\n        }\n    }\n    \n    // max sum from right to left\n    for i in (0..<arr.count).reversed() {\n        if i == arr.count - 1 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(max_sum_right[i+1] + arr[i], arr[i])\n        }\n    }\n    \n    // max sum of bitonic subsequence\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmptumtg7cj/tmptumtg7cj.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38e485ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38e4551b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38e4551988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38e45507b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptumtg7cj                        0x000055c81670e988 <unavailable> + 6536\n5    libc.so.6                          0x00002b38e4a46460 __libc_start_main + 245\n6    tmptumtg7cj                        0x000055c81670e5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > maxSum {\n            maxSum = sum\n        }\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpg1p_5hyl/tmpg1p_5hyl.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9e36fcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9e33f3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9e33f3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9e33f27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg1p_5hyl                        0x000056394052b578 <unavailable> + 5496\n5    libc.so.6                          0x00002ab9e38e8460 __libc_start_main + 245\n6    tmpg1p_5hyl                        0x000056394052b1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = Array(repeating: 0, count: arr.count)\n    var dec = Array(repeating: 0, count: arr.count)\n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1], arr[i])\n    }\n    for i in (0..<arr.count - 1).reversed() {\n        dec[i] = max(dec[i + 1], arr[i])\n    }\n    var max_sum = 0\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpydi326xm/tmpydi326xm.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17e4b8bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17e4882b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17e4882988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17e48817b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpydi326xm                        0x00005565e552a988 <unavailable> + 6536\n5    libc.so.6                          0x00002b17e4d77460 __libc_start_main + 245\n6    tmpydi326xm                        0x00005565e552a5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmphfkkugwy/tmphfkkugwy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7401c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba73febdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba73febd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba73febc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphfkkugwy                        0x000055a3e52993e8 <unavailable> + 5096\n5    libc.so.6                          0x00002ba7403b2460 __libc_start_main + 245\n6    tmphfkkugwy                        0x000055a3e5299019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > maxSum {\n            maxSum = sum\n        }\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpg1p_5hyl/tmpg1p_5hyl.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9e36fcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9e33f3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9e33f3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9e33f27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg1p_5hyl                        0x000056394052b578 <unavailable> + 5496\n5    libc.so.6                          0x00002ab9e38e8460 __libc_start_main + 245\n6    tmpg1p_5hyl                        0x000056394052b1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far = max(arr[i], max_sum_so_far + arr[i])\n        max_sum = max(max_sum, max_sum_so_far)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp247xyzrk/tmp247xyzrk.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba207710c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba207407b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba207407988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba2074067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp247xyzrk                        0x000055c03c86d608 <unavailable> + 5640\n5    libc.so.6                          0x00002ba2078fc460 __libc_start_main + 245\n6    tmp247xyzrk                        0x000055c03c86d239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    var max_sum_left_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in (0..<arr.count-1).reversed() {\n        for j in (i+1..<arr.count).reversed() {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum_left_right[i] = max_sum_left[i] + max_sum_right[i] - arr[i]\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_left_right[i] {\n            max_sum = max_sum_left_right[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_so_far_reverse = 0\n    for i in 0..<arr.count {\n        max_sum_so_far += arr[i]\n        max_sum_so_far_reverse += arr[arr.count - 1 - i]\n        if max_sum_so_far < 0 {\n            max_sum_so_far = 0\n        }\n        if max_sum_so_far_reverse < 0 {\n            max_sum_so_far_reverse = 0\n        }\n        max_sum = max(max_sum, max_sum_so_far + max_sum_so_far_reverse - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpq7mwexau/tmpq7mwexau.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3e08e72c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3e08b69b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3e08b69988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3e08b687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq7mwexau                        0x0000561eb16d7608 <unavailable> + 5640\n5    libc.so.6                          0x00002b3e0905e460 __libc_start_main + 245\n6    tmpq7mwexau                        0x0000561eb16d7239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmphfkkugwy/tmphfkkugwy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba7401c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba73febdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba73febd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba73febc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphfkkugwy                        0x000055a3e52993e8 <unavailable> + 5096\n5    libc.so.6                          0x00002ba7403b2460 __libc_start_main + 245\n6    tmphfkkugwy                        0x000055a3e5299019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_ending_here = 0\n    var max_so_far = 0\n    var max_ending_here_reverse = 0\n    var max_so_far_reverse = 0\n    for i in 0..<arr.count {\n        max_ending_here += arr[i]\n        if max_ending_here < 0 {\n            max_ending_here = 0\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here\n        }\n    }\n    for i in stride(from: arr.count-1, through: 0, by: -1) {\n        max_ending_here_reverse += arr[i]\n        if max_ending_here_reverse < 0 {\n            max_ending_here_reverse = 0\n        }\n        if max_so_far_reverse < max_ending_here_reverse {\n            max_so_far_reverse = max_ending_here_reverse\n        }\n    }\n    max_sum = max_so_far + max_so_far_reverse\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpfejd2myt/tmpfejd2myt.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b33e3035c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b33e2d2cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b33e2d2c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b33e2d2b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfejd2myt                        0x00005584811e77a8 <unavailable> + 6056\n5    libc.so.6                          0x00002b33e3221460 __libc_start_main + 245\n6    tmpfejd2myt                        0x00005584811e73d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    \n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(dec[i + 1], arr[i])\n    }\n    \n    var maxSum = 0\n    for i in 0..<arr.count {\n        maxSum = max(maxSum, inc[i] + dec[i] - arr[i])\n    }\n    \n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp8_865huh/tmp8_865huh.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b964de81c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b964db78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b964db78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b964db777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8_865huh                        0x0000555e2f7908f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b964e06d460 __libc_start_main + 245\n6    tmp8_865huh                        0x0000555e2f790529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    var maxSumEndingHere2 = 0\n    var maxSumSoFar2 = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere = max(maxSumEndingHere + arr[i], arr[i])\n        maxSumSoFar = max(maxSumSoFar, maxSumEndingHere)\n    }\n    for i in (0..<arr.count).reversed() {\n        maxSumEndingHere2 = max(maxSumEndingHere2 + arr[i], arr[i])\n        maxSumSoFar2 = max(maxSumSoFar2, maxSumEndingHere2)\n    }\n    maxSum = max(maxSumSoFar, maxSumSoFar2)\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpd232azng/tmpd232azng.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b404f9dec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b404f6d5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b404f6d5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b404f6d47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd232azng                        0x0000557dc02c68c8 <unavailable> + 6344\n5    libc.so.6                          0x00002b404fbca460 __libc_start_main + 245\n6    tmpd232azng                        0x0000557dc02c64f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    \n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    }\n    \n    var max_sum = 0\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp4ovkzmqm/tmp4ovkzmqm.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b82d9a65c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b82d975cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b82d975c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b82d975b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4ovkzmqm                        0x0000556f2dfc8988 <unavailable> + 6536\n5    libc.so.6                          0x00002b82d9c51460 __libc_start_main + 245\n6    tmp4ovkzmqm                        0x0000556f2dfc85b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<arr.count {\n        var temp = 0\n        for j in i..<arr.count {\n            temp += arr[j]\n            if temp > sum {\n                sum = temp\n            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpuzu6xg7j/tmpuzu6xg7j.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b47fef96c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b47fec8db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b47fec8d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b47fec8c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuzu6xg7j                        0x000055f826fd5578 <unavailable> + 5496\n5    libc.so.6                          0x00002b47ff182460 __libc_start_main + 245\n6    tmpuzu6xg7j                        0x000055f826fd51a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here = max(max_sum_ending_here + arr[i], arr[i])\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n    }\n    max_sum = max_sum_so_far\n    max_sum_so_far = 0\n    max_sum_ending_here = 0\n    for i in (0..<arr.count).reversed() {\n        max_sum_ending_here = max(max_sum_ending_here + arr[i], arr[i])\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n    }\n    max_sum = max(max_sum, max_sum_so_far)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmplqrdqzgz/tmplqrdqzgz.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adba1a16c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adba170db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adba170d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adba170c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplqrdqzgz                        0x000055dbcf0f58c8 <unavailable> + 6344\n5    libc.so.6                          0x00002adba1c02460 __libc_start_main + 245\n6    tmplqrdqzgz                        0x000055dbcf0f54f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        max_sum = max(max_sum, sum)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmptmmgm88k/tmptmmgm88k.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8b7ef0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8b7ec05b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8b7ec05988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8b7ec047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptmmgm88k                        0x0000556505c29608 <unavailable> + 5640\n5    libc.so.6                          0x00002b8b7f0fa460 __libc_start_main + 245\n6    tmptmmgm88k                        0x0000556505c29239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpm0q7558o/tmpm0q7558o.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5a2d511c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5a2d208b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5a2d208988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5a2d2077b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm0q7558o                        0x00005585e2978988 <unavailable> + 6536\n5    libc.so.6                          0x00002b5a2d6fd460 __libc_start_main + 245\n6    tmpm0q7558o                        0x00005585e29785b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // find max sum of increasing subsequence from left to right\n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        for j in 0..<i {\n            if arr[j] < arr[i] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    // find max sum of increasing subsequence from right to left\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        max_sum_right[i] = arr[i]\n        for j in stride(from: arr.count - 1, through: i, by: -1) {\n            if arr[j] < arr[i] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    // find max sum of bitonic subsequence\n    for i in 0..<arr.count {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmp2zp_9ocu/tmp2zp_9ocu.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bc183ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bc1535b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3bc1535988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3bc15347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2zp_9ocu                        0x0000558f9b9ab8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b3bc1a2a460 __libc_start_main + 245\n6    tmp2zp_9ocu                        0x0000558f9b9ab529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_inc = [Int](repeating: 0, count: arr.count)\n    var max_sum_dec = [Int](repeating: 0, count: arr.count)\n    \n    // max sum increasing\n    for i in 0..<arr.count {\n        max_sum_inc[i] = arr[i]\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_inc[i] < max_sum_inc[j] + arr[i] {\n                max_sum_inc[i] = max_sum_inc[j] + arr[i]\n            }\n        }\n    }\n    \n    // max sum decreasing\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        max_sum_dec[i] = arr[i]\n        for j in stride(from: arr.count - 1, through: i, by: -1) {\n            if arr[i] > arr[j] && max_sum_dec[i] < max_sum_dec[j] + arr[i] {\n                max_sum_dec[i] = max_sum_dec[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_inc[i] + max_sum_dec[i] - arr[i] {\n            max_sum = max_sum_inc[i] + max_sum_dec[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    \n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    }\n    \n    var maxSum = 0\n    for i in 0..<arr.count {\n        maxSum = max(maxSum, inc[i] + dec[i] - arr[i])\n    }\n    \n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmprwa99pzd/tmprwa99pzd.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac3e8c7ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac3e8975b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac3e8975988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac3e89747b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprwa99pzd                        0x000056036ddf48f8 <unavailable> + 6392\n5    libc.so.6                          0x00002ac3e8e6a460 __libc_start_main + 245\n6    tmprwa99pzd                        0x000056036ddf4529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int](repeating: 0, count: arr.count)\n    for i in 0..<arr.count {\n        max_sum_arr[i] = arr[i]\n        for j in 0..<i {\n            if arr[j] < arr[i] {\n                max_sum_arr[i] = max(max_sum_arr[i], max_sum_arr[j] + arr[i])\n            }\n        }\n        max_sum = max(max_sum, max_sum_arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpodzl10ly/tmpodzl10ly.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b19de054c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b19ddd4bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b19ddd4b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19ddd4a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpodzl10ly                        0x000055ddb18036c8 <unavailable> + 5832\n5    libc.so.6                          0x00002b19de240460 __libc_start_main + 245\n6    tmpodzl10ly                        0x000055ddb18032f9 <unavailable> + 4857\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        maxSum = max(maxSum, sum)\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpkjjg9kq7/tmpkjjg9kq7.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6667876c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b666756db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b666756d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b666756c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkjjg9kq7                        0x000055d4db740608 <unavailable> + 5640\n5    libc.so.6                          0x00002b6667a62460 __libc_start_main + 245\n6    tmpkjjg9kq7                        0x000055d4db740239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        } else if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpy3uzxats/tmpy3uzxats.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b15e5ef7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b15e5beeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b15e5bee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b15e5bed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy3uzxats                        0x0000557f94bd1578 <unavailable> + 5496\n5    libc.so.6                          0x00002b15e60e3460 __libc_start_main + 245\n6    tmpy3uzxats                        0x0000557f94bd11a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpg9_enm5w/tmpg9_enm5w.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8abe87fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8abe576b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8abe576988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8abe5757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg9_enm5w                        0x000055712d9b78f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b8abea6b460 __libc_start_main + 245\n6    tmpg9_enm5w                        0x000055712d9b7529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var max = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpmayb6obb/tmpmayb6obb.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b385255fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3852256b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3852256988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38522557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmayb6obb                        0x0000563b8b07f578 <unavailable> + 5496\n5    libc.so.6                          0x00002b385274b460 __libc_start_main + 245\n6    tmpmayb6obb                        0x0000563b8b07f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    \n    inc[0] = arr[0]\n    dec[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        inc[i] = max(inc[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        dec[i] = max(dec[i + 1] + arr[i], arr[i])\n    }\n    \n    var maxSum = Int.min\n    for i in 0..<arr.count {\n        maxSum = max(maxSum, inc[i] + dec[i] - arr[i])\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp968bq69g/tmp968bq69g.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afeb121ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afeb0f15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afeb0f15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afeb0f147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp968bq69g                        0x0000559b3f27d8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002afeb140a460 __libc_start_main + 245\n6    tmp968bq69g                        0x0000559b3f27d529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[j] < arr[i] {\n                max_sum_left[i] = max(max_sum_left[i], max_sum_left[j] + arr[i])\n            }\n        }\n    }\n    for i in (0..<arr.count-1).reversed() {\n        for j in (i+1..<arr.count).reversed() {\n            if arr[j] < arr[i] {\n                max_sum_right[i] = max(max_sum_right[i], max_sum_right[j] + arr[i])\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum > maxSum {\n            maxSum = sum\n        }\n        i += 1\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp55bug287/tmp55bug287.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae741df3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae741aeab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae741aea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae741ae97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp55bug287                        0x000055e35cc733e8 <unavailable> + 5096\n5    libc.so.6                          0x00002ae741fdf460 __libc_start_main + 245\n6    tmp55bug287                        0x000055e35cc73019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_reverse = 0\n    var max_sum_ending_here_reverse_temp = 0\n    var max_sum_ending_here_temp = 0\n    var max_sum_ending_here_reverse_temp_reverse = 0\n    var max_sum_ending_here_temp_reverse = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_temp_reverse_temp = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp_reverse = 0\n    var max_sum_ending_here_temp_reverse_temp_reverse = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_temp_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp_reverse_temp_reverse = 0\n    var max_sum_ending_here_temp_reverse_temp_reverse_temp_reverse = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_temp_reverse_temp_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse = 0\n    var max_sum_ending_here_temp_reverse_temp_reverse_temp_reverse_temp_reverse = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp = 0\n    var max_sum_ending_here_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse = 0\n    var max_sum_ending_here_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "/tmp/tmpynbuvydl.swift:26:9: error: type annotation missing in pattern\n    var max_sum_ending_here_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var max_sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp76yx2udl/tmp76yx2udl.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7e414dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7e3e44b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7e3e44988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7e3e437b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76yx2udl                        0x0000560218b8f578 <unavailable> + 5496\n5    libc.so.6                          0x00002ad7e4339460 __libc_start_main + 245\n6    tmp76yx2udl                        0x0000560218b8f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_reverse = 0\n    var max_sum_so_far_reverse = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here\n        }\n    }\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        max_sum_ending_here_reverse += arr[i]\n        if max_sum_ending_here_reverse < 0 {\n            max_sum_ending_here_reverse = 0\n        }\n        if max_sum_so_far_reverse < max_sum_ending_here_reverse {\n            max_sum_so_far_reverse = max_sum_ending_here_reverse\n        }\n    }\n    max_sum = max_sum_so_far + max_sum_so_far_reverse\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpdz_irm73/tmpdz_irm73.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c125bbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c122b2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7c122b2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7c122b17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdz_irm73                        0x0000565279c1f7a8 <unavailable> + 6056\n5    libc.so.6                          0x00002b7c127a7460 __libc_start_main + 245\n6    tmpdz_irm73                        0x0000565279c1f3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmptffkc__7/tmptffkc__7.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cabcccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cab9c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cab9c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cab9c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptffkc__7                        0x000055b4b2b7d988 <unavailable> + 6536\n5    libc.so.6                          0x00002b6cabeb8460 __libc_start_main + 245\n6    tmptffkc__7                        0x000055b4b2b7d5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far = max(max_sum_so_far + arr[i], arr[i])\n        max_sum = max(max_sum, max_sum_so_far)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpayd4pima/tmpayd4pima.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a6e6c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a6e3bbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9a6e3bb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9a6e3ba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpayd4pima                        0x000055978eecd608 <unavailable> + 5640\n5    libc.so.6                          0x00002b9a6e8b0460 __libc_start_main + 245\n6    tmpayd4pima                        0x000055978eecd239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far = max(arr[i], max_sum_so_far + arr[i])\n        max_sum = max(max_sum, max_sum_so_far)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmp247xyzrk/tmp247xyzrk.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba207710c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba207407b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba207407988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba2074067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp247xyzrk                        0x000055c03c86d608 <unavailable> + 5640\n5    libc.so.6                          0x00002ba2078fc460 __libc_start_main + 245\n6    tmp247xyzrk                        0x000055c03c86d239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    for i in 0..<arr.count {\n        max_sum_so_far += arr[i]\n        if max_sum_so_far < 0 {\n            max_sum_so_far = 0\n        }\n        if max_sum < max_sum_so_far {\n            max_sum = max_sum_so_far\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpqvt13vl8/tmpqvt13vl8.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0ef516ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0ef4e61b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0ef4e61988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0ef4e607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqvt13vl8                        0x00005642d8c8f578 <unavailable> + 5496\n5    libc.so.6                          0x00002b0ef5356460 __libc_start_main + 245\n6    tmpqvt13vl8                        0x00005642d8c8f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_so_far = 0\n    var max_sum_ending_here_so_far_index = 0\n    var max_sum_ending_here_index = 0\n    var max_sum_ending_here_index_so_far = 0\n    var max_sum_ending_here_index_so_far_index = 0\n    var max_sum_ending_here_index_so_far_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "/tmp/tmpmydxaq0c.swift:23:9: error: type annotation missing in pattern\n    var max_sum_ending_here_index_so_far_index_index_index_index_index_index_index_index_index_index_index_index_index\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var max_sum_arr = [Int]()\n    var sum_arr = [Int]()\n    for i in 0..<arr.count {\n        sum_arr.append(arr[i])\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n            sum_arr.removeAll()\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_sum_arr = sum_arr\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmptrrie81l/tmptrrie81l.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba8a1033c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba8a0d2ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba8a0d2a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba8a0d297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptrrie81l                        0x000056211a6628a8 <unavailable> + 6312\n5    libc.so.6                          0x00002ba8a121f460 __libc_start_main + 245\n6    tmptrrie81l                        0x000056211a6624d9 <unavailable> + 5337\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmptffkc__7/tmptffkc__7.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cabcccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cab9c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cab9c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cab9c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptffkc__7                        0x000055b4b2b7d988 <unavailable> + 6536\n5    libc.so.6                          0x00002b6cabeb8460 __libc_start_main + 245\n6    tmptffkc__7                        0x000055b4b2b7d5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumEndingHere = 0\n    var maxSumStartingHere = 0\n    var maxSumStartingHereEndingHere = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere = max(arr[i], maxSumEndingHere + arr[i])\n        maxSum = max(maxSum, maxSumEndingHere)\n    }\n    for i in (0..<arr.count).reversed() {\n        maxSumStartingHere = max(arr[i], maxSumStartingHere + arr[i])\n        maxSum = max(maxSum, maxSumStartingHere)\n    }\n    for i in 0..<arr.count {\n        maxSumStartingHereEndingHere = max(arr[i], maxSumStartingHereEndingHere + arr[i])\n        maxSumStartingHereEndingHere = max(0, maxSumStartingHereEndingHere)\n    }\n    return maxSum - maxSumStartingHereEndingHere\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpqz9fzlyf/tmpqz9fzlyf.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7623882c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7623579b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7623579988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b76235787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqz9fzlyf                        0x00005624986808c8 <unavailable> + 6344\n5    libc.so.6                          0x00002b7623a6e460 __libc_start_main + 245\n6    tmpqz9fzlyf                        0x00005624986804f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumEndingHere = 0\n    var maxSumStartingHere = 0\n    var maxSumStartingHereEndingHere = 0\n    var maxSumStartingHereEndingHereReverse = 0\n    var maxSumEndingHereReverse = 0\n    var maxSumStartingHereReverse = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere = max(maxSumEndingHere + arr[i], arr[i])\n        maxSum = max(maxSum, maxSumEndingHere)\n        maxSumStartingHereEndingHere = max(maxSumStartingHereEndingHere + arr[i], maxSumStartingHere + arr[i])\n        maxSumStartingHere = max(maxSumStartingHere + arr[i], arr[i])\n        maxSumStartingHereEndingHereReverse = max(maxSumStartingHereEndingHereReverse + arr[arr.count - 1 - i], maxSumStartingHereReverse + arr[arr.count - 1 - i])\n        maxSumStartingHereReverse = max(maxSumStartingHereReverse + arr[arr.count - 1 - i], arr[arr.count - 1 - i])\n        maxSumEndingHereReverse = max(maxSumEndingHereReverse + arr[arr.count - 1 - i], arr[arr.count - 1 - i])\n    }\n    return max(maxSum, max(maxSumStartingHereEndingHere, max(maxSumStartingHereEndingHereReverse, max(maxSumEndingHereReverse, maxSumStartingHereReverse))))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpqpol1l00/tmpqpol1l00.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8e6ab1fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8e6a816b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8e6a816988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8e6a8157b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqpol1l00                        0x0000555eb21d7608 <unavailable> + 5640\n5    libc.so.6                          0x00002b8e6ad0b460 __libc_start_main + 245\n6    tmpqpol1l00                        0x0000555eb21d7239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1], arr[i])\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        max_sum_right[i] = max(max_sum_right[i + 1], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmpg9_enm5w/tmpg9_enm5w.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8abe87fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8abe576b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8abe576988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8abe5757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg9_enm5w                        0x000055712d9b78f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b8abea6b460 __libc_start_main + 245\n6    tmpg9_enm5w                        0x000055712d9b7529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        if i > 0 && max_sum_left[i] < max_sum_left[i - 1] + arr[i] {\n            max_sum_left[i] = max_sum_left[i - 1] + arr[i]\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        max_sum_right[i] = arr[i]\n        if i < arr.count - 1 && max_sum_right[i] < max_sum_right[i + 1] + arr[i] {\n            max_sum_right[i] = max_sum_right[i + 1] + arr[i]\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp45xlwmr6/tmp45xlwmr6.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab3123adc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab3120a4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab3120a4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab3120a37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp45xlwmr6                        0x000056509a1b0988 <unavailable> + 6536\n5    libc.so.6                          0x00002ab312599460 __libc_start_main + 245\n6    tmp45xlwmr6                        0x000056509a1b05b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    var maxSumEndingHere = 0\n    var maxSumEndingHere2 = 0\n    var maxSumSoFar2 = 0\n    for i in 0..<arr.count {\n        maxSumEndingHere += arr[i]\n        if maxSumEndingHere < 0 {\n            maxSumEndingHere = 0\n        }\n        if maxSumEndingHere > maxSumSoFar {\n            maxSumSoFar = maxSumEndingHere\n        }\n        maxSumEndingHere2 += arr[arr.count - 1 - i]\n        if maxSumEndingHere2 < 0 {\n            maxSumEndingHere2 = 0\n        }\n        if maxSumEndingHere2 > maxSumSoFar2 {\n            maxSumSoFar2 = maxSumEndingHere2\n        }\n    }\n    maxSum = maxSumSoFar + maxSumSoFar2\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpvvts71ts/tmpvvts71ts.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9458a88c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b945877fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b945877f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b945877e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvvts71ts                        0x0000555821502578 <unavailable> + 5496\n5    libc.so.6                          0x00002b9458c74460 __libc_start_main + 245\n6    tmpvvts71ts                        0x00005558215021a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    \n    for i in 0..<arr.count {\n        max_sum_arr.append(arr[i])\n        max_sum_arr_rev.append(arr[i])\n        max_sum_arr_rev_rev.append(arr[i])\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_arr[i] < max_sum_arr[j] + arr[i] {\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in (0..<arr.count-1).reversed() {\n        for j in (i+1..<arr.count).reversed() {\n            if arr[i] > arr[j] && max_sum_arr_rev[i] < max_sum_arr_rev[j] + arr[i] {\n                max_sum_arr_rev[i] = max_sum_arr_rev[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum_arr_rev_rev[i] = max_sum_arr_rev[arr.count-1-i]\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_arr[i] + max_sum_arr_rev_rev[i] - arr[i] {\n            max_sum = max_sum_arr[i] + max_sum_arr_rev_rev[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpv3i32n1x/tmpv3i32n1x.swift:57: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae3c7e52c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae3c7b49b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae3c7b49988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae3c7b487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv3i32n1x                        0x0000559b45ac9938 <unavailable> + 6456\n5    libc.so.6                          0x00002ae3c803e460 __libc_start_main + 245\n6    tmpv3i32n1x                        0x0000559b45ac9569 <unavailable> + 5481\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int](repeating: 0, count: arr.count)\n    var max_sum_arr_rev = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_arr[i] = arr[i]\n        max_sum_arr_rev[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_arr[i] < max_sum_arr[j] + arr[i] {\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i, by: -1) {\n            if arr[i] > arr[j] && max_sum_arr_rev[i] < max_sum_arr_rev[j] + arr[i] {\n                max_sum_arr_rev[i] = max_sum_arr_rev[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_arr[i] + max_sum_arr_rev[i] - arr[i] {\n            max_sum = max_sum_arr[i] + max_sum_arr_rev[i] - arr[i]\n        }\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    var max_sum_ending_here_so_far = 0\n    var max_sum_ending_here_so_far_index = 0\n    var max_sum_ending_here_index = 0\n    var max_sum_ending_here_index_so_far = 0\n    var max_sum_ending_here_index_so_far_index = 0\n    var max_sum_ending_here_index_so_far_index_index = 0\n    var max_sum_ending_here_index_index = 0\n    var max_sum_ending_here_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending_here_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0\n    var max_sum_ending\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "/tmp/tmptk1452jz.swift:26:9: error: type annotation missing in pattern\n    var max_sum_ending\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // max sum from left to right\n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(max_sum_left[i-1] + arr[i], arr[i])\n        }\n    }\n    \n    // max sum from right to left\n    for i in (0..<arr.count).reversed() {\n        if i == arr.count - 1 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(max_sum_right[i+1] + arr[i], arr[i])\n        }\n    }\n    \n    // max sum of bitonic subsequence\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmptumtg7cj/tmptumtg7cj.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b38e485ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b38e4551b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b38e4551988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38e45507b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptumtg7cj                        0x000055c81670e988 <unavailable> + 6536\n5    libc.so.6                          0x00002b38e4a46460 __libc_start_main + 245\n6    tmptumtg7cj                        0x000055c81670e5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    // max sum from left to right\n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(arr[i], max_sum_left[i-1] + arr[i])\n        }\n    }\n    \n    // max sum from right to left\n    for i in (0..<arr.count).reversed() {\n        if i == arr.count - 1 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(arr[i], max_sum_right[i+1] + arr[i])\n        }\n    }\n    \n    // find the max sum\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmprhvwimi4/tmprhvwimi4.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab37693bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab376632b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab376632988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab3766317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprhvwimi4                        0x000056437af07988 <unavailable> + 6536\n5    libc.so.6                          0x00002ab376b27460 __libc_start_main + 245\n6    tmprhvwimi4                        0x000056437af075b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmptffkc__7/tmptffkc__7.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cabcccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cab9c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cab9c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cab9c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptffkc__7                        0x000055b4b2b7d988 <unavailable> + 6536\n5    libc.so.6                          0x00002b6cabeb8460 __libc_start_main + 245\n6    tmptffkc__7                        0x000055b4b2b7d5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    while i < arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        } else if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpzhjy577w/tmpzhjy577w.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aab386a2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aab38399b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aab38399988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aab383987b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzhjy577w                        0x000055ca993b13e8 <unavailable> + 5096\n5    libc.so.6                          0x00002aab3888e460 __libc_start_main + 245\n6    tmpzhjy577w                        0x000055ca993b1019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    var max_sum_left_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left[i] = arr[i]\n        } else {\n            max_sum_left[i] = max(max_sum_left[i-1] + arr[i], arr[i])\n        }\n    }\n    \n    for i in stride(from: arr.count-1, through: 0, by: -1) {\n        if i == arr.count-1 {\n            max_sum_right[i] = arr[i]\n        } else {\n            max_sum_right[i] = max(max_sum_right[i+1] + arr[i], arr[i])\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if i == 0 {\n            max_sum_left_right[i] = max_sum_right[i]\n        } else if i == arr.count-1 {\n            max_sum_left_right[i] = max_sum_left[i]\n        } else {\n            max_sum_left_right[i] = max_sum_left[i] + max_sum_right[i] - arr[i]\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left_right[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp5krzyxka/tmp5krzyxka.swift:56: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b74fba83c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b74fb77ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b74fb77a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b74fb7797b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5krzyxka                        0x00005633d6e5d8f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b74fbc6f460 __libc_start_main + 245\n6    tmp5krzyxka                        0x00005633d6e5d529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        if i > 0 && arr[i] > arr[i-1] {\n            max_sum_left[i] += max_sum_left[i-1]\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        max_sum_right[i] = arr[i]\n        if i < arr.count-1 && arr[i] > arr[i+1] {\n            max_sum_right[i] += max_sum_right[i+1]\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpzlor_zs6/tmpzlor_zs6.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afcad1a9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afcacea0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afcacea0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afcace9f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzlor_zs6                        0x000055909971d988 <unavailable> + 6536\n5    libc.so.6                          0x00002afcad395460 __libc_start_main + 245\n6    tmpzlor_zs6                        0x000055909971d5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var left = [Int](repeating: 0, count: arr.count)\n    var right = [Int](repeating: 0, count: arr.count)\n    var max_sum = 0\n    \n    for i in 0..<arr.count {\n        left[i] = arr[i]\n        if i > 0 && arr[i] > arr[i-1] {\n            left[i] += left[i-1]\n        }\n    }\n    \n    for i in stride(from: arr.count-1, through: 0, by: -1) {\n        right[i] = arr[i]\n        if i < arr.count-1 && arr[i] > arr[i+1] {\n            right[i] += right[i+1]\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, left[i] + right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpzq73853_/tmpzq73853_.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae99c36dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae99c064b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae99c064988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae99c0637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzq73853_                        0x000055580e8b98f8 <unavailable> + 6392\n5    libc.so.6                          0x00002ae99c559460 __libc_start_main + 245\n6    tmpzq73853_                        0x000055580e8b9529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    var max_sum_arr_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = [Int]()\n    var max_sum_arr_rev_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "/tmp/tmpd6wi3xep.swift:22:9: error: type annotation missing in pattern\n    var max_sum_arr_rev_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var max = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmp86jf1sac/tmp86jf1sac.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67f9fa2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67f9c99b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67f9c99988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67f9c987b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp86jf1sac                        0x000055757c5f9578 <unavailable> + 5496\n5    libc.so.6                          0x00002b67fa18e460 __libc_start_main + 245\n6    tmp86jf1sac                        0x000055757c5f91a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumLeft = [Int](repeating: 0, count: arr.count)\n    var maxSumRight = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        maxSumLeft[i] = arr[i]\n        if i > 0 && arr[i] > arr[i-1] {\n            maxSumLeft[i] = maxSumLeft[i] + maxSumLeft[i-1]\n        }\n    }\n    \n    for i in (0..<arr.count).reversed() {\n        maxSumRight[i] = arr[i]\n        if i < arr.count - 1 && arr[i] > arr[i+1] {\n            maxSumRight[i] = maxSumRight[i] + maxSumRight[i+1]\n        }\n    }\n    \n    for i in 0..<arr.count {\n        maxSum = max(maxSum, maxSumLeft[i] + maxSumRight[i] - arr[i])\n    }\n    \n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmphu1drkcz/tmphu1drkcz.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b05583f4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b05580ebb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b05580eb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b05580ea7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphu1drkcz                        0x0000562d63930988 <unavailable> + 6536\n5    libc.so.6                          0x00002b05585e0460 __libc_start_main + 245\n6    tmphu1drkcz                        0x0000562d639305b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = 0\n    while i < arr.count {\n        sum = 0\n        j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpdwo8huji/tmpdwo8huji.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abd8e907c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abd8e5feb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abd8e5fe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abd8e5fd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdwo8huji                        0x000055e2799fa3e8 <unavailable> + 5096\n5    libc.so.6                          0x00002abd8eaf3460 __libc_start_main + 245\n6    tmpdwo8huji                        0x000055e2799fa019 <unavailable> + 4121\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var inc = [Int](repeating: 0, count: arr.count)\n    var dec = [Int](repeating: 0, count: arr.count)\n    inc[0] = arr[0]\n    dec[arr.count-1] = arr[arr.count-1]\n    for i in 1..<arr.count {\n        inc[i] = max(inc[i-1], arr[i])\n    }\n    for i in (0..<arr.count-1).reversed() {\n        dec[i] = max(dec[i+1], arr[i])\n    }\n    var sum = 0\n    for i in 0..<arr.count {\n        sum = max(sum, inc[i] + dec[i] - arr[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpbc9m5osx/tmpbc9m5osx.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6749d3ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6749a31b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6749a31988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6749a307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbc9m5osx                        0x000055e27d436988 <unavailable> + 6536\n5    libc.so.6                          0x00002b6749f26460 __libc_start_main + 245\n6    tmpbc9m5osx                        0x000055e27d4365b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var sum = 0\n    var max = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum > max {\n            max = sum\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123876,
      "stdout": "",
      "stderr": "tmpmayb6obb/tmpmayb6obb.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b385255fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3852256b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3852256988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38522557b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmayb6obb                        0x0000563b8b07f578 <unavailable> + 5496\n5    libc.so.6                          0x00002b385274b460 __libc_start_main + 245\n6    tmpmayb6obb                        0x0000563b8b07f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmplanu104c/tmplanu104c.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eacfd1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eaccc8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eaccc8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eaccc77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplanu104c                        0x000055a6a1dcc988 <unavailable> + 6536\n5    libc.so.6                          0x00002b6ead1bd460 __libc_start_main + 245\n6    tmplanu104c                        0x000055a6a1dcc5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    var max_sum_arr_rev = [Int]()\n    \n    for i in 0..<arr.count {\n        var sum = 0\n        var sum_rev = 0\n        for j in i..<arr.count {\n            sum += arr[j]\n            sum_rev += arr[arr.count - j - 1]\n            if sum > max_sum {\n                max_sum = sum\n                max_sum_arr = Array(arr[i...j])\n            }\n            if sum_rev > max_sum {\n                max_sum = sum_rev\n                max_sum_arr_rev = Array(arr[arr.count - j - 1...arr.count - i - 1])\n            }\n        }\n    }\n    \n    if max_sum_arr.count > max_sum_arr_rev.count {\n        return max_sum\n    } else {\n        return max_sum_arr_rev.reduce(0, +)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpkf3tv0d1/tmpkf3tv0d1.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4ef8029c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4ef7d20b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4ef7d20988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4ef7d1f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkf3tv0d1                        0x00005642ad3bc838 <unavailable> + 6200\n5    libc.so.6                          0x00002b4ef8215460 __libc_start_main + 245\n6    tmpkf3tv0d1                        0x00005642ad3bc469 <unavailable> + 5225\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmplanu104c/tmplanu104c.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6eacfd1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6eaccc8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6eaccc8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6eaccc77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplanu104c                        0x000055a6a1dcc988 <unavailable> + 6536\n5    libc.so.6                          0x00002b6ead1bd460 __libc_start_main + 245\n6    tmplanu104c                        0x000055a6a1dcc5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] {\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n            j += 1\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp3ega9yuj/tmp3ega9yuj.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad59f0b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad59edacb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad59edac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad59edab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3ega9yuj                        0x0000558eeb604578 <unavailable> + 5496\n5    libc.so.6                          0x00002ad59f2a1460 __libc_start_main + 245\n6    tmp3ega9yuj                        0x0000558eeb6041a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var maxSum = 0\n    var maxSumSoFar = 0\n    for i in 0..<arr.count {\n        maxSumSoFar = max(maxSumSoFar + arr[i], arr[i])\n        maxSum = max(maxSum, maxSumSoFar)\n    }\n    return maxSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmptbv_c44t/tmptbv_c44t.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab922e7cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab922b73b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab922b73988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab922b727b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptbv_c44t                        0x0000562c59120608 <unavailable> + 5640\n5    libc.so.6                          0x00002ab923068460 __libc_start_main + 245\n6    tmptbv_c44t                        0x0000562c59120239 <unavailable> + 4665\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here\n        }\n    }\n    max_sum = max_sum_so_far\n    max_sum_so_far = 0\n    max_sum_ending_here = 0\n    for i in (0..<arr.count).reversed() {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here\n        }\n    }\n    max_sum += max_sum_so_far\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmpbfx97odh/tmpbfx97odh.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad4f43a2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad4f4099b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad4f4099988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad4f40987b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbfx97odh                        0x0000561d2c97d838 <unavailable> + 6200\n5    libc.so.6                          0x00002ad4f458e460 __libc_start_main + 245\n6    tmpbfx97odh                        0x0000561d2c97d469 <unavailable> + 5225\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    for i in 0..<arr.count {\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n    }\n    \n    for i in 1..<arr.count {\n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_left[i] < max_sum_left[j] + arr[i] {\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i + 1, by: -1) {\n            if arr[i] > arr[j] && max_sum_right[i] < max_sum_right[j] + arr[i] {\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            }\n        }\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_arr = [Int]()\n    for i in 0..<arr.count {\n        var sum = 0\n        var sum_arr = [Int]()\n        for j in i..<arr.count {\n            sum += arr[j]\n            sum_arr.append(arr[j])\n            if sum > max_sum {\n                max_sum = sum\n                max_sum_arr = sum_arr\n            }\n        }\n    }\n    print(max_sum_arr)\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmprbk1mb6r/tmprbk1mb6r.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14144c0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14141b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14141b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14141b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprbk1mb6r                        0x000055bbd03827c8 <unavailable> + 6088\n5    libc.so.6                          0x00002b14146ac460 __libc_start_main + 245\n6    tmprbk1mb6r                        0x000055bbd03823f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var left = [Int](repeating: 0, count: arr.count)\n    var right = [Int](repeating: 0, count: arr.count)\n    \n    left[0] = arr[0]\n    for i in 1..<arr.count {\n        left[i] = max(arr[i], left[i - 1] + arr[i])\n    }\n    \n    right[arr.count - 1] = arr[arr.count - 1]\n    for i in stride(from: arr.count - 2, through: 0, by: -1) {\n        right[i] = max(arr[i], right[i + 1] + arr[i])\n    }\n    \n    var max_sum = Int.min\n    for i in 0..<arr.count {\n        max_sum = max(max_sum, left[i] + right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp1pph83ub/tmp1pph83ub.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b946f876c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b946f56db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b946f56d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b946f56c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1pph83ub                        0x000055b367ba88f8 <unavailable> + 6392\n5    libc.so.6                          0x00002b946fa62460 __libc_start_main + 245\n6    tmp1pph83ub                        0x000055b367ba8529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    for i in 0..<arr.count {\n        var sum = 0\n        var j = i\n        while j < arr.count {\n            sum += arr[j]\n            j += 1\n        }\n        j = i - 1\n        while j >= 0 {\n            sum += arr[j]\n            j -= 1\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123874,
      "stdout": "",
      "stderr": "tmph3gjb6w8/tmph3gjb6w8.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ca2463c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ca215ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ca215a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ca21597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3gjb6w8                        0x0000564180112578 <unavailable> + 5496\n5    libc.so.6                          0x00002b5ca264f460 __libc_start_main + 245\n6    tmph3gjb6w8                        0x00005641801121a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_ending_here = 0\n    var max_sum_so_far = 0\n    var max_sum_ending_here_reverse = 0\n    var max_sum_so_far_reverse = 0\n    for i in 0..<arr.count {\n        max_sum_ending_here += arr[i]\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here\n        }\n    }\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        max_sum_ending_here_reverse += arr[i]\n        if max_sum_ending_here_reverse < 0 {\n            max_sum_ending_here_reverse = 0\n        }\n        if max_sum_so_far_reverse < max_sum_ending_here_reverse {\n            max_sum_so_far_reverse = max_sum_ending_here_reverse\n        }\n    }\n    max_sum = max_sum_so_far + max_sum_so_far_reverse\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123875,
      "stdout": "",
      "stderr": "tmp20oga881/tmp20oga881.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afa3ca24c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afa3c71bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afa3c71b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afa3c71a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp20oga881                        0x000055eb12cbf7a8 <unavailable> + 6056\n5    libc.so.6                          0x00002afa3cc10460 __libc_start_main + 245\n6    tmp20oga881                        0x000055eb12cbf3d9 <unavailable> + 5081\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    var i = 0\n    var j = arr.count - 1\n    while i < j {\n        if arr[i] < arr[j] {\n            sum += arr[i]\n            i += 1\n        } else if arr[i] > arr[j] {\n            sum += arr[j]\n            j -= 1\n        } else {\n            sum += arr[i]\n            i += 1\n            j -= 1\n        }\n        max_sum = max(max_sum, sum)\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "tmp9jon36jh/tmp9jon36jh.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1fe1b95c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1fe188cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1fe188c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1fe188b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9jon36jh                        0x00005569b44e0478 <unavailable> + 5240\n5    libc.so.6                          0x00002b1fe1d81460 __libc_start_main + 245\n6    tmp9jon36jh                        0x00005569b44e00a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_left = [Int](repeating: 0, count: arr.count)\n    var max_sum_right = [Int](repeating: 0, count: arr.count)\n    \n    max_sum_left[0] = arr[0]\n    max_sum_right[arr.count - 1] = arr[arr.count - 1]\n    \n    for i in 1..<arr.count {\n        max_sum_left[i] = max(max_sum_left[i - 1] + arr[i], arr[i])\n    }\n    \n    for i in (0..<arr.count - 1).reversed() {\n        max_sum_right[i] = max(max_sum_right[i + 1] + arr[i], arr[i])\n    }\n    \n    for i in 0..<arr.count {\n        max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    }\n    \n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmptffkc__7/tmptffkc__7.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cabcccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cab9c3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cab9c3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cab9c27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptffkc__7                        0x000055b4b2b7d988 <unavailable> + 6536\n5    libc.so.6                          0x00002b6cabeb8460 __libc_start_main + 245\n6    tmptffkc__7                        0x000055b4b2b7d5b9 <unavailable> + 5561\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var max_sum_inc = 0\n    var max_sum_dec = 0\n    var max_sum_inc_arr = [Int]()\n    var max_sum_dec_arr = [Int]()\n    var max_sum_arr = [Int]()\n    \n    for i in 0..<arr.count {\n        max_sum_inc_arr.append(arr[i])\n        max_sum_dec_arr.append(arr[i])\n        max_sum_arr.append(arr[i])\n        \n        for j in 0..<i {\n            if arr[i] > arr[j] && max_sum_inc_arr[i] < max_sum_inc_arr[j] + arr[i] {\n                max_sum_inc_arr[i] = max_sum_inc_arr[j] + arr[i]\n            }\n        }\n        \n        if max_sum_inc < max_sum_inc_arr[i] {\n            max_sum_inc = max_sum_inc_arr[i]\n        }\n    }\n    \n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        for j in stride(from: arr.count - 1, through: i, by: -1) {\n            if arr[i] > arr[j] && max_sum_dec_arr[i] < max_sum_dec_arr[j] + arr[i] {\n                max_sum_dec_arr[i] = max_sum_dec_arr[j] + arr[i]\n            }\n        }\n        \n        if max_sum_dec < max_sum_dec_arr[i] {\n            max_sum_dec = max_sum_dec_arr[i]\n        }\n    }\n    \n    for i in 0..<arr.count {\n        if max_sum < max_sum_inc_arr[i] + max_sum_dec_arr[i] - arr[i] {\n            max_sum = max_sum_inc_arr[i] + max_sum_dec_arr[i] - arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1666123877,
      "stdout": "",
      "stderr": "/tmp/tmp37h57rxi.swift:59:60: error: expected '}' at end of brace statement\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)\n                                                           ^\n/tmp/tmp37h57rxi.swift:39:28: note: to match this opening '{'\n    for i in 0..<arr.count {\n                           ^\n/tmp/tmp37h57rxi.swift:59:60: error: expected '}' at end of brace statement\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)\n                                                           ^\n/tmp/tmp37h57rxi.swift:3:33: note: to match this opening '{'\nfunc max_sum(arr: [Int]) -> Int {\n                                ^\n/tmp/tmp37h57rxi.swift:41:65: error: cannot convert value of type '[Int]' to expected argument type 'Int'\n            max_sum = max_sum_inc_arr[i] + max_sum_dec_arr[i] - arr\n                                                                ^\n/tmp/tmp37h57rxi.swift:45:6: error: operator functions can only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp37h57rxi.swift:57:8: error: cannot call value of non-function type 'Int'\nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\n       ^\n/tmp/tmp37h57rxi.swift:58:8: error: cannot call value of non-function type 'Int'\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\n       ^\n/tmp/tmp37h57rxi.swift:59:8: error: cannot call value of non-function type 'Int'\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)\n       ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum = 0\n        for j in i..<arr.count {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510557,
      "stdout": "",
      "stderr": "tmpafspr6wf/tmpafspr6wf.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab4676bec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab4673b5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab4673b5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab4673b47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpafspr6wf                        0x0000563e3ecf2578 <unavailable> + 5496\n5    libc.so.6                          0x00002ab4678aa460 __libc_start_main + 245\n6    tmpafspr6wf                        0x0000563e3ecf21a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr: [Int]) -> Int {\n    var max_sum = 0\n    var sum = 0\n    for i in 0..<arr.count {\n        sum += arr[i]\n        if sum < 0 {\n            sum = 0\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum(arr: [1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194)\nassert(max_sum(arr: [80, 60, 30, 40, 20, 10]) == 210)\nassert(max_sum(arr: [2, 3, 14, 16, 21, 23, 29, 30]) == 138)",
      "timestamp": 1665510556,
      "stdout": "",
      "stderr": "tmpuj10ro26/tmpuj10ro26.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abf6d098c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abf6cd8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abf6cd8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abf6cd8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuj10ro26                        0x000055a76b5af578 <unavailable> + 5496\n5    libc.so.6                          0x00002abf6d284460 __libc_start_main + 245\n6    tmpuj10ro26                        0x000055a76b5af1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}