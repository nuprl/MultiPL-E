{
  "name": "mbpp_460_Extract",
  "language": "swift",
  "prompt": "\n/// Write a python function to get the first element of each sublist.\nfunc Extract(lst: [[Int]]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Extract(lst: [[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6])\nassert(Extract(lst: [[1, 2, 3], [4, 5]]) == [1, 4])\nassert(Extract(lst: [[9, 8, 1], [1, 2]]) == [9, 1])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return lst.map { $0[0] }",
    "    return lst.map { $0[0] }",
    "    return lst.map { $0.first ?? 0 }",
    "    return lst.map { $0.first! }",
    "    return lst.map { $0[0] }",
    "    return lst.map { $0.first! }",
    "    return lst.map { $0.first! }",
    "    return lst.map { $0[0] }",
    "    return lst.map { $0.first! }",
    "    return lst.map { $0.first! }",
    "    var result: [Int] = []\n    for sublist in lst {\n        result.append(sublist[0])\n    }\n    return result",
    "    return lst.map { $0[0] }",
    "    return lst.map { $0[0] }",
    "    return lst.map { $0[0] }",
    "    var result = [Int]()\n    for sublist in lst {\n        result.append(sublist[0])\n    }\n    return result",
    "    return lst.map { $0[0] }",
    "    return lst.map { $0.first! }",
    "    return lst.map { $0.first! }",
    "    return lst.map { $0.first! }",
    "    return lst.map { $0.first! }"
  ]
}