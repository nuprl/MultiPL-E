{
  "name": "mbpp_736_left_insertion",
  "language": "swift",
  "prompt": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    var m = 0\n    while l < r {\n        m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "tmpamwrhd5j/tmpamwrhd5j.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae5d8a5ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae5d8755b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae5d8755988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae5d87547b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpamwrhd5j                        0x0000564c7653845f <unavailable> + 5215\n5    libc.so.6                          0x00002ae5d8c4a460 __libc_start_main + 245\n6    tmpamwrhd5j                        0x0000564c765380b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] == x {\n            return mid\n        }\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if x > a[mid] {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let mid = (l + r) / 2\n        if a[mid] < x {\n            l = mid + 1\n        } else {\n            r = mid - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left < right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "tmp2vczdm96/tmp2vczdm96.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2236627c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b223631eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b223631e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b223631d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2vczdm96                        0x00005612d843c45f <unavailable> + 5215\n5    libc.so.6                          0x00002b2236813460 __libc_start_main + 245\n6    tmp2vczdm96                        0x00005612d843c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var lo = 0\n    var hi = a.count\n    while lo < hi {\n        let mid = (lo + hi) / 2\n        if a[mid] < x {\n            lo = mid + 1\n        } else {\n            hi = mid\n        }\n    }\n    return lo\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left < right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "tmp2vczdm96/tmp2vczdm96.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2236627c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b223631eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b223631e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b223631d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2vczdm96                        0x00005612d843c45f <unavailable> + 5215\n5    libc.so.6                          0x00002b2236813460 __libc_start_main + 245\n6    tmp2vczdm96                        0x00005612d843c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left < right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "tmp2vczdm96/tmp2vczdm96.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2236627c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b223631eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b223631e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b223631d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2vczdm96                        0x00005612d843c45f <unavailable> + 5215\n5    libc.so.6                          0x00002b2236813460 __libc_start_main + 245\n6    tmp2vczdm96                        0x00005612d843c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmppt8ahycg/tmppt8ahycg.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bc9eecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bc9be3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bc9be3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bc9be27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt8ahycg                        0x000055bfad44845f <unavailable> + 5215\n5    libc.so.6                          0x00002b8bca0d8460 __libc_start_main + 245\n6    tmppt8ahycg                        0x000055bfad4480b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    \n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    \n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmp1gf_kwfl/tmp1gf_kwfl.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8f955ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8f9255b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8f9255988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8f92547b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1gf_kwfl                        0x000055ef71f5945f <unavailable> + 5215\n5    libc.so.6                          0x00002af8f974a460 __libc_start_main + 245\n6    tmp1gf_kwfl                        0x000055ef71f590b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmp1gf_kwfl/tmp1gf_kwfl.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8f955ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8f9255b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8f9255988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8f92547b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1gf_kwfl                        0x000055ef71f5945f <unavailable> + 5215\n5    libc.so.6                          0x00002af8f974a460 __libc_start_main + 245\n6    tmp1gf_kwfl                        0x000055ef71f590b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmppt8ahycg/tmppt8ahycg.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bc9eecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bc9be3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bc9be3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bc9be27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt8ahycg                        0x000055bfad44845f <unavailable> + 5215\n5    libc.so.6                          0x00002b8bca0d8460 __libc_start_main + 245\n6    tmppt8ahycg                        0x000055bfad4480b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmppt8ahycg/tmppt8ahycg.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bc9eecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bc9be3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bc9be3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bc9be27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt8ahycg                        0x000055bfad44845f <unavailable> + 5215\n5    libc.so.6                          0x00002b8bca0d8460 __libc_start_main + 245\n6    tmppt8ahycg                        0x000055bfad4480b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let mid = (l + r) / 2\n        if a[mid] < x {\n            l = mid + 1\n        } else {\n            r = mid\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmppetzxtp_/tmppetzxtp_.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c8e19ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c8de95b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7c8de95988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7c8de947b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppetzxtp_                        0x0000556efc5cb45f <unavailable> + 5215\n5    libc.so.6                          0x00002b7c8e38a460 __libc_start_main + 245\n6    tmppetzxtp_                        0x0000556efc5cb0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var lo = 0\n    var hi = a.count - 1\n    while lo < hi {\n        let mid = (lo + hi) / 2\n        if a[mid] < x {\n            lo = mid + 1\n        } else {\n            hi = mid\n        }\n    }\n    return lo\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmp40497g4z/tmp40497g4z.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af08f4d8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af08f1cfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af08f1cf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af08f1ce7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp40497g4z                        0x000055d90aeb445f <unavailable> + 5215\n5    libc.so.6                          0x00002af08f6c4460 __libc_start_main + 245\n6    tmp40497g4z                        0x000055d90aeb40b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low < high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmpvxswf4cz/tmpvxswf4cz.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad150198c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad14fe8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad14fe8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad14fe8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvxswf4cz                        0x0000557e7125845f <unavailable> + 5215\n5    libc.so.6                          0x00002ad150384460 __libc_start_main + 245\n6    tmpvxswf4cz                        0x0000557e712580b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] >= x {\n            right = mid\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmpheoyrrlt/tmpheoyrrlt.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4cb796cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4cb7663b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4cb7663988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4cb76627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpheoyrrlt                        0x0000559a09c2445f <unavailable> + 5215\n5    libc.so.6                          0x00002b4cb7b58460 __libc_start_main + 245\n6    tmpheoyrrlt                        0x0000559a09c240b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x <= a[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var lo = 0\n    var hi = a.count\n    while lo < hi {\n        let mid = lo + (hi - lo) / 2\n        if a[mid] < x {\n            lo = mid + 1\n        } else {\n            hi = mid\n        }\n    }\n    return lo\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmp1gf_kwfl/tmp1gf_kwfl.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8f955ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8f9255b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8f9255988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8f92547b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1gf_kwfl                        0x000055ef71f5945f <unavailable> + 5215\n5    libc.so.6                          0x00002af8f974a460 __libc_start_main + 245\n6    tmp1gf_kwfl                        0x000055ef71f590b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let mid = (l + r) / 2\n        if x <= a[mid] {\n            r = mid - 1\n        } else {\n            l = mid + 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    var m = 0\n    while l <= r {\n        m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmppt8ahycg/tmppt8ahycg.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bc9eecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bc9be3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bc9be3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bc9be27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt8ahycg                        0x000055bfad44845f <unavailable> + 5215\n5    libc.so.6                          0x00002b8bca0d8460 __libc_start_main + 245\n6    tmppt8ahycg                        0x000055bfad4480b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count\n    while left < right {\n        let mid = (left + right) / 2\n        if x <= a[mid] {\n            right = mid\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmp1gf_kwfl/tmp1gf_kwfl.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8f955ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8f9255b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8f9255988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8f92547b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1gf_kwfl                        0x000055ef71f5945f <unavailable> + 5215\n5    libc.so.6                          0x00002af8f974a460 __libc_start_main + 245\n6    tmp1gf_kwfl                        0x000055ef71f590b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmp1gf_kwfl/tmp1gf_kwfl.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8f955ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8f9255b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8f9255988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8f92547b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1gf_kwfl                        0x000055ef71f5945f <unavailable> + 5215\n5    libc.so.6                          0x00002af8f974a460 __libc_start_main + 245\n6    tmp1gf_kwfl                        0x000055ef71f590b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmp1gf_kwfl/tmp1gf_kwfl.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8f955ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8f9255b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8f9255988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8f92547b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1gf_kwfl                        0x000055ef71f5945f <unavailable> + 5215\n5    libc.so.6                          0x00002af8f974a460 __libc_start_main + 245\n6    tmp1gf_kwfl                        0x000055ef71f590b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmppt8ahycg/tmppt8ahycg.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bc9eecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bc9be3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bc9be3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bc9be27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt8ahycg                        0x000055bfad44845f <unavailable> + 5215\n5    libc.so.6                          0x00002b8bca0d8460 __libc_start_main + 245\n6    tmppt8ahycg                        0x000055bfad4480b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    var m = 0\n    while l <= r {\n        m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left < right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "tmp2vczdm96/tmp2vczdm96.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2236627c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b223631eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b223631e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b223631d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2vczdm96                        0x00005612d843c45f <unavailable> + 5215\n5    libc.so.6                          0x00002b2236813460 __libc_start_main + 245\n6    tmp2vczdm96                        0x00005612d843c0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmppt8ahycg/tmppt8ahycg.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bc9eecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bc9be3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bc9be3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bc9be27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt8ahycg                        0x000055bfad44845f <unavailable> + 5215\n5    libc.so.6                          0x00002b8bca0d8460 __libc_start_main + 245\n6    tmppt8ahycg                        0x000055bfad4480b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count {\n        if a[i] >= x {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmppt8ahycg/tmppt8ahycg.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bc9eecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bc9be3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bc9be3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bc9be27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt8ahycg                        0x000055bfad44845f <unavailable> + 5215\n5    libc.so.6                          0x00002b8bca0d8460 __libc_start_main + 245\n6    tmppt8ahycg                        0x000055bfad4480b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = l + (r - l) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmp1gf_kwfl/tmp1gf_kwfl.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8f955ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8f9255b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8f9255988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8f92547b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1gf_kwfl                        0x000055ef71f5945f <unavailable> + 5215\n5    libc.so.6                          0x00002af8f974a460 __libc_start_main + 245\n6    tmp1gf_kwfl                        0x000055ef71f590b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x < a[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l <= r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if x <= a[mid] {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmppt8ahycg/tmppt8ahycg.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bc9eecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bc9be3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bc9be3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bc9be27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt8ahycg                        0x000055bfad44845f <unavailable> + 5215\n5    libc.so.6                          0x00002b8bca0d8460 __libc_start_main + 245\n6    tmppt8ahycg                        0x000055bfad4480b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count {\n        if a[i] >= x {\n            return i\n        }\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    \n    while low <= high {\n        mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    \n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] == x {\n            return mid\n        }\n        if a[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmppt8ahycg/tmppt8ahycg.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bc9eecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bc9be3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bc9be3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bc9be27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt8ahycg                        0x000055bfad44845f <unavailable> + 5215\n5    libc.so.6                          0x00002b8bca0d8460 __libc_start_main + 245\n6    tmppt8ahycg                        0x000055bfad4480b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = l + (r - l) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmppwpsem1b/tmppwpsem1b.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad9ee006c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad9edcfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad9edcfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad9edcfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppwpsem1b                        0x000055d4cf90545f <unavailable> + 5215\n5    libc.so.6                          0x00002ad9ee1f2460 __libc_start_main + 245\n6    tmppwpsem1b                        0x000055d4cf9050b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmppt8ahycg/tmppt8ahycg.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bc9eecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bc9be3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bc9be3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bc9be27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt8ahycg                        0x000055bfad44845f <unavailable> + 5215\n5    libc.so.6                          0x00002b8bca0d8460 __libc_start_main + 245\n6    tmppt8ahycg                        0x000055bfad4480b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    var mid = 0\n    while low <= high {\n        mid = (low + high) / 2\n        if x > a[mid] {\n            low = mid + 1\n        } else if x < a[mid] {\n            high = mid - 1\n        } else {\n            return mid\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509864,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left < right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmppt8ahycg/tmppt8ahycg.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bc9eecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bc9be3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bc9be3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bc9be27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppt8ahycg                        0x000055bfad44845f <unavailable> + 5215\n5    libc.so.6                          0x00002b8bca0d8460 __libc_start_main + 245\n6    tmppt8ahycg                        0x000055bfad4480b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var l = 0\n    var r = a.count - 1\n    while l < r {\n        let m = (l + r) / 2\n        if a[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "tmp1gf_kwfl/tmp1gf_kwfl.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af8f955ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af8f9255b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af8f9255988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af8f92547b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1gf_kwfl                        0x000055ef71f5945f <unavailable> + 5215\n5    libc.so.6                          0x00002af8f974a460 __libc_start_main + 245\n6    tmp1gf_kwfl                        0x000055ef71f590b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if x <= a[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var low = 0\n    var high = a.count - 1\n    while low <= high {\n        let mid = (low + high) / 2\n        if a[mid] == x {\n            return mid\n        } else if a[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return low\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1666124253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nfunc left_insertion(a: [Int], x: Int) -> Int {\n    var left = 0\n    var right = a.count - 1\n    while left <= right {\n        let mid = (left + right) / 2\n        if a[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return left\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(left_insertion(a: [1, 2, 4, 5], x: 6) == 4)\nassert(left_insertion(a: [1, 2, 4, 5], x: 3) == 2)\nassert(left_insertion(a: [1, 2, 4, 5], x: 7) == 4)",
      "timestamp": 1665509863,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}