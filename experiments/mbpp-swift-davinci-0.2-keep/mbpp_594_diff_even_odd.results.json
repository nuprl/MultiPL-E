{
  "name": "mbpp_594_diff_even_odd",
  "language": "swift",
  "prompt": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for number in list1 {\n        if number % 2 == 0 && !even_found {\n            even = number\n            even_found = true\n        }\n        if number % 2 != 0 && !odd_found {\n            odd = number\n            odd_found = true\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 {\n            even = item\n            foundEven = true\n        } else {\n            odd = item\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "tmpo0iw8tak/tmpo0iw8tak.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7af31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7ac28b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7ac28988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7ac277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo0iw8tak                        0x000055dd57ce352e <unavailable> + 5422\n5    libc.so.6                          0x00002aff7b11d460 __libc_start_main + 245\n6    tmpo0iw8tak                        0x000055dd57ce3169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var firstEven = false\n    var firstOdd = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if !firstEven {\n                even = i\n                firstEven = true\n            }\n        } else {\n            if !firstOdd {\n                odd = i\n                firstOdd = true\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if !foundEven {\n                even = i\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = i\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var foundEven = false\n    var foundOdd = false\n    \n    for i in list1 {\n        if i % 2 == 0 && !foundEven {\n            even = i\n            foundEven = true\n        }\n        if i % 2 != 0 && !foundOdd {\n            odd = i\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    \n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for num in list1 {\n        if num % 2 == 0 {\n            even_num = num\n            count += 1\n            break\n        }\n    }\n    for num in list1 {\n        if num % 2 != 0 {\n            odd_num = num\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even_num - odd_num\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 {\n            if !foundEven {\n                even = item\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = item\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        }\n        else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "tmpirad0952/tmpirad0952.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab263faec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab263ca5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab263ca5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab263ca47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpirad0952                        0x000055e97f76362f <unavailable> + 5679\n5    libc.so.6                          0x00002ab26419a460 __libc_start_main + 245\n6    tmpirad0952                        0x000055e97f763169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even_num - odd_num\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if !foundEven {\n                even = i\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = i\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 && !foundEven {\n            even = item\n            foundEven = true\n        } else if item % 2 != 0 && !foundOdd {\n            odd = item\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for i in list1 {\n        if i % 2 == 0 && !foundEven {\n            even = i\n            foundEven = true\n        }\n        if i % 2 != 0 && !foundOdd {\n            odd = i\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var even_found: Bool = false\n    var odd_found: Bool = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            even_found = true\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            odd_found = true\n            break\n        }\n    }\n    if even_found && odd_found {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var foundEven = false\n    var foundOdd = false\n    for num in list1 {\n        if num % 2 == 0 && !foundEven {\n            even = num\n            foundEven = true\n        } else if num % 2 != 0 && !foundOdd {\n            odd = num\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 {\n            if !foundEven {\n                even = item\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = item\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int?\n    var odd: Int?\n    for i in list1 {\n        if i % 2 == 0 {\n            if even == nil {\n                even = i\n            }\n        } else {\n            if odd == nil {\n                odd = i\n            }\n        }\n    }\n    if even == nil || odd == nil {\n        return 0\n    }\n    return even! - odd!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1{\n        if i % 2 == 0 && count == 0{\n            even = i\n            count += 1\n        }\n        else if i % 2 != 0 && count == 0{\n            odd = i\n            count += 1\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmpuioig99w/tmpuioig99w.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a2f9b3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a2f6aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a2f6aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a2f6a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuioig99w                        0x000055b5e7ea952e <unavailable> + 5422\n5    libc.so.6                          0x00002b8a2fb9f460 __libc_start_main + 245\n6    tmpuioig99w                        0x000055b5e7ea9169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    \n    for i in list1 {\n        if i % 2 == 0 {\n            if !foundEven {\n                even = i\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = i\n                foundOdd = true\n            }\n        }\n        \n        if foundEven && foundOdd {\n            break\n        }\n    }\n    \n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmp8sgv_0a_/tmp8sgv_0a_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1952c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb1649b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb1649988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb16487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sgv_0a_                        0x000055e9ea8f241e <unavailable> + 5150\n5    libc.so.6                          0x00002b8bb1b3e460 __libc_start_main + 245\n6    tmp8sgv_0a_                        0x000055e9ea8f2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 && !foundEven {\n            even = item\n            foundEven = true\n        } else if item % 2 != 0 && !foundOdd {\n            odd = item\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 {\n            even = item\n            foundEven = true\n        } else {\n            odd = item\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "tmpo0iw8tak/tmpo0iw8tak.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7af31c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7ac28b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7ac28988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7ac277b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo0iw8tak                        0x000055dd57ce352e <unavailable> + 5422\n5    libc.so.6                          0x00002aff7b11d460 __libc_start_main + 245\n6    tmpo0iw8tak                        0x000055dd57ce3169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        }\n        else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "tmpirad0952/tmpirad0952.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab263faec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab263ca5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab263ca5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab263ca47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpirad0952                        0x000055e97f76362f <unavailable> + 5679\n5    libc.so.6                          0x00002ab26419a460 __libc_start_main + 245\n6    tmpirad0952                        0x000055e97f763169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for num in list1 {\n        if num % 2 == 0 {\n            if !foundEven {\n                even = num\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = num\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var flag: Bool = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            flag = true\n            break\n        }\n    }\n    if flag == false {\n        return -1\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_list = [Int]()\n    var odd_list = [Int]()\n    for i in list1 {\n        if i % 2 == 0 {\n            even_list.append(i)\n        } else {\n            odd_list.append(i)\n        }\n    }\n    return even_list[0] - odd_list[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_list = [Int]()\n    var odd_list = [Int]()\n    for i in list1 {\n        if i % 2 == 0 {\n            even_list.append(i)\n        } else {\n            odd_list.append(i)\n        }\n    }\n    return even_list[0] - odd_list[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmp8sgv_0a_/tmp8sgv_0a_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1952c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb1649b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb1649988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb16487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sgv_0a_                        0x000055e9ea8f241e <unavailable> + 5150\n5    libc.so.6                          0x00002b8bb1b3e460 __libc_start_main + 245\n6    tmp8sgv_0a_                        0x000055e9ea8f2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            flag = 1\n            break\n        }\n    }\n    if flag == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if !flag {\n                even = i\n                flag = true\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmpp049nc36/tmpp049nc36.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52c090ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52c0605b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52c0605988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52c06047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp049nc36                        0x0000557ff3a3e52e <unavailable> + 5422\n5    libc.so.6                          0x00002b52c0afa460 __libc_start_main + 245\n6    tmpp049nc36                        0x0000557ff3a3e169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 && !foundEven {\n            even = item\n            foundEven = true\n        }\n        if item % 2 != 0 && !foundOdd {\n            odd = item\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 && !foundEven {\n            even = item\n            foundEven = true\n        }\n        if item % 2 != 0 && !foundOdd {\n            odd = item\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_index = 0\n    var odd_index = 0\n    var even_found = false\n    var odd_found = false\n    for (index, value) in list1.enumerated() {\n        if value % 2 == 0 && !even_found {\n            even_index = index\n            even_found = true\n        }\n        if value % 2 != 0 && !odd_found {\n            odd_index = index\n            odd_found = true\n        }\n    }\n    return even_index - odd_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmpb4o0u8jl/tmpb4o0u8jl.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ce52fcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ce4ff3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ce4ff3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ce4ff27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb4o0u8jl                        0x00005595676615de <unavailable> + 5598\n5    libc.so.6                          0x00002b7ce54e8460 __libc_start_main + 245\n6    tmpb4o0u8jl                        0x0000559567661219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for num in list1 {\n        if num % 2 == 0 {\n            if !foundEven {\n                even = num\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = num\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 1\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var diff = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    diff = even - odd\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var found_even = false\n    var found_odd = false\n    for item in list1 {\n        if item % 2 == 0 {\n            even = item\n            found_even = true\n        } else {\n            odd = item\n            found_odd = true\n        }\n        if found_even && found_odd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmpr4hk2ykd/tmpr4hk2ykd.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8077268c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8076f5fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8076f5f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8076f5e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr4hk2ykd                        0x000055ca9730052e <unavailable> + 5422\n5    libc.so.6                          0x00002b8077454460 __libc_start_main + 245\n6    tmpr4hk2ykd                        0x000055ca97300169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_list = [Int]()\n    var odd_list = [Int]()\n    for i in list1 {\n        if i % 2 == 0 {\n            even_list.append(i)\n        } else {\n            odd_list.append(i)\n        }\n    }\n    return even_list[0] - odd_list[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmp8sgv_0a_/tmp8sgv_0a_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1952c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb1649b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb1649988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb16487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sgv_0a_                        0x000055e9ea8f241e <unavailable> + 5150\n5    libc.so.6                          0x00002b8bb1b3e460 __libc_start_main + 245\n6    tmp8sgv_0a_                        0x000055e9ea8f2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            flag = true\n            break\n        }\n    }\n    if flag == false {\n        return 0\n    }\n    flag = false\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            flag = true\n            break\n        }\n    }\n    if flag == false {\n        return 0\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmp8sgv_0a_/tmp8sgv_0a_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1952c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb1649b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb1649988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb16487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sgv_0a_                        0x000055e9ea8f241e <unavailable> + 5150\n5    libc.so.6                          0x00002b8bb1b3e460 __libc_start_main + 245\n6    tmp8sgv_0a_                        0x000055e9ea8f2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_found {\n                even = i\n                even_found = true\n            }\n        } else {\n            if !odd_found {\n                odd = i\n                odd_found = true\n            }\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmp8sgv_0a_/tmp8sgv_0a_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1952c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb1649b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb1649988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb16487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sgv_0a_                        0x000055e9ea8f241e <unavailable> + 5150\n5    libc.so.6                          0x00002b8bb1b3e460 __libc_start_main + 245\n6    tmp8sgv_0a_                        0x000055e9ea8f2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_flag = false\n    var odd_flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if even_flag == false {\n                even = i\n                even_flag = true\n            }\n        } else {\n            if odd_flag == false {\n                odd = i\n                odd_flag = true\n            }\n        }\n        if even_flag && odd_flag {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        }\n        else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "tmpirad0952/tmpirad0952.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab263faec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab263ca5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab263ca5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab263ca47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpirad0952                        0x000055e97f76362f <unavailable> + 5679\n5    libc.so.6                          0x00002ab26419a460 __libc_start_main + 245\n6    tmpirad0952                        0x000055e97f763169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmp8sgv_0a_/tmp8sgv_0a_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1952c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb1649b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb1649988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb16487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sgv_0a_                        0x000055e9ea8f241e <unavailable> + 5150\n5    libc.so.6                          0x00002b8bb1b3e460 __libc_start_main + 245\n6    tmp8sgv_0a_                        0x000055e9ea8f2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 && !foundEven {\n            even = item\n            foundEven = true\n        } else if item % 2 != 0 && !foundOdd {\n            odd = item\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var foundEven = false\n    var foundOdd = false\n    for i in list1 {\n        if i % 2 == 0 && !foundEven {\n            even = i\n            foundEven = true\n        }\n        if i % 2 != 0 && !foundOdd {\n            odd = i\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_list = [Int]()\n    var odd_list = [Int]()\n    for i in list1 {\n        if i % 2 == 0 {\n            even_list.append(i)\n        } else {\n            odd_list.append(i)\n        }\n    }\n    return even_list[0] - odd_list[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 && !foundEven {\n            even = item\n            foundEven = true\n        } else if item % 2 != 0 && !foundOdd {\n            odd = item\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 {\n            if !foundEven {\n                even = item\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = item\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmp8sgv_0a_/tmp8sgv_0a_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1952c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb1649b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb1649988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb16487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sgv_0a_                        0x000055e9ea8f241e <unavailable> + 5150\n5    libc.so.6                          0x00002b8bb1b3e460 __libc_start_main + 245\n6    tmp8sgv_0a_                        0x000055e9ea8f2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 1 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for num in list1 {\n        if num % 2 == 0 {\n            if !even_found {\n                even = num\n                even_found = true\n            }\n        } else {\n            if !odd_found {\n                odd = num\n                odd_found = true\n            }\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == false {\n                even = i\n                flag = true\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmpypf9622f/tmpypf9622f.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abd0ad87c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abd0aa7eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abd0aa7e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abd0aa7d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpypf9622f                        0x000055996678b52e <unavailable> + 5422\n5    libc.so.6                          0x00002abd0af73460 __libc_start_main + 245\n6    tmpypf9622f                        0x000055996678b169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmp8sgv_0a_/tmp8sgv_0a_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1952c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb1649b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb1649988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb16487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sgv_0a_                        0x000055e9ea8f241e <unavailable> + 5150\n5    libc.so.6                          0x00002b8bb1b3e460 __libc_start_main + 245\n6    tmp8sgv_0a_                        0x000055e9ea8f2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var result = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    result = even - odd\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_list = [Int]()\n    var odd_list = [Int]()\n    for i in list1 {\n        if i % 2 == 0 {\n            even_list.append(i)\n        } else {\n            odd_list.append(i)\n        }\n    }\n    return even_list[0] - odd_list[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmp8sgv_0a_/tmp8sgv_0a_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1952c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb1649b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb1649988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb16487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sgv_0a_                        0x000055e9ea8f241e <unavailable> + 5150\n5    libc.so.6                          0x00002b8bb1b3e460 __libc_start_main + 245\n6    tmp8sgv_0a_                        0x000055e9ea8f2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmp8sgv_0a_/tmp8sgv_0a_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1952c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb1649b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb1649988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb16487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sgv_0a_                        0x000055e9ea8f241e <unavailable> + 5150\n5    libc.so.6                          0x00002b8bb1b3e460 __libc_start_main + 245\n6    tmp8sgv_0a_                        0x000055e9ea8f2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var count: Int = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmp8sgv_0a_/tmp8sgv_0a_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1952c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb1649b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb1649988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb16487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sgv_0a_                        0x000055e9ea8f241e <unavailable> + 5150\n5    libc.so.6                          0x00002b8bb1b3e460 __libc_start_main + 245\n6    tmp8sgv_0a_                        0x000055e9ea8f2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 && count == 0 {\n            even = i\n            count += 1\n        } else if i % 2 != 0 && count == 0 {\n            odd = i\n            count += 1\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmp3hhwzkdp/tmp3hhwzkdp.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b678cc5bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b678c952b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b678c952988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b678c9517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3hhwzkdp                        0x000055bd403b352e <unavailable> + 5422\n5    libc.so.6                          0x00002b678ce47460 __libc_start_main + 245\n6    tmp3hhwzkdp                        0x000055bd403b3169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for item in list1 {\n        if item % 2 == 0 {\n            even = item\n            count += 1\n            break\n        }\n    }\n    for item in list1 {\n        if item % 2 != 0 {\n            odd = item\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            flag = true\n            break\n        }\n    }\n    if flag == false {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int?\n    var odd: Int?\n    for i in list1 {\n        if i % 2 == 0 {\n            if even == nil {\n                even = i\n            }\n        } else {\n            if odd == nil {\n                odd = i\n            }\n        }\n    }\n    return even! - odd!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 {\n            if !foundEven {\n                even = item\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = item\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 {\n            if !foundEven {\n                even = item\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = item\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmp8sgv_0a_/tmp8sgv_0a_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1952c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb1649b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb1649988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb16487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sgv_0a_                        0x000055e9ea8f241e <unavailable> + 5150\n5    libc.so.6                          0x00002b8bb1b3e460 __libc_start_main + 245\n6    tmp8sgv_0a_                        0x000055e9ea8f2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int?\n    var odd: Int?\n    for num in list1 {\n        if num % 2 == 0 {\n            if even == nil {\n                even = num\n            }\n        } else {\n            if odd == nil {\n                odd = num\n            }\n        }\n    }\n    if even == nil || odd == nil {\n        return 0\n    }\n    return even! - odd!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for item in list1 {\n        if item % 2 == 0 {\n            even = item\n            even_found = true\n        } else {\n            odd = item\n            odd_found = true\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmp96ephijd/tmp96ephijd.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b34a98b9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b34a95b0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b34a95b0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b34a95af7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp96ephijd                        0x0000560b27b7952e <unavailable> + 5422\n5    libc.so.6                          0x00002b34a9aa5460 __libc_start_main + 245\n6    tmp96ephijd                        0x0000560b27b79169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmp8sgv_0a_/tmp8sgv_0a_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1952c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb1649b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb1649988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb16487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sgv_0a_                        0x000055e9ea8f241e <unavailable> + 5150\n5    libc.so.6                          0x00002b8bb1b3e460 __libc_start_main + 245\n6    tmp8sgv_0a_                        0x000055e9ea8f2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even = i\n            even_found = true\n        } else if i % 2 != 0 && !odd_found {\n            odd = i\n            odd_found = true\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 && !foundEven {\n            even = item\n            foundEven = true\n        }\n        if item % 2 != 0 && !foundOdd {\n            odd = item\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_list = [Int]()\n    var odd_list = [Int]()\n    for i in list1 {\n        if i % 2 == 0 {\n            even_list.append(i)\n        } else {\n            odd_list.append(i)\n        }\n    }\n    return even_list[0] - odd_list[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 {\n            if !foundEven {\n                even = item\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = item\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    \n    for num in list1 {\n        if num % 2 == 0 {\n            if !foundEven {\n                even = num\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = num\n                foundOdd = true\n            }\n        }\n        \n        if foundEven && foundOdd {\n            break\n        }\n    }\n    \n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for item in list1 {\n        if item % 2 == 0 && !even_found {\n            even = item\n            even_found = true\n        }\n        if item % 2 != 0 && !odd_found {\n            odd = item\n            odd_found = true\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_index = 0\n    var odd_index = 0\n    var even_found = false\n    var odd_found = false\n    for (index, value) in list1.enumerated() {\n        if value % 2 == 0 && !even_found {\n            even_index = index\n            even_found = true\n        }\n        if value % 2 != 0 && !odd_found {\n            odd_index = index\n            odd_found = true\n        }\n    }\n    return even_index - odd_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmpb4o0u8jl/tmpb4o0u8jl.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ce52fcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ce4ff3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ce4ff3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ce4ff27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb4o0u8jl                        0x00005595676615de <unavailable> + 5598\n5    libc.so.6                          0x00002b7ce54e8460 __libc_start_main + 245\n6    tmpb4o0u8jl                        0x0000559567661219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var diff = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    diff = even - odd\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var count: Int = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even = i\n            even_found = true\n        }\n        if i % 2 != 0 && !odd_found {\n            odd = i\n            odd_found = true\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if !flag {\n                even = i\n                flag = true\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmpp049nc36/tmpp049nc36.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52c090ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52c0605b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52c0605988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52c06047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp049nc36                        0x0000557ff3a3e52e <unavailable> + 5422\n5    libc.so.6                          0x00002b52c0afa460 __libc_start_main + 245\n6    tmpp049nc36                        0x0000557ff3a3e169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        }\n        else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmp9qmygzjf/tmp9qmygzjf.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b627a182c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6279e79b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6279e79988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6279e787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9qmygzjf                        0x0000555ac4e0752e <unavailable> + 5422\n5    libc.so.6                          0x00002b627a36e460 __libc_start_main + 245\n6    tmp9qmygzjf                        0x0000555ac4e07169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == false {\n                even = i\n                flag = true\n            }\n        }\n        else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmp8mcayc6u/tmp8mcayc6u.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aef7d256c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aef7cf4db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aef7cf4d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aef7cf4c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8mcayc6u                        0x000055b7c3ae552e <unavailable> + 5422\n5    libc.so.6                          0x00002aef7d442460 __libc_start_main + 245\n6    tmp8mcayc6u                        0x000055b7c3ae5169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    var j = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            i += 1\n            break\n        }\n        i += 1\n    }\n    while j < list1.count {\n        if list1[j] % 2 != 0 {\n            odd = list1[j]\n            j += 1\n            break\n        }\n        j += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            flag = true\n            break\n        }\n    }\n    if flag == false {\n        return 0\n    }\n    flag = false\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            flag = true\n            break\n        }\n    }\n    if flag == false {\n        return 0\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = true\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag {\n                even = i\n                flag = false\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmp_0vv6vno/tmp_0vv6vno.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5b15df5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5b15aecb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5b15aec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5b15aeb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_0vv6vno                        0x000055edfafbd52e <unavailable> + 5422\n5    libc.so.6                          0x00002b5b15fe1460 __libc_start_main + 245\n6    tmp_0vv6vno                        0x000055edfafbd169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even_num - odd_num\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 {\n            if !foundEven {\n                even = item\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = item\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even = i\n            even_found = true\n        }\n        if i % 2 != 0 && !odd_found {\n            odd = i\n            odd_found = true\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    \n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmp2f6x0sfu/tmp2f6x0sfu.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1c0a472c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1c0a169b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1c0a169988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1c0a1687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2f6x0sfu                        0x00005592afe1d41e <unavailable> + 5150\n5    libc.so.6                          0x00002b1c0a65e460 __libc_start_main + 245\n6    tmp2f6x0sfu                        0x00005592afe1d059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            flag = true\n            break\n        }\n    }\n    if flag {\n        for i in list1 {\n            if i % 2 != 0 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        }\n        else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "tmpirad0952/tmpirad0952.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab263faec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab263ca5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab263ca5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab263ca47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpirad0952                        0x000055e97f76362f <unavailable> + 5679\n5    libc.so.6                          0x00002ab26419a460 __libc_start_main + 245\n6    tmpirad0952                        0x000055e97f763169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_index = 0\n    var odd_index = 0\n    var even_found = false\n    var odd_found = false\n    for (index, value) in list1.enumerated() {\n        if value % 2 == 0 && even_found == false {\n            even_index = index\n            even_found = true\n        }\n        if value % 2 != 0 && odd_found == false {\n            odd_index = index\n            odd_found = true\n        }\n        if even_found == true && odd_found == true {\n            break\n        }\n    }\n    return even_index - odd_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmpxgnuq6o_/tmpxgnuq6o_.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c06a13c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c0670ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7c0670a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7c067097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxgnuq6o_                        0x00005639f22965de <unavailable> + 5598\n5    libc.so.6                          0x00002b7c06bff460 __libc_start_main + 245\n6    tmpxgnuq6o_                        0x00005639f2296219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_list = list1.filter { $0 % 2 == 0 }\n    var odd_list = list1.filter { $0 % 2 != 0 }\n    let even_first = even_list.first ?? 0\n    let odd_first = odd_list.first ?? 0\n    return even_first - odd_first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = true\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag {\n                even = i\n                flag = false\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmp_0vv6vno/tmp_0vv6vno.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5b15df5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5b15aecb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5b15aec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5b15aeb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_0vv6vno                        0x000055edfafbd52e <unavailable> + 5422\n5    libc.so.6                          0x00002b5b15fe1460 __libc_start_main + 245\n6    tmp_0vv6vno                        0x000055edfafbd169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            even_found = true\n        } else {\n            odd = i\n            odd_found = true\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmp7iw7v_fm/tmp7iw7v_fm.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a1cdcfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a1cac6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a1cac6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a1cac57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7iw7v_fm                        0x0000559a2408152e <unavailable> + 5422\n5    libc.so.6                          0x00002b2a1cfbb460 __libc_start_main + 245\n6    tmp7iw7v_fm                        0x0000559a24081169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            flag = 1\n            break\n        }\n    }\n    if flag == 0 {\n        return -1\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            even_found = true\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            odd_found = true\n            break\n        }\n    }\n    if even_found && odd_found {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            even_found = true\n        }\n        if i % 2 != 0 {\n            odd = i\n            odd_found = true\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmptpy699b3/tmptpy699b3.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad807df5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad807aecb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad807aec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad807aeb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptpy699b3                        0x00005588b0ea252e <unavailable> + 5422\n5    libc.so.6                          0x00002ad807fe1460 __libc_start_main + 245\n6    tmptpy699b3                        0x00005588b0ea2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var result = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    result = even - odd\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_list = [Int]()\n    var odd_list = [Int]()\n    for i in list1 {\n        if i % 2 == 0 {\n            even_list.append(i)\n        } else {\n            odd_list.append(i)\n        }\n    }\n    return even_list[0] - odd_list[0]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var first_even = true\n    var first_odd = true\n    for i in list1 {\n        if i % 2 == 0 {\n            if first_even {\n                even = i\n                first_even = false\n            }\n        } else {\n            if first_odd {\n                odd = i\n                first_odd = false\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag_even = false\n    var flag_odd = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag_even == false {\n                even = i\n                flag_even = true\n            }\n        } else {\n            if flag_odd == false {\n                odd = i\n                flag_odd = true\n            }\n        }\n        if flag_even && flag_odd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for num in list1 {\n        if num % 2 == 0 {\n            even_num = num\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for num in list1 {\n        if num % 2 != 0 {\n            odd_num = num\n            break\n        }\n    }\n    return even_num - odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        }\n        else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmp9qmygzjf/tmp9qmygzjf.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b627a182c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6279e79b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6279e79988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6279e787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9qmygzjf                        0x0000555ac4e0752e <unavailable> + 5422\n5    libc.so.6                          0x00002b627a36e460 __libc_start_main + 245\n6    tmp9qmygzjf                        0x0000555ac4e07169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var flag_even: Bool = false\n    var flag_odd: Bool = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag_even == false {\n                even = i\n                flag_even = true\n            }\n        } else {\n            if flag_odd == false {\n                odd = i\n                flag_odd = true\n            }\n        }\n        if flag_even && flag_odd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmpouzxec7n/tmpouzxec7n.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b004d44bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b004d142b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b004d142988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b004d1417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpouzxec7n                        0x00005577b5f6762f <unavailable> + 5679\n5    libc.so.6                          0x00002b004d637460 __libc_start_main + 245\n6    tmpouzxec7n                        0x00005577b5f67169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            if flag == 1 {\n                odd = i\n                flag = 2\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmp57bdhjzw/tmp57bdhjzw.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fea3bcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3fea0b3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3fea0b3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3fea0b27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp57bdhjzw                        0x000055e0e6f9862f <unavailable> + 5679\n5    libc.so.6                          0x00002b3fea5a8460 __libc_start_main + 245\n6    tmp57bdhjzw                        0x000055e0e6f98169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 {\n            if !foundEven {\n                even = item\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = item\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "tmp8sgv_0a_/tmp8sgv_0a_.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bb1952c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bb1649b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bb1649988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bb16487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sgv_0a_                        0x000055e9ea8f241e <unavailable> + 5150\n5    libc.so.6                          0x00002b8bb1b3e460 __libc_start_main + 245\n6    tmp8sgv_0a_                        0x000055e9ea8f2059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for number in list1 {\n        if number % 2 == 0 {\n            if !foundEven {\n                even = number\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = number\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int?\n    var odd: Int?\n    for i in list1 {\n        if i % 2 == 0 {\n            if even == nil {\n                even = i\n            }\n        } else {\n            if odd == nil {\n                odd = i\n            }\n        }\n    }\n    return even! - odd!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    \n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            even_found = true\n        } else {\n            odd = i\n            odd_found = true\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmpgcge0zyc/tmpgcge0zyc.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af6ce916c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af6ce60db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af6ce60d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af6ce60c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgcge0zyc                        0x000055cd5b38252e <unavailable> + 5422\n5    libc.so.6                          0x00002af6ceb02460 __libc_start_main + 245\n6    tmpgcge0zyc                        0x000055cd5b382169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for i in list1 {\n        if i % 2 == 0 && even_found == false {\n            even = i\n            even_found = true\n        }\n        if i % 2 != 0 && odd_found == false {\n            odd = i\n            odd_found = true\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            even_found = true\n        }\n        else {\n            odd = i\n            odd_found = true\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmpypoxh0vo/tmpypoxh0vo.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6ce48b8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6ce45afb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6ce45af988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6ce45ae7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpypoxh0vo                        0x000055d39726e52e <unavailable> + 5422\n5    libc.so.6                          0x00002b6ce4aa4460 __libc_start_main + 245\n6    tmpypoxh0vo                        0x000055d39726e169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if !foundEven {\n                even = i\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = i\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var count: Int = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123564,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for num in list1 {\n        if num % 2 == 0 {\n            even = num\n            count += 1\n            break\n        }\n    }\n    for num in list1 {\n        if num % 2 != 0 {\n            odd = num\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for i in list1 {\n        if i % 2 == 0 && even_found == false {\n            even = i\n            even_found = true\n        } else if i % 2 != 0 && odd_found == false {\n            odd = i\n            odd_found = true\n        }\n        if even_found == true && odd_found == true {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 {\n            if !foundEven {\n                even = item\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = item\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    \n    for num in list1 {\n        if num % 2 == 0 {\n            if !foundEven {\n                even = num\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = num\n                foundOdd = true\n            }\n        }\n        \n        if foundEven && foundOdd {\n            break\n        }\n    }\n    \n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = true\n    for i in list1 {\n        if i % 2 == 0 && flag {\n            even = i\n            flag = false\n        } else if i % 2 != 0 && flag {\n            odd = i\n            flag = false\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmpnp8nucng/tmpnp8nucng.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba27d9b3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba27d6aab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba27d6aa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba27d6a97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnp8nucng                        0x00005619a5bb552e <unavailable> + 5422\n5    libc.so.6                          0x00002ba27db9f460 __libc_start_main + 245\n6    tmpnp8nucng                        0x00005619a5bb5169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if foundEven == false {\n                even = i\n                foundEven = true\n            }\n        } else {\n            if foundOdd == false {\n                odd = i\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 {\n            if !foundEven {\n                even = item\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = item\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_index = -1\n    var odd_index = -1\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even_index = i\n            break\n        }\n    }\n    for i in 0..<list1.count {\n        if list1[i] % 2 != 0 {\n            odd_index = i\n            break\n        }\n    }\n    if even_index == -1 || odd_index == -1 {\n        return -1\n    }\n    return even_index - odd_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmpj5fhvusc/tmpj5fhvusc.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56936aec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56933a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56933a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56933a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj5fhvusc                        0x000055d1b237f56e <unavailable> + 5486\n5    libc.so.6                          0x00002b569389a460 __libc_start_main + 245\n6    tmpj5fhvusc                        0x000055d1b237f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given list.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123565,
      "stdout": "",
      "stderr": "tmpouzxec7n/tmpouzxec7n.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b004d44bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b004d142b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b004d142988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b004d1417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpouzxec7n                        0x00005577b5f6762f <unavailable> + 5679\n5    libc.so.6                          0x00002b004d637460 __libc_start_main + 245\n6    tmpouzxec7n                        0x00005577b5f67169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}