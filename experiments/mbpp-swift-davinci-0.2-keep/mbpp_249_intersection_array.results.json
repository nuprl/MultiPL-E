{
  "name": "mbpp_249_intersection_array",
  "language": "swift",
  "prompt": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) && !result.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    set_nums1.intersection(set_nums2)\n    return Array(set_nums1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpdvlvkd2c/tmpdvlvkd2c.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba024448c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba02413fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba02413f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba02413e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdvlvkd2c                        0x000056439556d600 <unavailable> + 5632\n5    libc.so.6                          0x00002ba024634460 __libc_start_main + 245\n6    tmpdvlvkd2c                        0x000056439556d179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = [Int]()\n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmp860gae5j/tmp860gae5j.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b17578e4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b17575dbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b17575db988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17575da7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp860gae5j                        0x0000558e37f87930 <unavailable> + 6448\n5    libc.so.6                          0x00002b1757ad0460 __libc_start_main + 245\n6    tmp860gae5j                        0x0000558e37f874a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var dict = [Int: Int]()\n    var result = [Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var set_intersection = Set<Int>()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            set_intersection.insert(num)\n        }\n    }\n    \n    return Array(set_intersection)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmp7zg3dpnm/tmp7zg3dpnm.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeff436ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeff4065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeff4065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeff40647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7zg3dpnm                        0x0000557a92711920 <unavailable> + 6432\n5    libc.so.6                          0x00002aeff455a460 __libc_start_main + 245\n6    tmp7zg3dpnm                        0x0000557a92711499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpj9017q3h/tmpj9017q3h.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab6c7bddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6c78d4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6c78d4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6c78d37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj9017q3h                        0x00005561e4bcf760 <unavailable> + 5984\n5    libc.so.6                          0x00002ab6c7dc9460 __libc_start_main + 245\n6    tmpj9017q3h                        0x00005561e4bcf2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n            dict[num] = nil\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_intersection = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            array_intersection.append(num)\n        }\n    }\n    return array_intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpu2e_x6e_/tmpu2e_x6e_.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2c7dc6fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2c7d966b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2c7d966988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2c7d9657b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu2e_x6e_                        0x0000561cd101b930 <unavailable> + 6448\n5    libc.so.6                          0x00002b2c7de5b460 __libc_start_main + 245\n6    tmpu2e_x6e_                        0x0000561cd101b4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var result = [Int]()\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                result.append(array_nums1[i])\n                array_nums2.remove(at: j)\n                break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num] = dict[num]! + 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n            dict[num] = dict[num]! - 1\n            if dict[num] == 0 {\n                dict.removeValue(forKey: num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    set_nums1.formIntersection(set_nums2)\n    return Array(set_nums1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpn0h4pd1i/tmpn0h4pd1i.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0006d2bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0006a22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0006a22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0006a217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn0h4pd1i                        0x000055ec45bef620 <unavailable> + 5664\n5    libc.so.6                          0x00002b0006f17460 __libc_start_main + 245\n6    tmpn0h4pd1i                        0x000055ec45bef199 <unavailable> + 4505\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for num in array_nums1 {\n        set.insert(num)\n    }\n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    set_nums1.formIntersection(set_nums2)\n    return Array(set_nums1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpn0h4pd1i/tmpn0h4pd1i.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0006d2bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0006a22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0006a22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0006a217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn0h4pd1i                        0x000055ec45bef620 <unavailable> + 5664\n5    libc.so.6                          0x00002b0006f17460 __libc_start_main + 245\n6    tmpn0h4pd1i                        0x000055ec45bef199 <unavailable> + 4505\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if let _ = dict[num] {\n            dict[num]! += 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    for num in array_nums2 {\n        if let count = dict[num] {\n            if count > 0 {\n                result.append(num)\n                dict[num]! -= 1\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var set_nums1: Set<Int> = []\n    var set_nums2: Set<Int> = []\n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmp76ddp1ue/tmp76ddp1ue.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ee0c90c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ee0987b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ee0987988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ee09867b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76ddp1ue                        0x00005627d90d08e0 <unavailable> + 6368\n5    libc.so.6                          0x00002b8ee0e7c460 __libc_start_main + 245\n6    tmp76ddp1ue                        0x00005627d90d0459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_intersection = [Int]()\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                array_intersection.append(array_nums1[i])\n            }\n        }\n    }\n    return array_intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num]! += 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil && dict[num]! > 0 {\n            result.append(num)\n            dict[num]! -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpnjec6opx/tmpnjec6opx.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b623f3dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b623f0d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b623f0d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b623f0d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnjec6opx                        0x000055f58de70930 <unavailable> + 6448\n5    libc.so.6                          0x00002b623f5c8460 __libc_start_main + 245\n6    tmpnjec6opx                        0x000055f58de704a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) && !result.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    var result = [Int]()\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmp_glet9im/tmp_glet9im.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48faa08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48fa6ffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b48fa6ff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48fa6fe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_glet9im                        0x000055b9846d6760 <unavailable> + 5984\n5    libc.so.6                          0x00002b48fabf4460 __libc_start_main + 245\n6    tmp_glet9im                        0x000055b9846d62d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num] = dict[num]! + 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil {\n            if dict[num]! > 0 {\n                result.append(num)\n                dict[num] = dict[num]! - 1\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) && !result.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    var intersection = [Int]()\n    for num in set1 {\n        if set2.contains(num) {\n            intersection.append(num)\n        }\n    }\n    return intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmpg1pl0lms/tmpg1pl0lms.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0504798c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b050448fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b050448f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b050448e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg1pl0lms                        0x0000559652125760 <unavailable> + 5984\n5    libc.so.6                          0x00002b0504984460 __libc_start_main + 245\n6    tmpg1pl0lms                        0x00005596521252d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for num in array_nums1 {\n        set.insert(num)\n    }\n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) && !result.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var set_result = Set<Int>()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            set_result.insert(num)\n        }\n    }\n    \n    return Array(set_result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmp_g0d36w1/tmp_g0d36w1.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6dfbaedc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6dfb7e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6dfb7e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6dfb7e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_g0d36w1                        0x000055b300490920 <unavailable> + 6432\n5    libc.so.6                          0x00002b6dfbcd9460 __libc_start_main + 245\n6    tmp_g0d36w1                        0x000055b300490499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    var result = [Int]()\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmp74y_pb_m/tmp74y_pb_m.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae5211c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae520ebdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae520ebd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae520ebc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp74y_pb_m                        0x000055d3f2be4760 <unavailable> + 5984\n5    libc.so.6                          0x00002ae5213b2460 __libc_start_main + 245\n6    tmp74y_pb_m                        0x000055d3f2be42d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpj9017q3h/tmpj9017q3h.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab6c7bddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6c78d4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6c78d4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6c78d37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj9017q3h                        0x00005561e4bcf760 <unavailable> + 5984\n5    libc.so.6                          0x00002ab6c7dc9460 __libc_start_main + 245\n6    tmpj9017q3h                        0x00005561e4bcf2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num] = dict[num]! + 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n            dict[num] = dict[num]! - 1\n            if dict[num] == 0 {\n                dict.removeValue(forKey: num)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n            dict[num] = nil\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for num in array_nums1 {\n        set.insert(num)\n    }\n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n            set.remove(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var nums1 = array_nums1\n    var nums2 = array_nums2\n    if nums1.count > nums2.count {\n        nums1 = array_nums2\n        nums2 = array_nums1\n    }\n    for i in 0..<nums1.count {\n        if nums2.contains(nums1[i]) {\n            result.append(nums1[i])\n            nums2.remove(at: nums2.index(of: nums1[i])!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var intersection_array = [Int]()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    \n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmp7e4l2pnj/tmp7e4l2pnj.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cc91f8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cc8eefb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cc8eef988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cc8eee7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7e4l2pnj                        0x000055b8f6339930 <unavailable> + 6448\n5    libc.so.6                          0x00002b6cc93e4460 __libc_start_main + 245\n6    tmp7e4l2pnj                        0x000055b8f63394a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpnjec6opx/tmpnjec6opx.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b623f3dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b623f0d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b623f0d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b623f0d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnjec6opx                        0x000055f58de70930 <unavailable> + 6448\n5    libc.so.6                          0x00002b623f5c8460 __libc_start_main + 245\n6    tmpnjec6opx                        0x000055f58de704a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = Set<Int>()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.insert(num)\n        }\n    }\n    \n    return Array(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpb9nrzyok/tmpb9nrzyok.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b968b7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b968b4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b968b4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b968b4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb9nrzyok                        0x000055b103978920 <unavailable> + 6432\n5    libc.so.6                          0x00002b968b9c6460 __libc_start_main + 245\n6    tmpb9nrzyok                        0x000055b103978499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var dict: [Int: Int] = [:]\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num]! += 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil && dict[num]! > 0 {\n            result.append(num)\n            dict[num]! -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var result = [Int]()\n    if array_nums1.count > array_nums2.count {\n        swap(&array_nums1, &array_nums2)\n    }\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n            array_nums2.remove(at: array_nums2.firstIndex(of: num)!)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpj9017q3h/tmpj9017q3h.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab6c7bddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6c78d4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6c78d4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6c78d37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj9017q3h                        0x00005561e4bcf760 <unavailable> + 5984\n5    libc.so.6                          0x00002ab6c7dc9460 __libc_start_main + 245\n6    tmpj9017q3h                        0x00005561e4bcf2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmpjzhek2l7/tmpjzhek2l7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af26bac7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af26b7beb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af26b7be988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af26b7bd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjzhek2l7                        0x0000560875ceb930 <unavailable> + 6448\n5    libc.so.6                          0x00002af26bcb3460 __libc_start_main + 245\n6    tmpjzhek2l7                        0x0000560875ceb4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpu2e_x6e_/tmpu2e_x6e_.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2c7dc6fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2c7d966b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2c7d966988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2c7d9657b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu2e_x6e_                        0x0000561cd101b930 <unavailable> + 6448\n5    libc.so.6                          0x00002b2c7de5b460 __libc_start_main + 245\n6    tmpu2e_x6e_                        0x0000561cd101b4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    var result = [Int]()\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmpyd72m18o/tmpyd72m18o.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8569ccfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b85699c6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b85699c6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b85699c57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyd72m18o                        0x000055641184f930 <unavailable> + 6448\n5    libc.so.6                          0x00002b8569ebb460 __libc_start_main + 245\n6    tmpyd72m18o                        0x000055641184f4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    \n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num]! += 1\n        }\n    }\n    \n    for num in array_nums2 {\n        if dict[num] != nil && dict[num]! > 0 {\n            result.append(num)\n            dict[num]! -= 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var intersection = Set<Int>()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            intersection.insert(num)\n        }\n    }\n    \n    return Array(intersection)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmpk37_w7o5/tmpk37_w7o5.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b143e277c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b143df6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b143df6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b143df6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk37_w7o5                        0x00005572fe616920 <unavailable> + 6432\n5    libc.so.6                          0x00002b143e463460 __libc_start_main + 245\n6    tmpk37_w7o5                        0x00005572fe616499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_intersection = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            array_intersection.append(num)\n        }\n    }\n    return array_intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for num in array_nums1 {\n        set.insert(num)\n    }\n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = Set<Int>()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.insert(num)\n        }\n    }\n    \n    return Array(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpb9nrzyok/tmpb9nrzyok.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b968b7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b968b4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b968b4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b968b4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb9nrzyok                        0x000055b103978920 <unavailable> + 6432\n5    libc.so.6                          0x00002b968b9c6460 __libc_start_main + 245\n6    tmpb9nrzyok                        0x000055b103978499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    var result = [Int]()\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmp9493lgky/tmp9493lgky.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0fa932bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0fa9022b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0fa9022988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0fa90217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9493lgky                        0x000055f0bdc2d930 <unavailable> + 6448\n5    libc.so.6                          0x00002b0fa9517460 __libc_start_main + 245\n6    tmp9493lgky                        0x000055f0bdc2d4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    \n    for num in array_nums1 {\n        set.insert(num)\n    }\n    \n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection_array: [Int] = []\n    var i = 0\n    var j = 0\n    array_nums1.sort()\n    array_nums2.sort()\n    while i < array_nums1.count && j < array_nums2.count {\n        if array_nums1[i] == array_nums2[j] {\n            intersection_array.append(array_nums1[i])\n            i += 1\n            j += 1\n        } else if array_nums1[i] < array_nums2[j] {\n            i += 1\n        } else {\n            j += 1\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for num in array_nums1 {\n        set.insert(num)\n    }\n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmp76ria3il/tmp76ria3il.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1759ca0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1759997b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1759997988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17599967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76ria3il                        0x000055956d33e760 <unavailable> + 5984\n5    libc.so.6                          0x00002b1759e8c460 __libc_start_main + 245\n6    tmp76ria3il                        0x000055956d33e2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) && !result.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = Set<Int>()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.insert(num)\n        }\n    }\n    \n    return Array(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpb9nrzyok/tmpb9nrzyok.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b968b7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b968b4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b968b4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b968b4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb9nrzyok                        0x000055b103978920 <unavailable> + 6432\n5    libc.so.6                          0x00002b968b9c6460 __libc_start_main + 245\n6    tmpb9nrzyok                        0x000055b103978499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection_array = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n            array_nums2.remove(at: array_nums2.firstIndex(of: num)!)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_intersection = [Int]()\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    array_nums1.sort()\n    array_nums2.sort()\n    var i = 0\n    var j = 0\n    while i < array_nums1.count && j < array_nums2.count {\n        if array_nums1[i] == array_nums2[j] {\n            array_intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        } else if array_nums1[i] < array_nums2[j] {\n            i += 1\n        } else {\n            j += 1\n        }\n    }\n    return array_intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    for num in array_nums1 {\n        set.insert(num)\n    }\n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpu2e_x6e_/tmpu2e_x6e_.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2c7dc6fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2c7d966b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2c7d966988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2c7d9657b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu2e_x6e_                        0x0000561cd101b930 <unavailable> + 6448\n5    libc.so.6                          0x00002b2c7de5b460 __libc_start_main + 245\n6    tmpu2e_x6e_                        0x0000561cd101b4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpu2e_x6e_/tmpu2e_x6e_.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2c7dc6fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2c7d966b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2c7d966988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2c7d9657b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu2e_x6e_                        0x0000561cd101b930 <unavailable> + 6448\n5    libc.so.6                          0x00002b2c7de5b460 __libc_start_main + 245\n6    tmpu2e_x6e_                        0x0000561cd101b4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Bool]()\n    for num in array_nums1 {\n        dict[num] = true\n    }\n    for num in array_nums2 {\n        if dict[num] == true {\n            result.append(num)\n            dict[num] = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    var intersection = set1.intersection(set2)\n    return Array(intersection)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmpf_wjxqg8/tmpf_wjxqg8.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b220d045c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b220cd3cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b220cd3c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b220cd3b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf_wjxqg8                        0x00005636ff8f5600 <unavailable> + 5632\n5    libc.so.6                          0x00002b220d231460 __libc_start_main + 245\n6    tmpf_wjxqg8                        0x00005636ff8f5179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var set_intersection = Set<Int>()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    set_intersection = set_nums1.intersection(set_nums2)\n    \n    return Array(set_intersection)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmpe5k6i6_v/tmpe5k6i6_v.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2864f3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2864c35b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2864c35988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2864c347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe5k6i6_v                        0x000055675868d7d0 <unavailable> + 6096\n5    libc.so.6                          0x00002b286512a460 __libc_start_main + 245\n6    tmpe5k6i6_v                        0x000055675868d349 <unavailable> + 4937\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    var intersection = [Int]()\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            intersection.append(num)\n        }\n    }\n    return intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmp98a7e46l/tmp98a7e46l.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba68c69cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba68c393b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba68c393988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba68c3927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp98a7e46l                        0x00005587332da911 <unavailable> + 6417\n5    libc.so.6                          0x00002ba68c888460 __libc_start_main + 245\n6    tmp98a7e46l                        0x00005587332da2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    var result = [Int]()\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpx7ir1m9c/tmpx7ir1m9c.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e0477dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e04474b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e04474988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e044737b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx7ir1m9c                        0x0000563664047760 <unavailable> + 5984\n5    libc.so.6                          0x00002b2e04969460 __libc_start_main + 245\n6    tmpx7ir1m9c                        0x00005636640472d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection = [Int]()\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                intersection.append(array_nums1[i])\n                array_nums1.remove(at: i)\n                array_nums2.remove(at: j)\n            }\n        }\n    }\n    return intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b77cc8dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b77cc5d3561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b77cc5d3286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b77cc5d313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b77cc5d2bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b77cc3d3e83 <unavailable> + 188035\n6    tmpxc540v0m                        0x000055631d575e99 <unavailable> + 7833\n7    tmpxc540v0m                        0x000055631d57569f <unavailable> + 5791\n8    libc.so.6                          0x00002b77ccac8460 __libc_start_main + 245\n9    tmpxc540v0m                        0x000055631d575309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num] = dict[num]! + 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil && dict[num]! > 0 {\n            result.append(num)\n            dict[num] = dict[num]! - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var intersection = Set<Int>()\n    for i in array_nums1 {\n        set1.insert(i)\n    }\n    for i in array_nums2 {\n        set2.insert(i)\n    }\n    for i in set1 {\n        if set2.contains(i) {\n            intersection.insert(i)\n        }\n    }\n    return Array(intersection)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmpxvr7eyge/tmpxvr7eyge.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4ed5ca0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4ed5997b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4ed5997988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4ed59967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxvr7eyge                        0x0000565027374920 <unavailable> + 6432\n5    libc.so.6                          0x00002b4ed5e8c460 __libc_start_main + 245\n6    tmpxvr7eyge                        0x0000565027374499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmph4khr_g2/tmph4khr_g2.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32e054ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32e0245b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32e0245988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32e02447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph4khr_g2                        0x000055d6b011a930 <unavailable> + 6448\n5    libc.so.6                          0x00002b32e073a460 __libc_start_main + 245\n6    tmph4khr_g2                        0x000055d6b011a4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmph4khr_g2/tmph4khr_g2.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32e054ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32e0245b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32e0245988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32e02447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph4khr_g2                        0x000055d6b011a930 <unavailable> + 6448\n5    libc.so.6                          0x00002b32e073a460 __libc_start_main + 245\n6    tmph4khr_g2                        0x000055d6b011a4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpj9017q3h/tmpj9017q3h.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab6c7bddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6c78d4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6c78d4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6c78d37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj9017q3h                        0x00005561e4bcf760 <unavailable> + 5984\n5    libc.so.6                          0x00002ab6c7dc9460 __libc_start_main + 245\n6    tmpj9017q3h                        0x00005561e4bcf2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) && !result.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpu2e_x6e_/tmpu2e_x6e_.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2c7dc6fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2c7d966b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2c7d966988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2c7d9657b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu2e_x6e_                        0x0000561cd101b930 <unavailable> + 6448\n5    libc.so.6                          0x00002b2c7de5b460 __libc_start_main + 245\n6    tmpu2e_x6e_                        0x0000561cd101b4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num]! += 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n            dict[num] = nil\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection_array = [Int]()\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                intersection_array.append(array_nums1[i])\n                array_nums2.remove(at: j)\n                break\n            }\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in array_nums1 {\n        if array_nums2.contains(i) && !result.contains(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var intersection = Set<Int>()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            intersection.insert(num)\n        }\n    }\n    \n    return Array(intersection)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmpreeb1_eb/tmpreeb1_eb.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b02b70f0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b02b6de7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b02b6de7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b02b6de67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpreeb1_eb                        0x000055ea0ba8d920 <unavailable> + 6432\n5    libc.so.6                          0x00002b02b72dc460 __libc_start_main + 245\n6    tmpreeb1_eb                        0x000055ea0ba8d499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var set_intersection = Set<Int>()\n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            set_intersection.insert(num)\n        }\n    }\n    return Array(set_intersection)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmptif7v9we/tmptif7v9we.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af1b59edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af1b56e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af1b56e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af1b56e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptif7v9we                        0x000055efd95a5920 <unavailable> + 6432\n5    libc.so.6                          0x00002af1b5bd9460 __libc_start_main + 245\n6    tmptif7v9we                        0x000055efd95a5499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmpuclbvdgp/tmpuclbvdgp.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea5aa6dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea5a764b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea5a764988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea5a7637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuclbvdgp                        0x00005581a2d5b760 <unavailable> + 5984\n5    libc.so.6                          0x00002aea5ac59460 __libc_start_main + 245\n6    tmpuclbvdgp                        0x00005581a2d5b2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    var set_intersection = set_nums1.intersection(set_nums2)\n    return Array(set_intersection)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmpdgje12t9/tmpdgje12t9.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1afd290c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1afcf87b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1afcf87988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1afcf867b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdgje12t9                        0x0000557b5c76b600 <unavailable> + 5632\n5    libc.so.6                          0x00002b1afd47c460 __libc_start_main + 245\n6    tmpdgje12t9                        0x0000557b5c76b179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpnjec6opx/tmpnjec6opx.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b623f3dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b623f0d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b623f0d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b623f0d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnjec6opx                        0x000055f58de70930 <unavailable> + 6448\n5    libc.so.6                          0x00002b623f5c8460 __libc_start_main + 245\n6    tmpnjec6opx                        0x000055f58de704a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num]! += 1\n        }\n    }\n    \n    for num in array_nums2 {\n        if dict[num] != nil && dict[num]! > 0 {\n            result.append(num)\n            dict[num]! -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num]! += 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil && dict[num]! > 0 {\n            result.append(num)\n            dict[num]! -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    var result = [Int]()\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmp_glet9im/tmp_glet9im.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48faa08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48fa6ffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b48fa6ff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48fa6fe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_glet9im                        0x000055b9846d6760 <unavailable> + 5984\n5    libc.so.6                          0x00002b48fabf4460 __libc_start_main + 245\n6    tmp_glet9im                        0x000055b9846d62d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num] = dict[num]! + 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil && dict[num]! > 0 {\n            result.append(num)\n            dict[num] = dict[num]! - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var set_intersection = Set<Int>()\n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            set_intersection.insert(num)\n        }\n    }\n    return Array(set_intersection)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmptif7v9we/tmptif7v9we.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af1b59edc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af1b56e4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af1b56e4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af1b56e37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptif7v9we                        0x000055efd95a5920 <unavailable> + 6432\n5    libc.so.6                          0x00002af1b5bd9460 __libc_start_main + 245\n6    tmptif7v9we                        0x000055efd95a5499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpj9017q3h/tmpj9017q3h.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab6c7bddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6c78d4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6c78d4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6c78d37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj9017q3h                        0x00005561e4bcf760 <unavailable> + 5984\n5    libc.so.6                          0x00002ab6c7dc9460 __libc_start_main + 245\n6    tmpj9017q3h                        0x00005561e4bcf2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) && !result.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var result = [Int]()\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                result.append(array_nums1[i])\n                array_nums1.remove(at: i)\n                array_nums2.remove(at: j)\n                break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5758edbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5758bd2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b5758bd2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b5758bd213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b5758bd1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b57589d2e83 <unavailable> + 188035\n6    tmpus7abf_n                        0x000055de100f9e74 <unavailable> + 7796\n7    tmpus7abf_n                        0x000055de100f969f <unavailable> + 5791\n8    libc.so.6                          0x00002b57590c7460 __libc_start_main + 245\n9    tmpus7abf_n                        0x000055de100f9309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var set_nums1: Set<Int> = []\n    var set_nums2: Set<Int> = []\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmpji1v83hw/tmpji1v83hw.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d96eebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d96be2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d96be2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d96be17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpji1v83hw                        0x0000561462d1b8e0 <unavailable> + 6368\n5    libc.so.6                          0x00002b1d970d7460 __libc_start_main + 245\n6    tmpji1v83hw                        0x0000561462d1b459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    var result = [Int]()\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmp_glet9im/tmp_glet9im.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48faa08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48fa6ffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b48fa6ff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48fa6fe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_glet9im                        0x000055b9846d6760 <unavailable> + 5984\n5    libc.so.6                          0x00002b48fabf4460 __libc_start_main + 245\n6    tmp_glet9im                        0x000055b9846d62d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var dict: [Int: Int] = [:]\n    \n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    \n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpj9017q3h/tmpj9017q3h.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab6c7bddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6c78d4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6c78d4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6c78d37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj9017q3h                        0x00005561e4bcf760 <unavailable> + 5984\n5    libc.so.6                          0x00002ab6c7dc9460 __libc_start_main + 245\n6    tmpj9017q3h                        0x00005561e4bcf2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var dict: [Int: Int] = [:]\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpnjec6opx/tmpnjec6opx.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b623f3dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b623f0d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b623f0d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b623f0d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnjec6opx                        0x000055f58de70930 <unavailable> + 6448\n5    libc.so.6                          0x00002b623f5c8460 __libc_start_main + 245\n6    tmpnjec6opx                        0x000055f58de704a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Bool]()\n    for num in array_nums1 {\n        dict[num] = true\n    }\n    for num in array_nums2 {\n        if dict[num] == true {\n            result.append(num)\n            dict[num] = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_intersection = [Int]()\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    \n    array_nums1.sort()\n    array_nums2.sort()\n    \n    var i = 0\n    var j = 0\n    \n    while i < array_nums1.count && j < array_nums2.count {\n        if array_nums1[i] == array_nums2[j] {\n            array_intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        } else if array_nums1[i] < array_nums2[j] {\n            i += 1\n        } else {\n            j += 1\n        }\n    }\n    \n    return array_intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num] = dict[num]! + 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil && dict[num]! > 0 {\n            result.append(num)\n            dict[num] = dict[num]! - 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var set_intersection = Set<Int>()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            set_intersection.insert(num)\n        }\n    }\n    \n    return Array(set_intersection)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmp7zg3dpnm/tmp7zg3dpnm.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeff436ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeff4065b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeff4065988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeff40647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7zg3dpnm                        0x0000557a92711920 <unavailable> + 6432\n5    libc.so.6                          0x00002aeff455a460 __libc_start_main + 245\n6    tmp7zg3dpnm                        0x0000557a92711499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Bool]()\n    for num in array_nums1 {\n        dict[num] = true\n    }\n    for num in array_nums2 {\n        if dict[num] == true {\n            result.append(num)\n            dict[num] = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmp76ria3il/tmp76ria3il.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1759ca0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1759997b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1759997988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17599967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76ria3il                        0x000055956d33e760 <unavailable> + 5984\n5    libc.so.6                          0x00002b1759e8c460 __libc_start_main + 245\n6    tmp76ria3il                        0x000055956d33e2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    \n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    \n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num1 in array_nums1 {\n        for num2 in array_nums2 {\n            if num1 == num2 {\n                result.append(num1)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_intersection = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            array_intersection.append(num)\n        }\n    }\n    return array_intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "tmp210opmm_/tmp210opmm_.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdab489c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdab180b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdab180988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdab17f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp210opmm_                        0x0000560d130ca930 <unavailable> + 6448\n5    libc.so.6                          0x00002acdab675460 __libc_start_main + 245\n6    tmp210opmm_                        0x0000560d130ca4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array = [Int]()\n    var dict = [Int: Int]()\n    \n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num]! += 1\n        }\n    }\n    \n    for num in array_nums2 {\n        if dict[num] != nil {\n            intersection_array.append(num)\n            dict[num] = nil\n        }\n    }\n    \n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num]! += 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n            dict[num]! -= 1\n            if dict[num]! == 0 {\n                dict[num] = nil\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmp76ria3il/tmp76ria3il.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1759ca0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1759997b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1759997988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b17599967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp76ria3il                        0x000055956d33e760 <unavailable> + 5984\n5    libc.so.6                          0x00002b1759e8c460 __libc_start_main + 245\n6    tmp76ria3il                        0x000055956d33e2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set(array_nums1)\n    var set2 = Set(array_nums2)\n    set1.formIntersection(set2)\n    return Array(set1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmpp2tizfiw/tmpp2tizfiw.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b178c059c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b178bd50b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b178bd50988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b178bd4f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp2tizfiw                        0x000055d741264620 <unavailable> + 5664\n5    libc.so.6                          0x00002b178c245460 __libc_start_main + 245\n6    tmpp2tizfiw                        0x000055d741264199 <unavailable> + 4505\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpj9017q3h/tmpj9017q3h.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab6c7bddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6c78d4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6c78d4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6c78d37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj9017q3h                        0x00005561e4bcf760 <unavailable> + 5984\n5    libc.so.6                          0x00002ab6c7dc9460 __libc_start_main + 245\n6    tmpj9017q3h                        0x00005561e4bcf2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_intersection = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            array_intersection.append(num)\n        }\n    }\n    return array_intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    set_nums1.intersection(set_nums2)\n    return Array(set_nums1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpdvlvkd2c/tmpdvlvkd2c.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba024448c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba02413fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba02413f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba02413e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdvlvkd2c                        0x000056439556d600 <unavailable> + 5632\n5    libc.so.6                          0x00002ba024634460 __libc_start_main + 245\n6    tmpdvlvkd2c                        0x000056439556d179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var intersection = [Int]()\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                intersection.append(array_nums1[i])\n                array_nums2.remove(at: j)\n                break\n            }\n        }\n    }\n    return intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array = [Int]()\n    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    \n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "tmpmqqqrhng/tmpmqqqrhng.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b84ff809c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b84ff500b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b84ff500988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b84ff4ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmqqqrhng                        0x0000559024339930 <unavailable> + 6448\n5    libc.so.6                          0x00002b84ff9f5460 __libc_start_main + 245\n6    tmpmqqqrhng                        0x00005590243394a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums = Set<Int>()\n    for num in array_nums1 {\n        set_nums.insert(num)\n    }\n    for num in array_nums2 {\n        if set_nums.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "tmph4khr_g2/tmph4khr_g2.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b32e054ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b32e0245b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b32e0245988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b32e02447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph4khr_g2                        0x000055d6b011a930 <unavailable> + 6448\n5    libc.so.6                          0x00002b32e073a460 __libc_start_main + 245\n6    tmph4khr_g2                        0x000055d6b011a4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n            dict[num] = nil\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set = Set<Int>()\n    \n    for num in array_nums1 {\n        set.insert(num)\n    }\n    \n    for num in array_nums2 {\n        if set.contains(num) {\n            result.append(num)\n            set.remove(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123249,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpj9017q3h/tmpj9017q3h.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab6c7bddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab6c78d4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab6c78d4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab6c78d37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj9017q3h                        0x00005561e4bcf760 <unavailable> + 5984\n5    libc.so.6                          0x00002ab6c7dc9460 __libc_start_main + 245\n6    tmpj9017q3h                        0x00005561e4bcf2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var intersection_array: [Int] = []\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpu2e_x6e_/tmpu2e_x6e_.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2c7dc6fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2c7d966b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2c7d966988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2c7d9657b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu2e_x6e_                        0x0000561cd101b930 <unavailable> + 6448\n5    libc.so.6                          0x00002b2c7de5b460 __libc_start_main + 245\n6    tmpu2e_x6e_                        0x0000561cd101b4a9 <unavailable> + 5289\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    var intersection_array = [Int]()\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "tmpdtiwjhmj/tmpdtiwjhmj.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8a25050c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8a24d47b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8a24d47988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8a24d467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdtiwjhmj                        0x0000564dc4316760 <unavailable> + 5984\n5    libc.so.6                          0x00002b8a2523c460 __libc_start_main + 245\n6    tmpdtiwjhmj                        0x0000564dc43162d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    \n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num]! += 1\n        }\n    }\n    \n    for num in array_nums2 {\n        if dict[num] != nil && dict[num]! > 0 {\n            result.append(num)\n            dict[num]! -= 1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123250,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var array_intersection = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            array_intersection.append(num)\n        }\n    }\n    return array_intersection\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    set_nums1.formIntersection(set_nums2)\n    return Array(set_nums1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpn0h4pd1i/tmpn0h4pd1i.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0006d2bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0006a22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0006a22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0006a217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn0h4pd1i                        0x000055ec45bef620 <unavailable> + 5664\n5    libc.so.6                          0x00002b0006f17460 __libc_start_main + 245\n6    tmpn0h4pd1i                        0x000055ec45bef199 <unavailable> + 4505\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = Set<Int>()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.insert(num)\n        }\n    }\n    \n    return Array(result)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "tmpb9nrzyok/tmpb9nrzyok.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b968b7dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b968b4d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b968b4d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b968b4d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb9nrzyok                        0x000055b103978920 <unavailable> + 6432\n5    libc.so.6                          0x00002b968b9c6460 __libc_start_main + 245\n6    tmpb9nrzyok                        0x000055b103978499 <unavailable> + 5273\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    \n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    \n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1666123248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                result.append(array_nums1[i])\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
      "timestamp": 1665517415,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}