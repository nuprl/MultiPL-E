{
  "name": "mbpp_71_comb_sort",
  "language": "swift",
  "prompt": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(floor(Double(gap) / 1.247330950103979))\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "/tmp/tmpotibs4aj.swift:9:23: error: cannot find 'floor' in scope\n            gap = Int(floor(Double(gap) / 1.247330950103979))\n                      ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    \n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        \n        swapped = false\n        \n        for i in 0..<(nums.count - gap) {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    \n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Float(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var result = nums\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if result[i] > result[i + gap] {\n                result.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.3)\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.3)\n        }\n        swapped = false\n        for i in 0..<(nums.count - gap) {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    \n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        \n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    \n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    let shrink_factor = 1.3\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / shrink_factor)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    let shrink = 1.3\n    var swapped = true\n    \n    while swapped {\n        gap = Int(Double(gap) / shrink)\n        if gap > 1 {\n            swapped = false\n        }\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "tmpac6shwqz/tmpac6shwqz.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb94978c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb9466fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb9466f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb9466e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpac6shwqz                        0x00005577e6f545c4 <unavailable> + 5572\n5    libc.so.6                          0x00002aeb94b64460 __libc_start_main + 245\n6    tmpac6shwqz                        0x00005577e6f541a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    \n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    let shrink = 1.3\n    var swapped = false\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / shrink)\n        if gap < 1 {\n            gap = 1\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    \n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        for i in 0..<(nums.count - gap) {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.3)\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.3)\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.3)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        \n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    \n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.3)\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        \n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    \n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    \n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        \n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    \n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.3)\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    \n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        \n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    \n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.3)\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        \n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    \n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    \n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        \n        var i = 0\n        swapped = false\n        \n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    \n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.3)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    let shrink = 1.3\n    var swapped = true\n    \n    while swapped {\n        gap = Int(Double(gap) / shrink)\n        if gap > 1 {\n            swapped = false\n        }\n        \n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    \n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "tmp3azavjbi/tmp3azavjbi.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afe4dedec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afe4dbd5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afe4dbd5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afe4dbd47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3azavjbi                        0x000055c65421f5c4 <unavailable> + 5572\n5    libc.so.6                          0x00002afe4e0ca460 __libc_start_main + 245\n6    tmp3azavjbi                        0x000055c65421f1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        \n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    \n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.3)\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.3)\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    \n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    \n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var gap = nums.count\n    var swapped = true\n    var nums = nums\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    let shrink_factor = 1.3\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / shrink_factor)\n        }\n        swapped = false\n        var i = 0\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.3)\n        }\n        swapped = false\n        for i in 0..<nums.count - gap {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = Int(Double(gap) / 1.247330950103979)\n        }\n        swapped = false\n        for i in 0..<(nums.count - gap) {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.3)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.25)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to sort a list of elements.\nfunc comb_sort(nums: [Int]) -> [Int] {\n    var nums = nums\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        gap = Int(Double(gap) / 1.247330950103979)\n        if gap < 1 {\n            gap = 1\n        }\n        var i = 0\n        swapped = false\n        while i + gap < nums.count {\n            if nums[i] > nums[i + gap] {\n                nums.swapAt(i, i + gap)\n                swapped = true\n            }\n            i += 1\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(comb_sort(nums: [5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79])\nassert(comb_sort(nums: [41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41])\nassert(comb_sort(nums: [99, 15, 13, 47]) == [13, 15, 47, 99])",
      "timestamp": 1665509805,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}