{
  "name": "mbpp_103_eulerian_num",
  "language": "swift",
  "prompt": "\n/// Write a function to find the Eulerian number a(n, m).\nfunc eulerian_num(n: Int, m: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(eulerian_num(n: 3, m: 1) == 4)\nassert(eulerian_num(n: 4, m: 1) == 11)\nassert(eulerian_num(n: 5, m: 3) == 26)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = 0\n    for k in 0...m {\n        result += binomial_coeff(n: n, k: k) * binomial_coeff(n: m, k: k)\n    }\n    return result",
    "    return 0",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                dp[i][j] = 1\n            } else if i == 0 {\n                dp[i][j] = 0\n            } else if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i + 1) * dp[i][j - 1]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n+1), count: m+1)\n    for i in 0...m {\n        dp[i][0] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            dp[i][j] = dp[i-1][j-1] + (i-1) * dp[i-1][j]\n        }\n    }\n    return dp[m][n]",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    a[0][0] = 1\n    for i in 1...n {\n        for j in 0...m {\n            if j == 0 {\n                a[i][j] = 1\n            } else {\n                a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n            }\n        }\n    }\n    return a[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m+1), count: n+1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                a[i][j] = 1\n            } else if i == 0 {\n                a[i][j] = 0\n            } else if j == 0 {\n                a[i][j] = 1\n            } else {\n                a[i][j] = a[i-1][j-1] + j * a[i-1][j]\n            }\n        }\n    }\n    return a[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...m {\n        a[0][i] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i + 1) * a[i][j - 1]\n        }\n    }\n    return a[n][m]",
    "    var result = 1\n    for i in 0..<m {\n        result *= n - i\n    }\n    return result / factorial(m)",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...m {\n        dp[i][0] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[m][n]",
    "    var result = 0\n    if m == 0 {\n        result = 1\n    } else if m == 1 {\n        result = n\n    } else if m == n {\n        result = 1\n    } else {\n        result = eulerian_num(n - 1, m: m - 1) + eulerian_num(n - 1, m: m) * (n - m)\n    }\n    return result",
    "    var a = Array(repeating: Array(repeating: 0, count: m+1), count: n+1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (j+1)*a[i-1][j] + (i-j)*a[i-1][j-1]\n        }\n    }\n    return a[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m+1), count: n+1)\n    for i in 0...n {\n        for j in 0...min(i, m) {\n            if j == 0 || j == i {\n                a[i][j] = 1\n            } else {\n                a[i][j] = a[i-1][j-1] + j * a[i-1][j]\n            }\n        }\n    }\n    return a[n][m]",
    "    var result = 0\n    for k in 0...m {\n        result += binomial(n: n, k: k) * binomial(n: m, k: k)\n    }\n    return result",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...n {\n        dp[0][i] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            dp[i][j] = dp[i - 1][j - 1] + (i * dp[i - 1][j])\n        }\n    }\n    return dp[m][n]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    if n < m {\n        return 0\n    }\n    if n == m {\n        return 1\n    }\n    if m == 0 {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var result = 0\n    if n == 0 && m == 0 {\n        result = 1\n    } else if n == 0 {\n        result = 0\n    } else if m == 0 {\n        result = 0\n    } else if n == m {\n        result = 1\n    } else if n < m {\n        result = 0\n    } else {\n        result = (n - m) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)\n    }\n    return result",
    "    var a = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var arr = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...min(i, m) {\n            if j == 0 || j == i {\n                arr[i][j] = 1\n            } else {\n                arr[i][j] = arr[i - 1][j - 1] + j * arr[i - 1][j]\n            }\n        }\n    }\n    return arr[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    if n < m {\n        return 0\n    }\n    if n == m {\n        return 1\n    }\n    if m == 0 {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var dp = Array(repeating: Array(repeating: 0, count: m+1), count: n+1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 {\n                dp[i][j] = 1\n            } else if j == 0 {\n                dp[i][j] = 0\n            } else {\n                dp[i][j] = dp[i-1][j-1] + (i+1)*dp[i][j-1]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var a: [[Int]] = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n        a[i][i] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            a[i][j] = a[i - 1][j - 1] + j * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...n {\n        a[0][i] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            a[i][j] = a[i][j - 1] + a[i - 1][j - 1] * (n - j + 1)\n        }\n    }\n    return a[m][n]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 0...m {\n        a[0][i] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    if m == 0 || m == n {\n        return 1\n    }\n    if m == 1 {\n        return n\n    }\n    return eulerian_num(n: n - 1, m: m - 1) + eulerian_num(n: n - 1, m: m) * (n - m)",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...m {\n        dp[i][0] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[m][n]",
    "    var a = Array(repeating: Array(repeating: 0, count: m+1), count: n+1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 0...m {\n        a[0][i] = 0\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (i-j)*a[i-1][j-1] + (j+1)*a[i-1][j]\n        }\n    }\n    return a[n][m]",
    "    var res = 0\n    if m == 0 || m == n {\n        res = 1\n    } else if m == 1 || m == n - 1 {\n        res = n\n    } else {\n        res = (n - m) * eulerian_num(n: n - 1, m: m - 1) + m * eulerian_num(n: n - 1, m: m)\n    }\n    return res",
    "    var res = 0\n    for k in 0...m {\n        res += binomial(n: n, k: k) * binomial(n: m, k: k)\n    }\n    return res",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                dp[i][j] = 1\n            } else if i == 0 {\n                dp[i][j] = 0\n            } else if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i + 1) * dp[i][j - 1]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = [[Int]]()\n    for i in 0...n {\n        a.append([Int]())\n        for j in 0...m {\n            if i == 0 || j == 0 {\n                a[i].append(1)\n            } else {\n                a[i].append(a[i - 1][j - 1] + (i - 1) * a[i - 1][j])\n            }\n        }\n    }\n    return a[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            a[i][j] = a[i - 1][j - 1] + j * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var result = 0\n    for k in 0...m {\n        result += binomial(n: n, k: k) * binomial(n: m, k: k)\n    }\n    return result",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...m {\n        dp[i][0] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[m][n]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (i - j) * a[i - 1][j] + a[i - 1][j - 1]\n        }\n    }\n    return a[n][m]",
    "    if n < m {\n        return 0\n    }\n    if m == 0 {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) / m",
    "    var result = 0\n    for k in 0...m {\n        result += binomial_coefficient(n: n, k: k) * binomial_coefficient(n: m, k: k)\n    }\n    return result",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...m {\n        dp[i][0] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            dp[i][j] = dp[i - 1][j - 1] + (i * dp[i - 1][j])\n        }\n    }\n    return dp[m][n]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    a[0][0] = 1\n    for i in 1...n {\n        for j in 0...m {\n            a[i][j] = a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + j * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    dp[0][0] = 1\n    for i in 1...n {\n        for j in 0...m {\n            if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n            }\n        }\n    }\n    return dp[n][m]",
    "    if n < m {\n        return 0\n    }\n    if n == m {\n        return 1\n    }\n    return (n - m) * eulerian_num(n: n - 1, m: m) + eulerian_num(n: n - 1, m: m - 1)",
    "    if n < m {\n        return 0\n    }\n    if n == m {\n        return 1\n    }\n    if m == 0 {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var result = 0\n    for k in 0...m {\n        result += binomial(n: n, k: k) * binomial(n: m, k: k)\n    }\n    return result",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    if n == 0 {\n        return 1\n    }\n    if n < 0 || m < 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m) + m * eulerian_num(n: n - 1, m: m - 1)",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n - 1, m: m) + m * eulerian_num(n - 1, m: m - 1)",
    "    var result = 0\n    for k in 0...m {\n        result += binomial_coeff(n: n, k: k) * binomial_coeff(n: m, k: k)\n    }\n    return result",
    "    var a: [[Int]] = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...min(i, m) {\n            if j == 0 || j == i {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i - j) * dp[i - 1][j]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...m {\n        dp[0][i] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = (dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j])\n        }\n    }\n    return dp[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                a[i][j] = 1\n            } else if i == 0 || j == 0 {\n                a[i][j] = 0\n            } else {\n                a[i][j] = (i - j) * a[i - 1][j] + j * a[i - 1][j - 1]\n            }\n        }\n    }\n    return a[n][m]",
    "    var result = 0\n    for k in 0...m {\n        result += binomial(n: n, k: k) * binomial(n: m, k: k)\n    }\n    return result",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 {\n                dp[i][j] = 1\n            } else if j == 0 {\n                dp[i][j] = 0\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i + 1) * dp[i][j - 1]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = dp[i - 1][j - 1] + j * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var result = 0\n    for k in 0...m {\n        result += (factorial(n: n + 1) / (factorial(n: k) * factorial(n: n + 1 - k))) * ((-1) ** k)\n    }\n    return result",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (a[i - 1][j - 1] + (i - j) * a[i - 1][j])\n        }\n    }\n    return a[n][m]",
    "    var a: [[Int]] = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...n {\n        dp[0][i] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            dp[i][j] = dp[i - 1][j - 1] + (i * dp[i - 1][j])\n        }\n    }\n    return dp[m][n]",
    "    var a = [[Int]]()\n    for i in 0...n {\n        a.append([Int](repeating: 0, count: m + 1))\n    }\n    a[0][0] = 1\n    for i in 1...n {\n        for j in 0...m {\n            a[i][j] = a[i - 1][j - 1] * (i - 1) + a[i - 1][j] * (j + 1)\n        }\n    }\n    return a[n][m]",
    "    var a: [[Int]] = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                a[i][j] = 1\n            } else if i == 0 {\n                a[i][j] = 0\n            } else if j == 0 {\n                a[i][j] = 1\n            } else {\n                a[i][j] = a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n            }\n        }\n    }\n    return a[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var res = 0\n    for k in 0...m {\n        res += binomial(n: n, k: k) * binomial(n: m, k: k)\n    }\n    return res",
    "    var a: [[Int]] = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    a[0][0] = 1\n    for i in 1...n {\n        a[i][0] = 0\n        for j in 1...m {\n            a[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + j * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 {\n                dp[i][j] = 1\n            } else if j == 0 {\n                dp[i][j] = 0\n            } else {\n                dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var a: [[Int]] = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            dp[i][j] = dp[i - 1][j - 1] + j * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var result = 1\n    for i in 1...m {\n        result *= (n - i + 1)\n    }\n    return result",
    "    var result = 0\n    if m == 0 || m == n {\n        result = 1\n    } else if m == 1 || m == n - 1 {\n        result = n\n    } else {\n        result = eulerian_num(n: n - 1, m: m - 1) + (n - m) * eulerian_num(n: n - 1, m: m)\n    }\n    return result",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...n {\n        dp[0][i] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            dp[i][j] = dp[i - 1][j - 1] + (i * dp[i - 1][j])\n        }\n    }\n    return dp[m][n]",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                dp[i][j] = 1\n            } else if i == 0 {\n                dp[i][j] = 0\n            } else if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i + 1) * dp[i][j - 1]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m+1), count: n+1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 {\n                a[i][j] = 1\n            } else if j == 0 {\n                a[i][j] = 0\n            } else {\n                a[i][j] = a[i-1][j-1] + j * a[i-1][j]\n            }\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...n {\n        dp[0][i] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            dp[i][j] = dp[i - 1][j - 1] + (i * dp[i - 1][j])\n        }\n    }\n    return dp[m][n]",
    "    if n < m {\n        return 0\n    }\n    if n == m {\n        return 1\n    }\n    if m == 0 {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + m * eulerian_num(n: n - 1, m: m)",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    dp[0][0] = 1\n    for i in 1...n {\n        for j in 0...m {\n            if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...m {\n        a[0][i] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...m {\n        a[0][i] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...m {\n        a[i][0] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            a[i][j] = a[i - 1][j - 1] + (i * a[i - 1][j])\n        }\n    }\n    return a[m][n]",
    "    var a: [[Int]] = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            a[i][j] = a[i - 1][j - 1] + j * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    if n == 0 {\n        return 1\n    }\n    if n < 0 || m < 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m) + m * eulerian_num(n: n - 1, m: m - 1)",
    "    var result = 0\n    if n == 0 && m == 0 {\n        result = 1\n    } else if n == 0 || m == 0 {\n        result = 0\n    } else {\n        result = (n - m + 1) * eulerian_num(n - 1, m: m) + m * eulerian_num(n - 1, m: m - 1)\n    }\n    return result",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var result = 0\n    for k in 0...m {\n        result += binomial_coefficient(n: n, k: k) * binomial_coefficient(n: m, k: k)\n    }\n    return result",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (i - j) * a[i - 1][j] + a[i - 1][j - 1]\n        }\n    }\n    return a[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...n {\n        a[0][i] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            a[i][j] = a[i - 1][j - 1] + (i * a[i][j - 1])\n        }\n    }\n    return a[m][n]",
    "    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var eulerian_num = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...n {\n        eulerian_num[0][i] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            eulerian_num[i][j] = eulerian_num[i - 1][j - 1] + (i * eulerian_num[i][j - 1])\n        }\n    }\n    return eulerian_num[m][n]",
    "    var res = 0\n    var n = n\n    var m = m\n    while n >= 0 && m >= 0 {\n        res += eulerian_num_helper(n: n, m: m)\n        n -= 1\n        m -= 1\n    }\n    return res",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                dp[i][j] = 1\n            } else if i == 0 {\n                dp[i][j] = 0\n            } else if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i + 1) * dp[i][j - 1]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var a: [[Int]] = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    return 0",
    "    var dp = Array(repeating: Array(repeating: 0, count: n+1), count: n+1)\n    for i in 0...n {\n        dp[i][0] = 1\n        dp[i][i] = 1\n    }\n    for i in 1...n {\n        for j in 1..<i {\n            dp[i][j] = dp[i-1][j-1] + (i-1) * dp[i-1][j]\n        }\n    }\n    return dp[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...n {\n        a[0][i] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            a[i][j] = a[i - 1][j - 1] + (i * a[i - 1][j])\n        }\n    }\n    return a[m][n]",
    "    var table = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 || j == 0 {\n                table[i][j] = 0\n            } else if i == 1 || j == 1 {\n                table[i][j] = 1\n            } else if i == j {\n                table[i][j] = 1\n            } else {\n                table[i][j] = table[i - 1][j - 1] + j * table[i - 1][j]\n            }\n        }\n    }\n    return table[n][m]",
    "    var result = 1\n    for i in 0..<m {\n        result *= n - i\n    }\n    return result / factorial(m)",
    "    return 0",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...m {\n        a[0][i] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (i - j) * a[i - 1][j] + a[i - 1][j - 1]\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...m {\n        dp[0][i] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = dp[i - 1][j - 1] + (i + 1) * dp[i][j - 1]\n        }\n    }\n    return dp[n][m]",
    "    var result = 0\n    for k in 0...m {\n        result += binomial_coefficient(n: n, k: k) * binomial_coefficient(n: m, k: k)\n    }\n    return result",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                dp[i][j] = 1\n            } else if i == 0 {\n                dp[i][j] = 0\n            } else if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i + 1) * dp[i][j - 1]\n            }\n        }\n    }\n    return dp[n][m]",
    "    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...n {\n        dp[0][i] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            dp[i][j] = dp[i - 1][j - 1] + (i * dp[i - 1][j])\n        }\n    }\n    return dp[m][n]",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m+1), count: n+1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                a[i][j] = 1\n            } else if i == 0 || j == 0 {\n                a[i][j] = 0\n            } else {\n                a[i][j] = a[i-1][j-1] + (i+1)*a[i][j-1]\n            }\n        }\n    }\n    return a[n][m]",
    "    if n < m {\n        return 0\n    }\n    if n == m {\n        return 1\n    }\n    if m == 0 {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m) + m * eulerian_num(n: n - 1, m: m - 1)",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    if n == 0 && m == 0 {\n        return 1\n    } else if n == 0 || m == 0 {\n        return 0\n    } else {\n        return (n - m + 1) * eulerian_num(n - 1, m: m) + m * eulerian_num(n - 1, m: m - 1)\n    }",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...m {\n        a[0][i] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    return 0",
    "    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    return 0",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                dp[i][j] = 1\n            } else if i == 0 {\n                dp[i][j] = 0\n            } else if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i + 1) * dp[i][j - 1]\n            }\n        }\n    }\n    return dp[n][m]",
    "    let n = n + 1\n    var a = [[Int]](repeating: [Int](repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        a[i][0] = 1\n    }\n    for i in 1..<n {\n        for j in 1...i {\n            a[i][j] = a[i - 1][j - 1] + j * a[i - 1][j]\n        }\n    }\n    return a[n - 1][m]",
    "    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...m {\n        a[0][i] = 1\n    }\n    for i in 1...n {\n        a[i][0] = 0\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (i - j) * a[i - 1][j] + a[i - 1][j - 1]\n        }\n    }\n    return a[n][m]",
    "    var a: [[Int]] = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...m {\n        a[0][i] = 1\n    }\n    for i in 1...n {\n        a[i][0] = 0\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + j * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    dp[0][0] = 1\n    for i in 1...n {\n        for j in 0...m {\n            if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j] + j * dp[i - 1][j - 1]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m+1), count: n+1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i-1][j-1] + (i-1) * a[i-1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m+1), count: n+1)\n    for i in 0...m {\n        a[0][i] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (i-j) * a[i-1][j-1] + (j+1) * a[i-1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                a[i][j] = 1\n            } else if i == 0 || j == 0 {\n                a[i][j] = 0\n            } else {\n                a[i][j] = a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n            }\n        }\n    }\n    return a[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            a[i][j] = a[i - 1][j - 1] + j * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var result = 0\n    if m == 0 {\n        result = 1\n    } else if m == 1 {\n        result = n\n    } else {\n        result = (m + 1) * eulerian_num(n: n, m: m - 1) - m * eulerian_num(n: n, m: m - 2)\n    }\n    return result",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                dp[i][j] = 1\n            } else if i == 0 {\n                dp[i][j] = 0\n            } else if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i + 1) * dp[i][j - 1]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...m {\n        dp[i][0] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[m][n]",
    "    var a = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var a = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    if m == 0 || m == n {\n        return 1\n    }\n    return eulerian_num(n: n - 1, m: m - 1) + (n - m) * eulerian_num(n: n - 1, m: m)",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    if n < 0 || m < 0 || n < m {\n        return 0\n    }\n    if n == 0 && m == 0 {\n        return 1\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) / m",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    dp[0][0] = 1\n    for i in 1...n {\n        for j in 0...m {\n            if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n            }\n        }\n    }\n    return dp[n][m]",
    "    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    return 0",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    a[0][0] = 1\n    for i in 1...n {\n        for j in 0...m {\n            a[i][j] = a[i - 1][j] * (j + 1) + a[i - 1][j - 1] * (n - i + 1)\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    dp[0][0] = 1\n    for i in 1...n {\n        for j in 0...m {\n            if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n            }\n        }\n    }\n    return dp[n][m]",
    "    return 0",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...m {\n        dp[0][i] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var result = 0\n    for k in 0...m {\n        result += (-1).pow(k) * binomial(n, k) * binomial(n - k + m, m)\n    }\n    return result / factorial(m)",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    a[0][0] = 1\n    for i in 1...n {\n        for j in 0...m {\n            if j == 0 {\n                a[i][j] = 1\n            } else {\n                a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n            }\n        }\n    }\n    return a[n][m]",
    "    var res = 0\n    for k in 0...m {\n        res += binomial(n: n, k: k) * binomial(n: m, k: k)\n    }\n    return res",
    "    if n == 0 && m == 0 {\n        return 1\n    }\n    if n == 0 || m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                dp[i][j] = 1\n            } else if i == 0 {\n                dp[i][j] = 0\n            } else if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i + 1) * dp[i][j - 1]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    for i in 0...m {\n        dp[i][0] = 1\n    }\n    for i in 1...m {\n        for j in 1...n {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[m][n]",
    "    var a = Array(repeating: Array(repeating: 0, count: m+1), count: n+1)\n    a[0][0] = 1\n    for i in 1...n {\n        for j in 0...m {\n            a[i][j] = a[i-1][j-1] + (j+1) * a[i-1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    return 0",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...m {\n        dp[0][i] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var result = 0\n    for i in 0...m {\n        result += binomial(n: n, k: i) * binomial(n: n - i, k: m - i)\n    }\n    return result",
    "    var result = 0\n    if n == 0 {\n        result = 1\n    } else if m == 0 {\n        result = 0\n    } else if n == m {\n        result = 1\n    } else {\n        result = (n - m) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)\n    }\n    return result",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    dp[0][0] = 1\n    for i in 1...n {\n        for j in 0...m {\n            if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + j * dp[i - 1][j]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: m+1), count: n+1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                dp[i][j] = 1\n            } else if i == 0 || j == 0 {\n                dp[i][j] = 0\n            } else {\n                dp[i][j] = (i-j)*dp[i-1][j] + (j+1)*dp[i-1][j-1]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    if m == 0 || m == n {\n        return 1\n    }\n    return eulerian_num(n: n - 1, m: m - 1) + (n - m) * eulerian_num(n: n - 1, m: m)",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                dp[i][j] = 1\n            } else if i == 0 {\n                dp[i][j] = 0\n            } else if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i + 1) * dp[i][j - 1]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    dp[0][0] = 1\n    for i in 1...n {\n        for j in 0...i {\n            if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + j * dp[i - 1][j]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...m {\n            if i == 0 && j == 0 {\n                dp[i][j] = 1\n            } else if i == 0 {\n                dp[i][j] = 0\n            } else if j == 0 {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + j * dp[i - 1][j]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var dp = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        for j in 0...min(i, m) {\n            if j == 0 || j == i {\n                dp[i][j] = 1\n            } else {\n                dp[i][j] = dp[i - 1][j - 1] + (i - j) * dp[i - 1][j]\n            }\n        }\n    }\n    return dp[n][m]",
    "    var a: [[Int]] = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    a[0][0] = 1\n    for i in 1...n {\n        for j in 0...m {\n            if j == 0 {\n                a[i][j] = 1\n            } else {\n                a[i][j] = a[i - 1][j - 1] + a[i - 1][j] * j\n            }\n        }\n    }\n    return a[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = (i - j) * a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var res = 0\n    for k in 0...m {\n        res += binomial(n: n, k: k) * binomial(n: m, k: k)\n    }\n    return res",
    "    if n == 0 {\n        return 1\n    }\n    if n < m {\n        return 0\n    }\n    return (n - m) * eulerian_num(n: n - 1, m: m) + m * eulerian_num(n: n - 1, m: m - 1)",
    "    if n == 0 {\n        return 1\n    }\n    if m == 0 {\n        return 0\n    }\n    return (n - m + 1) * eulerian_num(n: n - 1, m: m - 1) + (m + 1) * eulerian_num(n: n - 1, m: m)",
    "    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...i {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (j + 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]",
    "    var dp = [[Int]](repeating: [Int](repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        dp[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            dp[i][j] = dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]\n        }\n    }\n    return dp[n][m]",
    "    return 0",
    "    var a = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\n    for i in 0...n {\n        a[i][0] = 1\n    }\n    for i in 1...n {\n        for j in 1...m {\n            a[i][j] = a[i - 1][j - 1] + (i - 1) * a[i - 1][j]\n        }\n    }\n    return a[n][m]"
  ]
}