{
  "name": "mbpp_95_Find_Min_Length",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for item in lst {\n        if item.count < min_length {\n            min_length = item.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = Int.max\n    for i in lst {\n        if i.count < min_len {\n            min_len = i.count\n        }\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in 0..<lst.count {\n        if lst[i].count < min_length {\n            min_length = lst[i].count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in 0..<lst.count {\n        if lst[i].count < min_length {\n            min_length = lst[i].count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in 0..<lst.count {\n        if lst[i].count < min_length {\n            min_length = lst[i].count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        min_length = min(min_length, l.count)\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in 0..<lst.count {\n        if lst[i].count < min_length {\n            min_length = lst[i].count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in 0..<lst.count {\n        if lst[i].count < min_length {\n            min_length = lst[i].count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = lst[0].count\n    for i in lst {\n        if i.count < min_len {\n            min_len = i.count\n        }\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length: Int = Int.max\n    for i in 0..<lst.count {\n        if lst[i].count < min_length {\n            min_length = lst[i].count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for sublist in lst {\n        if sublist.count < min_length {\n            min_length = sublist.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in 0..<lst.count {\n        if lst[i].count < min_length {\n            min_length = lst[i].count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for sublist in lst {\n        min_length = min(min_length, sublist.count)\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = Int.max\n    for i in lst {\n        if i.count < min_len {\n            min_len = i.count\n        }\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = lst[0].count\n    for i in lst {\n        if i.count < min_len {\n            min_len = i.count\n        }\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = Int.max\n    for item in lst {\n        if item.count < min_len {\n            min_len = item.count\n        }\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = Int.max\n    for i in 0..<lst.count {\n        if lst[i].count < min {\n            min = lst[i].count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = Int.max\n    for sub_lst in lst {\n        if sub_lst.count < min_len {\n            min_len = sub_lst.count\n        }\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = Int.max\n    for l in lst {\n        if l.count < min_len {\n            min_len = l.count\n        }\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for sub_lst in lst {\n        min_length = min(min_length, sub_lst.count)\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = Int.max\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in 0..<lst.count {\n        if lst[i].count < min_length {\n            min_length = lst[i].count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = Int.max\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = lst[0].count\n    for i in lst {\n        if i.count < min_len {\n            min_len = i.count\n        }\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in 0..<lst.count {\n        if lst[i].count < min_length {\n            min_length = lst[i].count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in 0..<lst.count {\n        if lst[i].count < min_length {\n            min_length = lst[i].count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in 0..<lst.count {\n        if lst[i].count < min {\n            min = lst[i].count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in 0..<lst.count {\n        if lst[i].count < min_length {\n            min_length = lst[i].count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = Int.max\n    for l in lst {\n        min_len = min(min_len, l.count)\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in 0..<lst.count {\n        if lst[i].count < min_length {\n            min_length = lst[i].count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        min_length = min(min_length, l.count)\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for sub_lst in lst {\n        if sub_lst.count < min_length {\n            min_length = sub_lst.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length: Int = Int.max\n    for sub_lst in lst {\n        if sub_lst.count < min_length {\n            min_length = sub_lst.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = Int.max\n    for l in lst {\n        if l.count < min_len {\n            min_len = l.count\n        }\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = Int.max\n    for i in lst {\n        if i.count < min_len {\n            min_len = i.count\n        }\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in 0..<lst.count {\n        if lst[i].count < min_length {\n            min_length = lst[i].count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for sub_lst in lst {\n        if sub_lst.count < min_length {\n            min_length = sub_lst.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        min_length = min(min_length, l.count)\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = Int.max\n    for l in lst {\n        min_len = min(min_len, l.count)\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        min_length = min(min_length, l.count)\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if min_length > i.count {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        min_length = min(min_length, l.count)\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in 0..<lst.count {\n        if lst[i].count < min_length {\n            min_length = lst[i].count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        min_length = min(min_length, i.count)\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = Int.max\n    for l in lst {\n        min_len = min(min_len, l.count)\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = Int.max\n    for i in lst {\n        if i.count < min_len {\n            min_len = i.count\n        }\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = Int.max\n    for l in lst {\n        if l.count < min_len {\n            min_len = l.count\n        }\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = lst[0].count\n    for i in lst {\n        if i.count < min_len {\n            min_len = i.count\n        }\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        min_length = min(min_length, l.count)\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var minLength = Int.max\n    for l in lst {\n        minLength = min(minLength, l.count)\n    }\n    return minLength\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_len = Int.max\n    for i in lst {\n        if i.count < min_len {\n            min_len = i.count\n        }\n    }\n    return min_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    return lst.map { $0.count }.min() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1666123983,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for l in lst {\n        if l.count < min_length {\n            min_length = l.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = Int.max\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min_length = lst[0].count\n    for i in lst {\n        if i.count < min_length {\n            min_length = i.count\n        }\n    }\n    return min_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the smallest list in a list of lists.\nfunc Find_Min_Length(lst: [[Int]]) -> Int {\n    var min = lst[0].count\n    for i in lst {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Min_Length(lst: [[1], [1, 2]]) == 1)\nassert(Find_Min_Length(lst: [[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2)\nassert(Find_Min_Length(lst: [[3, 3, 3], [4, 4, 4, 4]]) == 3)",
      "timestamp": 1665510570,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}