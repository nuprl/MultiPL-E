{
  "name": "mbpp_294_max_val",
  "language": "swift",
  "prompt": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (max, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max > Int(str) ?? 0 ? max : Int(str) ?? 0\n        case .failure(let int):\n            return max > int ? max : int\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str) ?? 0)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let value):\n            return max($0, Int(value)!)\n        case .failure(let value):\n            return max($0, value)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpy25f0clp/tmpy25f0clp.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0090ef2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0090be9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b0090be9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b0090be913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b0090be8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpy25f0clp                        0x00005575afef8e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b0090cf8410 Sequence.reduce<A>(_:_:) + 530\n7    tmpy25f0clp                        0x00005575afef8c77 <unavailable> + 7287\n8    tmpy25f0clp                        0x00005575afef88bc <unavailable> + 6332\n9    libc.so.6                          0x00002b00910de460 __libc_start_main + 245\n10   tmpy25f0clp                        0x00005575afef84f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intVal = Int(val) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmparqvlz7b/tmparqvlz7b.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e274afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e271a6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e271a6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e271a57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmparqvlz7b                        0x0000564e9ea7acba <unavailable> + 7354\n5    libc.so.6                          0x00002b2e2769b460 __libc_start_main + 245\n6    tmparqvlz7b                        0x0000564e9ea7a879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpnudf_3pp/tmpnudf_3pp.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af5eedd4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af5eeacbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af5eeacb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af5eeaca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnudf_3pp                        0x0000557e2d367cba <unavailable> + 7354\n5    libc.so.6                          0x00002af5eefc0460 __libc_start_main + 245\n6    tmpnudf_3pp                        0x0000557e2d367879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            print(\"Error: \\(error)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpwb6r0gj4/tmpwb6r0gj4.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad339e97c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad339b8eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad339b8e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad339b8d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwb6r0gj4                        0x000055c098a30cba <unavailable> + 7354\n5    libc.so.6                          0x00002ad33a083460 __libc_start_main + 245\n6    tmpwb6r0gj4                        0x000055c098a30879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(err)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmp1hqquqiw/tmp1hqquqiw.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3c93735c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3c9342cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3c9342c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3c9342b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1hqquqiw                        0x0000561b3999ca2a <unavailable> + 6698\n5    libc.so.6                          0x00002b3c93921460 __libc_start_main + 245\n6    tmp1hqquqiw                        0x0000561b3999c5e9 <unavailable> + 5609\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.compactMap {\n        switch $0 {\n        case .success(let str):\n            return Int(str)\n        case .failure(let int):\n            return int\n        }\n    }.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let val = Int(val) {\n                if val > max_val {\n                    max_val = val\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let val = Int(value) {\n                if val > max {\n                    max = val\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.map {\n        switch $0 {\n        case .success(let str):\n            return Int(str) ?? 0\n        case .failure(let int):\n            return int\n        }\n    }.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str) ?? 0)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch ($0, $1) {\n        case (.success(let a), .success(let b)):\n            return Int(a)! > Int(b)! ? Int(a)! : Int(b)!\n        case (.success(let a), .failure(let b)):\n            return Int(a)! > b ? Int(a)! : b\n        case (.failure(let a), .success(let b)):\n            return a > Int(b)! ? a : Int(b)!\n        case (.failure(let a), .failure(let b)):\n            return a > b ? a : b\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "/tmp/tmpef0f4hhf.swift:8:16: error: type 'Int' has no member 'success'\n        case (.success(let a), .success(let b)):\n              ~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .success(value):\n            if let intVal = Int(value) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case let .failure(error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str) ?? 0)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpsddmqqcq/tmpsddmqqcq.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11cd2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11ccfe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b11ccfe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b11ccfdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsddmqqcq                        0x0000560679362cba <unavailable> + 7354\n5    libc.so.6                          0x00002b11cd4d5460 __libc_start_main + 245\n6    tmpsddmqqcq                        0x0000560679362879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.compactMap {\n        switch $0 {\n        case .success(let str):\n            return Int(str)\n        case .failure(let int):\n            return int\n        }\n    }.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        if case let .success(value) = $1 {\n            return max($0, value.count)\n        } else {\n            return $0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpivea6x1g/tmpivea6x1g.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aad52758c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aad5244fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aad5244f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aad5244e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpivea6x1g                        0x0000559fd84a583a <unavailable> + 6202\n5    libc.so.6                          0x00002aad52944460 __libc_start_main + 245\n6    tmpivea6x1g                        0x0000559fd84a53f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return acc > Int(str) ?? 0 ? acc : Int(str) ?? 0\n        case .failure(let int):\n            return acc > int ? acc : int\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case let .success(str):\n            return max(acc, Int(str)!)\n        case let .failure(int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmp161fbnn2/tmp161fbnn2.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8b3b724c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8b3b41b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b8b3b41b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b8b3b41b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b8b3b41abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp161fbnn2                        0x000055e7aa3e5e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b8b3b52a410 Sequence.reduce<A>(_:_:) + 530\n7    tmp161fbnn2                        0x000055e7aa3e5c77 <unavailable> + 7287\n8    tmp161fbnn2                        0x000055e7aa3e58bc <unavailable> + 6332\n9    libc.so.6                          0x00002b8b3b910460 __libc_start_main + 245\n10   tmp161fbnn2                        0x000055e7aa3e54f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let value):\n            return max($0, Int(value)!)\n        case .failure(let value):\n            return max($0, value)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpy25f0clp/tmpy25f0clp.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0090ef2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0090be9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b0090be9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b0090be913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b0090be8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpy25f0clp                        0x00005575afef8e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b0090cf8410 Sequence.reduce<A>(_:_:) + 530\n7    tmpy25f0clp                        0x00005575afef8c77 <unavailable> + 7287\n8    tmpy25f0clp                        0x00005575afef88bc <unavailable> + 6332\n9    libc.so.6                          0x00002b00910de460 __libc_start_main + 245\n10   tmpy25f0clp                        0x00005575afef84f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intVal = Int(str) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let intVal):\n            if intVal > max {\n                max = intVal\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpsddmqqcq/tmpsddmqqcq.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11cd2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11ccfe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b11ccfe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b11ccfdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsddmqqcq                        0x0000560679362cba <unavailable> + 7354\n5    libc.so.6                          0x00002b11cd4d5460 __libc_start_main + 245\n6    tmpsddmqqcq                        0x0000560679362879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let value):\n            return max($0, Int(value)!)\n        case .failure(let error):\n            return max($0, error)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmp_5wobvw7/tmp_5wobvw7.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3520b36c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b352082d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b352082d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b352082d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b352082cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp_5wobvw7                        0x00005568f6c52e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b352093c410 Sequence.reduce<A>(_:_:) + 530\n7    tmp_5wobvw7                        0x00005568f6c52c77 <unavailable> + 7287\n8    tmp_5wobvw7                        0x00005568f6c528bc <unavailable> + 6332\n9    libc.so.6                          0x00002b3520d22460 __libc_start_main + 245\n10   tmp_5wobvw7                        0x00005568f6c524f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intVal = Int(str) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let intVal):\n            if intVal > max {\n                max = intVal\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case let .success(value):\n            if let int_val = Int(value) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case let .failure(error):\n            if error > max_val {\n                max_val = error\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str) ?? 0)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let val):\n            return max($0, Int(val)!)\n        case .failure(let val):\n            return max($0, val)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpap1dih4a/tmpap1dih4a.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b34f6a38c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b34f672f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b34f672f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b34f672f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b34f672ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpap1dih4a                        0x000055861871fe62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b34f683e410 Sequence.reduce<A>(_:_:) + 530\n7    tmpap1dih4a                        0x000055861871fc77 <unavailable> + 7287\n8    tmpap1dih4a                        0x000055861871f8bc <unavailable> + 6332\n9    libc.so.6                          0x00002b34f6c24460 __libc_start_main + 245\n10   tmpap1dih4a                        0x000055861871f4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let val):\n            return max($0, Int(val)!)\n        case .failure(let val):\n            return max($0, val)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpap1dih4a/tmpap1dih4a.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b34f6a38c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b34f672f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b34f672f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b34f672f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b34f672ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpap1dih4a                        0x000055861871fe62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b34f683e410 Sequence.reduce<A>(_:_:) + 530\n7    tmpap1dih4a                        0x000055861871fc77 <unavailable> + 7287\n8    tmpap1dih4a                        0x000055861871f8bc <unavailable> + 6332\n9    libc.so.6                          0x00002b34f6c24460 __libc_start_main + 245\n10   tmpap1dih4a                        0x000055861871f4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            print(\"Error: \\(error)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpeshv0loq/tmpeshv0loq.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7f1f3ebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7f1f0e2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7f1f0e2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7f1f0e17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpeshv0loq                        0x0000563dd3816cba <unavailable> + 7354\n5    libc.so.6                          0x00002b7f1f5d7460 __libc_start_main + 245\n6    tmpeshv0loq                        0x0000563dd3816879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str) ?? 0)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str)!)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmp0xxv4249/tmp0xxv4249.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b396a3c7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b396a0be561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b396a0be286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b396a0be13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b396a0bdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp0xxv4249                        0x000056109c2d1e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b396a1cd410 Sequence.reduce<A>(_:_:) + 530\n7    tmp0xxv4249                        0x000056109c2d1c77 <unavailable> + 7287\n8    tmp0xxv4249                        0x000056109c2d18bc <unavailable> + 6332\n9    libc.so.6                          0x00002b396a5b3460 __libc_start_main + 245\n10   tmp0xxv4249                        0x000056109c2d14f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str)!)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmp0xxv4249/tmp0xxv4249.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b396a3c7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b396a0be561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b396a0be286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b396a0be13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b396a0bdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp0xxv4249                        0x000056109c2d1e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b396a1cd410 Sequence.reduce<A>(_:_:) + 530\n7    tmp0xxv4249                        0x000056109c2d1c77 <unavailable> + 7287\n8    tmp0xxv4249                        0x000056109c2d18bc <unavailable> + 6332\n9    libc.so.6                          0x00002b396a5b3460 __libc_start_main + 245\n10   tmp0xxv4249                        0x000056109c2d14f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let int_val = Int(value) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let error):\n            if error > max_val {\n                max_val = error\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let val):\n            if val > maxval {\n                maxval = val\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.flatMap { $0.value }.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "/tmp/tmpnshyter2.swift:6:33: error: value of type 'Result<String, Int>' has no member 'value'\n    return listval.flatMap { $0.value }.max() ?? 0\n                             ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, curr) -> Int in\n        switch curr {\n        case .success(let s):\n            return max(acc, Int(s)!)\n        case .failure(let f):\n            return max(acc, f)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpb3n0rga9/tmpb3n0rga9.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b61deeb1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b61deba8561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b61deba8286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b61deba813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b61deba7bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpb3n0rga9                        0x0000556f89d04e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b61decb7410 Sequence.reduce<A>(_:_:) + 530\n7    tmpb3n0rga9                        0x0000556f89d04c77 <unavailable> + 7287\n8    tmpb3n0rga9                        0x0000556f89d048bc <unavailable> + 6332\n9    libc.so.6                          0x00002b61df09d460 __libc_start_main + 245\n10   tmpb3n0rga9                        0x0000556f89d044f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let str):\n            return max($0, Int(str) ?? 0)\n        case .failure(let int):\n            return max($0, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .Success(value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case let .Failure(error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "/tmp/tmp4zide4t0.swift:9:19: error: type 'Result<String, Int>' has no member 'Success'\n        case let .Success(value):\n                 ~^~~~~~~\n/tmp/tmp4zide4t0.swift:15:19: error: type 'Result<String, Int>' has no member 'Failure'\n        case let .Failure(error):\n                 ~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return acc + Int(str)!\n        case .failure(let int):\n            return acc + int\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpihhc2rf4/tmpihhc2rf4.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afc7c275c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afc7bf6c561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002afc7bf6c286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002afc7bf6c13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002afc7bf6bbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpihhc2rf4                        0x00005579a5f3eda5 <unavailable> + 7589\n6    libswiftCore.so                    0x00002afc7c07b410 Sequence.reduce<A>(_:_:) + 530\n7    tmpihhc2rf4                        0x00005579a5f3ebd7 <unavailable> + 7127\n8    tmpihhc2rf4                        0x00005579a5f3e81c <unavailable> + 6172\n9    libc.so.6                          0x00002afc7c461460 __libc_start_main + 245\n10   tmpihhc2rf4                        0x00005579a5f3e459 <unavailable> + 5209\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .success(str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case let .failure(intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if val.count > max_val {\n                max_val = val.count\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmp9ox2bmwg/tmp9ox2bmwg.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b08a1039c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b08a0d30b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b08a0d30988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b08a0d2f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9ox2bmwg                        0x000055bf8d46a8aa <unavailable> + 6314\n5    libc.so.6                          0x00002b08a1225460 __libc_start_main + 245\n6    tmp9ox2bmwg                        0x000055bf8d46a469 <unavailable> + 5225\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0, { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str)!)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmp1i4ru10e/tmp1i4ru10e.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac58c554c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac58c24b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ac58c24b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ac58c24b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ac58c24abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp1i4ru10e                        0x000055e8b5dabe62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002ac58c35a410 Sequence.reduce<A>(_:_:) + 530\n7    tmp1i4ru10e                        0x000055e8b5dabc77 <unavailable> + 7287\n8    tmp1i4ru10e                        0x000055e8b5dab8bc <unavailable> + 6332\n9    libc.so.6                          0x00002ac58c740460 __libc_start_main + 245\n10   tmp1i4ru10e                        0x000055e8b5dab4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let val):\n            if val > maxval {\n                maxval = val\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(Int.min) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str)!)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpi483o5ex/tmpi483o5ex.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9a8e0ebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9a8dde2561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9a8dde2286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9a8dde213c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9a8dde1bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpi483o5ex                        0x000055f781e95e72 <unavailable> + 7794\n6    libswiftCore.so                    0x00002b9a8def1410 Sequence.reduce<A>(_:_:) + 530\n7    tmpi483o5ex                        0x000055f781e95c7d <unavailable> + 7293\n8    tmpi483o5ex                        0x000055f781e958bc <unavailable> + 6332\n9    libc.so.6                          0x00002b9a8e2d7460 __libc_start_main + 245\n10   tmpi483o5ex                        0x000055f781e954f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.compactMap {\n        switch $0 {\n        case .success(let s):\n            return Int(s)\n        case .failure(let f):\n            return f\n        }\n    }.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (max, val) in\n        switch val {\n        case .success(let str):\n            return max > Int(str) ?? 0 ? max : Int(str) ?? 0\n        case .failure(let int):\n            return max > int ? max : int\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .success(value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case let .failure(error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let str):\n            return max($0, Int(str)!)\n        case .failure(let int):\n            return max($0, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpc_yy2f1l/tmpc_yy2f1l.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3985e3cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3985b33561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b3985b33286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b3985b3313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b3985b32bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpc_yy2f1l                        0x000055aa251a3e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b3985c42410 Sequence.reduce<A>(_:_:) + 530\n7    tmpc_yy2f1l                        0x000055aa251a3c77 <unavailable> + 7287\n8    tmpc_yy2f1l                        0x000055aa251a38bc <unavailable> + 6332\n9    libc.so.6                          0x00002b3986028460 __libc_start_main + 245\n10   tmpc_yy2f1l                        0x000055aa251a34f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.compactMap {\n        switch $0 {\n        case .success(let val):\n            return Int(val)\n        case .failure(let val):\n            return val\n        }\n    }.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .Success(let str):\n            if let num = Int(str) {\n                if num > max {\n                    max = num\n                }\n            }\n        case .Failure(let num):\n            if num > max {\n                max = num\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "/tmp/tmpwwb84s7t.swift:9:15: error: type 'Result<String, Int>' has no member 'Success'\n        case .Success(let str):\n             ~^~~~~~~\n/tmp/tmpwwb84s7t.swift:15:15: error: type 'Result<String, Int>' has no member 'Failure'\n        case .Failure(let num):\n             ~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return acc > Int(str) ? acc : Int(str)\n        case .failure(let int):\n            return acc > int ? acc : int\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "/tmp/tmpgsqlcemk.swift:9:26: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            return acc > Int(str) ? acc : Int(str)\n                         ^\n/tmp/tmpgsqlcemk.swift:9:26: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            return acc > Int(str) ? acc : Int(str)\n                         ^\n                                  ?? <#default value#>\n/tmp/tmpgsqlcemk.swift:9:26: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            return acc > Int(str) ? acc : Int(str)\n                         ^\n                                 !\n/tmp/tmpgsqlcemk.swift:9:35: error: cannot convert return expression of type 'Int?' to return type 'Int'\n            return acc > Int(str) ? acc : Int(str)\n                   ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n                                                  !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (max, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max > Int(str) ?? 0 ? max : Int(str) ?? 0\n        case .failure(let int):\n            return max > int ? max : int\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpnudf_3pp/tmpnudf_3pp.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af5eedd4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af5eeacbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af5eeacb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af5eeaca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnudf_3pp                        0x0000557e2d367cba <unavailable> + 7354\n5    libc.so.6                          0x00002af5eefc0460 __libc_start_main + 245\n6    tmpnudf_3pp                        0x0000557e2d367879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intVal = Int(val) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmparqvlz7b/tmparqvlz7b.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2e274afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2e271a6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2e271a6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2e271a57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmparqvlz7b                        0x0000564e9ea7acba <unavailable> + 7354\n5    libc.so.6                          0x00002b2e2769b460 __libc_start_main + 245\n6    tmparqvlz7b                        0x0000564e9ea7a879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (max, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max > Int(str) ?? 0 ? max : Int(str) ?? 0\n        case .failure(let int):\n            return max > int ? max : int\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if val.count > max {\n                max = val.count\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpw0ysz2mr/tmpw0ysz2mr.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3b3c626c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3b3c31db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3b3c31d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3b3c31c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw0ysz2mr                        0x000055ed61e718aa <unavailable> + 6314\n5    libc.so.6                          0x00002b3b3c812460 __libc_start_main + 245\n6    tmpw0ysz2mr                        0x000055ed61e71469 <unavailable> + 5225\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let val):\n            return max(acc, Int(val)!)\n        case .failure(let val):\n            return max(acc, val)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpjt5vyrd5/tmpjt5vyrd5.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afc937b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afc934ab561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002afc934ab286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002afc934ab13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002afc934aabb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpjt5vyrd5                        0x000055b0e6ba0e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002afc935ba410 Sequence.reduce<A>(_:_:) + 530\n7    tmpjt5vyrd5                        0x000055b0e6ba0c77 <unavailable> + 7287\n8    tmpjt5vyrd5                        0x000055b0e6ba08bc <unavailable> + 6332\n9    libc.so.6                          0x00002afc939a0460 __libc_start_main + 245\n10   tmpjt5vyrd5                        0x000055b0e6ba04f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intVal = Int(value) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let val):\n            return max($0, Int(val)!)\n        case .failure(let val):\n            return max($0, val)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpap1dih4a/tmpap1dih4a.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b34f6a38c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b34f672f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b34f672f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b34f672f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b34f672ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpap1dih4a                        0x000055861871fe62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b34f683e410 Sequence.reduce<A>(_:_:) + 530\n7    tmpap1dih4a                        0x000055861871fc77 <unavailable> + 7287\n8    tmpap1dih4a                        0x000055861871f8bc <unavailable> + 6332\n9    libc.so.6                          0x00002b34f6c24460 __libc_start_main + 245\n10   tmpap1dih4a                        0x000055861871f4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .Success(value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case let .Failure(value):\n            if value > max {\n                max = value\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "/tmp/tmphxindg4p.swift:9:19: error: type 'Result<String, Int>' has no member 'Success'\n        case let .Success(value):\n                 ~^~~~~~~\n/tmp/tmphxindg4p.swift:15:19: error: type 'Result<String, Int>' has no member 'Failure'\n        case let .Failure(value):\n                 ~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let int_val = Int(val) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int_val = Int(str) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let int_val):\n            if int_val > max_val {\n                max_val = int_val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.map {\n        switch $0 {\n        case .success(let val):\n            return Int(val)!\n        case .failure(let val):\n            return val\n        }\n    }.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpb_h7ikq3/tmpb_h7ikq3.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57d4662c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57d4359561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57d4359286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57d435913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57d4358bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpb_h7ikq3                        0x000055c51ab13f13 <unavailable> + 7955\n6    libswiftCore.so                    0x00002b57d4341820 Collection.map<A>(_:) + 426\n7    tmpb_h7ikq3                        0x000055c51ab13caa <unavailable> + 7338\n8    tmpb_h7ikq3                        0x000055c51ab138fc <unavailable> + 6396\n9    libc.so.6                          0x00002b57d484e460 __libc_start_main + 245\n10   tmpb_h7ikq3                        0x000055c51ab13539 <unavailable> + 5433\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str) ?? 0)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > maxval {\n                maxval = intval\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, x) in\n        switch x {\n        case let .success(value):\n            return max(acc, Int(value)!)\n        case let .failure(value):\n            return max(acc, value)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmp2er_ejdn/tmp2er_ejdn.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba1ecebec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba1ecbb5561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba1ecbb5286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba1ecbb513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba1ecbb4bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp2er_ejdn                        0x0000563023c62e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002ba1eccc4410 Sequence.reduce<A>(_:_:) + 530\n7    tmp2er_ejdn                        0x0000563023c62c77 <unavailable> + 7287\n8    tmp2er_ejdn                        0x0000563023c628bc <unavailable> + 6332\n9    libc.so.6                          0x00002ba1ed0aa460 __libc_start_main + 245\n10   tmp2er_ejdn                        0x0000563023c624f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str)!)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmp0xxv4249/tmp0xxv4249.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b396a3c7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b396a0be561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b396a0be286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b396a0be13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b396a0bdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp0xxv4249                        0x000056109c2d1e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b396a1cd410 Sequence.reduce<A>(_:_:) + 530\n7    tmp0xxv4249                        0x000056109c2d1c77 <unavailable> + 7287\n8    tmp0xxv4249                        0x000056109c2d18bc <unavailable> + 6332\n9    libc.so.6                          0x00002b396a5b3460 __libc_start_main + 245\n10   tmp0xxv4249                        0x000056109c2d14f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str) ?? 0)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let val = Int(value) {\n                if val > max {\n                    max = val\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max: Int = 0\n    for val in listval {\n        switch val {\n        case .success(let s):\n            if let i = Int(s) {\n                if i > max {\n                    max = i\n                }\n            }\n        case .failure(let i):\n            if i > max {\n                max = i\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let int_val = Int(val) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                max = max > int ? max : int\n            }\n        case .failure(let int):\n            max = max > int ? max : int\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let num = Int(val) {\n                if num > max {\n                    max = num\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str)!)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmp0xxv4249/tmp0xxv4249.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b396a3c7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b396a0be561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b396a0be286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b396a0be13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b396a0bdbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp0xxv4249                        0x000056109c2d1e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b396a1cd410 Sequence.reduce<A>(_:_:) + 530\n7    tmp0xxv4249                        0x000056109c2d1c77 <unavailable> + 7287\n8    tmp0xxv4249                        0x000056109c2d18bc <unavailable> + 6332\n9    libc.so.6                          0x00002b396a5b3460 __libc_start_main + 245\n10   tmp0xxv4249                        0x000056109c2d14f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .success(value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case let .failure(value):\n            if value > max {\n                max = value\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch ($0, $1) {\n        case (.success(let a), .success(let b)):\n            return Int(a)! > Int(b)! ? Int(a)! : Int(b)!\n        case (.failure(let a), .failure(let b)):\n            return a > b ? a : b\n        case (.success(let a), .failure(let b)):\n            return Int(a)! > b ? Int(a)! : b\n        case (.failure(let a), .success(let b)):\n            return a > Int(b)! ? a : Int(b)!\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "/tmp/tmpcmt4g8yy.swift:8:16: error: type 'Int' has no member 'success'\n        case (.success(let a), .success(let b)):\n              ~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for value in listval {\n        switch value {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .Success(let str):\n            if let int_val = Int(str) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .Failure(let int_val):\n            if int_val > max_val {\n                max_val = int_val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "/tmp/tmp9qhv1hpt.swift:9:15: error: type 'Result<String, Int>' has no member 'Success'\n        case .Success(let str):\n             ~^~~~~~~\n/tmp/tmp9qhv1hpt.swift:15:15: error: type 'Result<String, Int>' has no member 'Failure'\n        case .Failure(let int_val):\n             ~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str) ?? 0)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > maxval {\n                maxval = intval\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.map {\n        switch $0 {\n        case .success(let value):\n            return Int(value) ?? 0\n        case .failure(let value):\n            return value\n        }\n    }.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case let .success(value):\n            return max($0, value.count)\n        case let .failure(value):\n            return max($0, value)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "tmpz_pzb1o1/tmpz_pzb1o1.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4e04b5bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4e04852b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4e04852988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4e048517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz_pzb1o1                        0x000055e20757283a <unavailable> + 6202\n5    libc.so.6                          0x00002b4e04d47460 __libc_start_main + 245\n6    tmpz_pzb1o1                        0x000055e2075723f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intVal = Int(str) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let intVal):\n            if intVal > max {\n                max = intVal\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let value):\n            return max($0, Int(value)!)\n        case .failure(let value):\n            return max($0, value)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpy25f0clp/tmpy25f0clp.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0090ef2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0090be9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b0090be9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b0090be913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b0090be8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpy25f0clp                        0x00005575afef8e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b0090cf8410 Sequence.reduce<A>(_:_:) + 530\n7    tmpy25f0clp                        0x00005575afef8c77 <unavailable> + 7287\n8    tmpy25f0clp                        0x00005575afef88bc <unavailable> + 6332\n9    libc.so.6                          0x00002b00910de460 __libc_start_main + 245\n10   tmpy25f0clp                        0x00005575afef84f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (max, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max > Int(str) ?? 0 ? max : Int(str) ?? 0\n        case .failure(let int):\n            return max > int ? max : int\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for value in listval {\n        switch value {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        if case let .success(value) = $1 {\n            return max($0, Int(value)!)\n        } else {\n            return $0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "tmpz5bnueic/tmpz5bnueic.swift:8: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad2d7be2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad2d78d9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ad2d78d9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ad2d78d913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ad2d78d8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpz5bnueic                        0x0000558211f85e46 <unavailable> + 7750\n6    libswiftCore.so                    0x00002ad2d79e8410 Sequence.reduce<A>(_:_:) + 530\n7    tmpz5bnueic                        0x0000558211f85c77 <unavailable> + 7287\n8    tmpz5bnueic                        0x0000558211f858bc <unavailable> + 6332\n9    libc.so.6                          0x00002ad2d7dce460 __libc_start_main + 245\n10   tmpz5bnueic                        0x0000558211f854f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return acc > Int(str) ?? 0 ? acc : Int(str) ?? 0\n        case .failure(let int):\n            return acc > int ? acc : int\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let s):\n            if let i = Int(s) {\n                if i > max {\n                    max = i\n                }\n            }\n        case .failure(let i):\n            if i > max {\n                max = i\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpsddmqqcq/tmpsddmqqcq.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11cd2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11ccfe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b11ccfe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b11ccfdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsddmqqcq                        0x0000560679362cba <unavailable> + 7354\n5    libc.so.6                          0x00002b11cd4d5460 __libc_start_main + 245\n6    tmpsddmqqcq                        0x0000560679362879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max_val {\n                    max_val = intval\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpnudf_3pp/tmpnudf_3pp.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af5eedd4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af5eeacbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af5eeacb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af5eeaca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnudf_3pp                        0x0000557e2d367cba <unavailable> + 7354\n5    libc.so.6                          0x00002af5eefc0460 __libc_start_main + 245\n6    tmpnudf_3pp                        0x0000557e2d367879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intvalue = Int(value) {\n                if intvalue > max {\n                    max = intvalue\n                }\n            }\n        case .failure(let error):\n            print(\"Error: \\(error)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "tmpv8kb7v_9/tmpv8kb7v_9.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea5d514c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea5d20bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea5d20b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea5d20a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv8kb7v_9                        0x00005573ec858cba <unavailable> + 7354\n5    libc.so.6                          0x00002aea5d700460 __libc_start_main + 245\n6    tmpv8kb7v_9                        0x00005573ec858879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { max($0, $1.getOrElse(0)) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "/tmp/tmpmpwfuixr.swift:6:43: error: value of type 'Result<String, Int>' has no member 'getOrElse'\n    return listval.reduce(0) { max($0, $1.getOrElse(0)) }\n                                       ~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str) ?? 0)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let val):\n            return max($0, Int(val)!)\n        case .failure(let val):\n            return max($0, val)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpap1dih4a/tmpap1dih4a.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b34f6a38c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b34f672f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b34f672f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b34f672f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b34f672ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpap1dih4a                        0x000055861871fe62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b34f683e410 Sequence.reduce<A>(_:_:) + 530\n7    tmpap1dih4a                        0x000055861871fc77 <unavailable> + 7287\n8    tmpap1dih4a                        0x000055861871f8bc <unavailable> + 6332\n9    libc.so.6                          0x00002b34f6c24460 __libc_start_main + 245\n10   tmpap1dih4a                        0x000055861871f4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let str):\n            return max($0, Int(str) ?? 0)\n        case .failure(let int):\n            return max($0, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let str):\n            return max($0, Int(str) ?? 0)\n        case .failure(let int):\n            return max($0, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let value):\n            return max($0, Int(value)!)\n        case .failure(let value):\n            return max($0, value)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpy25f0clp/tmpy25f0clp.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0090ef2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0090be9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b0090be9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b0090be913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b0090be8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpy25f0clp                        0x00005575afef8e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b0090cf8410 Sequence.reduce<A>(_:_:) + 530\n7    tmpy25f0clp                        0x00005575afef8c77 <unavailable> + 7287\n8    tmpy25f0clp                        0x00005575afef88bc <unavailable> + 6332\n9    libc.so.6                          0x00002b00910de460 __libc_start_main + 245\n10   tmpy25f0clp                        0x00005575afef84f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case let .success(val):\n            return max(acc, Int(val)!)\n        case let .failure(val):\n            return max(acc, val)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "tmpjouxs76q/tmpjouxs76q.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9acf7cdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9acf4c4561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9acf4c4286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9acf4c413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9acf4c3bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpjouxs76q                        0x0000563e1ee73e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b9acf5d3410 Sequence.reduce<A>(_:_:) + 530\n7    tmpjouxs76q                        0x0000563e1ee73c77 <unavailable> + 7287\n8    tmpjouxs76q                        0x0000563e1ee738bc <unavailable> + 6332\n9    libc.so.6                          0x00002b9acf9b9460 __libc_start_main + 245\n10   tmpjouxs76q                        0x0000563e1ee734f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    let max_val = listval.compactMap {\n        switch $0 {\n        case .success(let val):\n            return Int(val)\n        case .failure(let val):\n            return val\n        }\n    }.max() ?? 0\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let val = Int(str) {\n                if val > max {\n                    max = val\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let s):\n            return max($0, Int(s)!)\n        case .failure(let i):\n            return max($0, i)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "tmpfy2gowt4/tmpfy2gowt4.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add54e97c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add54b8e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002add54b8e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002add54b8e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002add54b8dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpfy2gowt4                        0x0000560882bb9e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002add54c9d410 Sequence.reduce<A>(_:_:) + 530\n7    tmpfy2gowt4                        0x0000560882bb9c77 <unavailable> + 7287\n8    tmpfy2gowt4                        0x0000560882bb98bc <unavailable> + 6332\n9    libc.so.6                          0x00002add55083460 __libc_start_main + 245\n10   tmpfy2gowt4                        0x0000560882bb94f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let val):\n            return max(acc, Int(val)!)\n        case .failure(let val):\n            return max(acc, val)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpjt5vyrd5/tmpjt5vyrd5.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afc937b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afc934ab561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002afc934ab286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002afc934ab13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002afc934aabb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpjt5vyrd5                        0x000055b0e6ba0e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002afc935ba410 Sequence.reduce<A>(_:_:) + 530\n7    tmpjt5vyrd5                        0x000055b0e6ba0c77 <unavailable> + 7287\n8    tmpjt5vyrd5                        0x000055b0e6ba08bc <unavailable> + 6332\n9    libc.so.6                          0x00002afc939a0460 __libc_start_main + 245\n10   tmpjt5vyrd5                        0x000055b0e6ba04f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpnudf_3pp/tmpnudf_3pp.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af5eedd4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af5eeacbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af5eeacb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af5eeaca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnudf_3pp                        0x0000557e2d367cba <unavailable> + 7354\n5    libc.so.6                          0x00002af5eefc0460 __libc_start_main + 245\n6    tmpnudf_3pp                        0x0000557e2d367879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { max($0, $1.valueOr(0)) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "/tmp/tmp6tjtwxs7.swift:6:43: error: value of type 'Result<String, Int>' has no member 'valueOr'\n    return listval.reduce(0) { max($0, $1.valueOr(0)) }\n                                       ~~ ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str) ?? 0)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let s):\n            if let i = Int(s) {\n                if i > max {\n                    max = i\n                }\n            }\n        case .failure(let e):\n            if e > max {\n                max = e\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return Int(str) ?? 0\n        case .failure(let int):\n            return int\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "tmpb7h_mo0_/tmpb7h_mo0_.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9004282c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9003f79b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9003f79988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9003f787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb7h_mo0_                        0x000056002faf380a <unavailable> + 6154\n5    libc.so.6                          0x00002b900446e460 __libc_start_main + 245\n6    tmpb7h_mo0_                        0x000056002faf33c9 <unavailable> + 5065\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let str):\n            return max($0, Int(str) ?? 0)\n        case .failure(let int):\n            return max($0, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > maxval {\n                maxval = intval\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let str):\n            if let val = Int(str) {\n                if val > max {\n                    max = val\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.filter({ $0.isSuccess }).map({ $0.value! }).reduce(0, { max($0, $1) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "/tmp/tmpp50zs625.swift:6:32: error: value of type 'Result<String, Int>' has no member 'isSuccess'\n    return listval.filter({ $0.isSuccess }).map({ $0.value! }).reduce(0, { max($0, $1) })\n                            ~~ ^~~~~~~~~\n/tmp/tmpp50zs625.swift:6:54: error: value of type 'Result<String, Int>' has no member 'value'\n    return listval.filter({ $0.isSuccess }).map({ $0.value! }).reduce(0, { max($0, $1) })\n                                                  ~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let value):\n            if value > max {\n                max = value\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let value):\n            return max($0, Int(value)!)\n        case .failure(let value):\n            return max($0, value)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpy25f0clp/tmpy25f0clp.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0090ef2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0090be9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b0090be9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b0090be913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b0090be8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpy25f0clp                        0x00005575afef8e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b0090cf8410 Sequence.reduce<A>(_:_:) + 530\n7    tmpy25f0clp                        0x00005575afef8c77 <unavailable> + 7287\n8    tmpy25f0clp                        0x00005575afef88bc <unavailable> + 6332\n9    libc.so.6                          0x00002b00910de460 __libc_start_main + 245\n10   tmpy25f0clp                        0x00005575afef84f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case let .success(value):\n            return max($0, value.count)\n        case let .failure(value):\n            return max($0, value)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "tmpz_pzb1o1/tmpz_pzb1o1.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4e04b5bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4e04852b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4e04852988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4e048517b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz_pzb1o1                        0x000055e20757283a <unavailable> + 6202\n5    libc.so.6                          0x00002b4e04d47460 __libc_start_main + 245\n6    tmpz_pzb1o1                        0x000055e2075723f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .success(str):\n            if let intVal = Int(str) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case let .failure(int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let val):\n            return max($0, Int(val)!)\n        case .failure(let val):\n            return max($0, val)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpap1dih4a/tmpap1dih4a.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b34f6a38c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b34f672f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b34f672f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b34f672f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b34f672ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpap1dih4a                        0x000055861871fe62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b34f683e410 Sequence.reduce<A>(_:_:) + 530\n7    tmpap1dih4a                        0x000055861871fc77 <unavailable> + 7287\n8    tmpap1dih4a                        0x000055861871f8bc <unavailable> + 6332\n9    libc.so.6                          0x00002b34f6c24460 __libc_start_main + 245\n10   tmpap1dih4a                        0x000055861871f4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case let .Success(value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case let .Failure(value):\n            if value > max {\n                max = value\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "/tmp/tmp5b3ojmab.swift:9:19: error: type 'Result<String, Int>' has no member 'Success'\n        case let .Success(value):\n                 ~^~~~~~~\n/tmp/tmp5b3ojmab.swift:15:19: error: type 'Result<String, Int>' has no member 'Failure'\n        case let .Failure(value):\n                 ~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .success(value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case let .failure(error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .success(val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case let .failure(val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max_val {\n                    max_val = intval\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let value):\n            if value > max {\n                max = value\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let val):\n            if val > maxval {\n                maxval = val\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.map {\n        switch $0 {\n        case .success(let val):\n            return Int(val)!\n        case .failure(let val):\n            return val\n        }\n    }.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpb_h7ikq3/tmpb_h7ikq3.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57d4662c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57d4359561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57d4359286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57d435913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57d4358bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpb_h7ikq3                        0x000055c51ab13f13 <unavailable> + 7955\n6    libswiftCore.so                    0x00002b57d4341820 Collection.map<A>(_:) + 426\n7    tmpb_h7ikq3                        0x000055c51ab13caa <unavailable> + 7338\n8    tmpb_h7ikq3                        0x000055c51ab138fc <unavailable> + 6396\n9    libc.so.6                          0x00002b57d484e460 __libc_start_main + 245\n10   tmpb_h7ikq3                        0x000055c51ab13539 <unavailable> + 5433\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.map {\n        switch $0 {\n        case .success(let value):\n            return Int(value)!\n        case .failure(let value):\n            return value\n        }\n    }.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "tmpx9lqdj28/tmpx9lqdj28.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a5f31fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a5f016561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b4a5f016286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b4a5f01613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b4a5f015bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpx9lqdj28                        0x000055f7e6cd5f13 <unavailable> + 7955\n6    libswiftCore.so                    0x00002b4a5effe820 Collection.map<A>(_:) + 426\n7    tmpx9lqdj28                        0x000055f7e6cd5caa <unavailable> + 7338\n8    tmpx9lqdj28                        0x000055f7e6cd58fc <unavailable> + 6396\n9    libc.so.6                          0x00002b4a5f50b460 __libc_start_main + 245\n10   tmpx9lqdj28                        0x000055f7e6cd5539 <unavailable> + 5433\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, curr) in\n        switch curr {\n        case .success(let val):\n            return max(acc, Int(val)!)\n        case .failure(let err):\n            return max(acc, err)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "tmpyo5_snid/tmpyo5_snid.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b100a44cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b100a143561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b100a143286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b100a14313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b100a142bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpyo5_snid                        0x00005608492cae62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b100a252410 Sequence.reduce<A>(_:_:) + 530\n7    tmpyo5_snid                        0x00005608492cac77 <unavailable> + 7287\n8    tmpyo5_snid                        0x00005608492ca8bc <unavailable> + 6332\n9    libc.so.6                          0x00002b100a638460 __libc_start_main + 245\n10   tmpyo5_snid                        0x00005608492ca4f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.map {\n        switch $0 {\n        case .success(let val):\n            return Int(val)!\n        case .failure(let val):\n            return val\n        }\n    }.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "tmpb_h7ikq3/tmpb_h7ikq3.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57d4662c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57d4359561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b57d4359286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b57d435913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b57d4358bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpb_h7ikq3                        0x000055c51ab13f13 <unavailable> + 7955\n6    libswiftCore.so                    0x00002b57d4341820 Collection.map<A>(_:) + 426\n7    tmpb_h7ikq3                        0x000055c51ab13caa <unavailable> + 7338\n8    tmpb_h7ikq3                        0x000055c51ab138fc <unavailable> + 6396\n9    libc.so.6                          0x00002b57d484e460 __libc_start_main + 245\n10   tmpb_h7ikq3                        0x000055c51ab13539 <unavailable> + 5433\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intVal = Int(value) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpnudf_3pp/tmpnudf_3pp.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af5eedd4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af5eeacbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af5eeacb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af5eeaca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnudf_3pp                        0x0000557e2d367cba <unavailable> + 7354\n5    libc.so.6                          0x00002af5eefc0460 __libc_start_main + 245\n6    tmpnudf_3pp                        0x0000557e2d367879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, x) -> Int in\n        switch x {\n        case .success(let str):\n            return max(acc, Int(str)!)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "tmpwj439j76/tmpwj439j76.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b938d440c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b938d137561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b938d137286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b938d13713c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b938d136bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpwj439j76                        0x00005652c1851e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b938d246410 Sequence.reduce<A>(_:_:) + 530\n7    tmpwj439j76                        0x00005652c1851c77 <unavailable> + 7287\n8    tmpwj439j76                        0x00005652c18518bc <unavailable> + 6332\n9    libc.so.6                          0x00002b938d62c460 __libc_start_main + 245\n10   tmpwj439j76                        0x00005652c18514f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int_val = Int(str) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let int_val):\n            if int_val > max_val {\n                max_val = int_val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmpsddmqqcq/tmpsddmqqcq.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11cd2e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11ccfe0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b11ccfe0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b11ccfdf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsddmqqcq                        0x0000560679362cba <unavailable> + 7354\n5    libc.so.6                          0x00002b11cd4d5460 __libc_start_main + 245\n6    tmpsddmqqcq                        0x0000560679362879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str) ?? 0)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return acc > Int(str) ?? 0 ? acc : Int(str) ?? 0\n        case .failure(let int):\n            return acc > int ? acc : int\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous list.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123698,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}