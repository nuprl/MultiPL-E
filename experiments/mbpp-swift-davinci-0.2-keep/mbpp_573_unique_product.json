{
  "name": "mbpp_573_unique_product",
  "language": "swift",
  "prompt": "\n/// Write a python function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(unique_product(list_data: [10, 20, 30, 40, 20, 50, 60, 40]) == 720000000)\nassert(unique_product(list_data: [1, 2, 3, 1]) == 6)\nassert(unique_product(list_data: [7, 8, 9, 0, 1, 1]) == 0)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product",
    "    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product",
    "    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product",
    "    var product = 1\n    var unique_list = [Int]()\n    for number in list_data {\n        if !unique_list.contains(number) {\n            unique_list.append(number)\n        }\n    }\n    for number in unique_list {\n        product *= number\n    }\n    return product",
    "    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product",
    "    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product",
    "    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n            product *= i\n        }\n    }\n    return product",
    "    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product",
    "    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product",
    "    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product",
    "    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product",
    "    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product",
    "    var unique_list = [Int]()\n    var product = 1\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product",
    "    var product = 1\n    var unique_list = [Int]()\n    for num in list_data {\n        if !unique_list.contains(num) {\n            unique_list.append(num)\n        }\n    }\n    for num in unique_list {\n        product *= num\n    }\n    return product",
    "    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product",
    "    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product",
    "    var unique_list = [Int]()\n    var product = 1\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product",
    "    var product = 1\n    var unique_list = [Int]()\n    for i in list_data {\n        if !unique_list.contains(i) {\n            unique_list.append(i)\n        }\n    }\n    for i in unique_list {\n        product *= i\n    }\n    return product",
    "    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    var product = 1\n    for item in unique_list {\n        product *= item\n    }\n    return product",
    "    var product = 1\n    var unique_list = [Int]()\n    for item in list_data {\n        if !unique_list.contains(item) {\n            unique_list.append(item)\n        }\n    }\n    for item in unique_list {\n        product *= item\n    }\n    return product"
  ]
}