{
  "name": "mbpp_249_intersection_array",
  "language": "swift",
  "prompt": "\n/// Write a function to find the intersection of two arrays.\nfunc intersection_array(array_nums1: [Int], array_nums2: [Int]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [1, 2, 4, 8, 9]) == [1, 2, 8, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [3, 5, 7, 9]) == [3, 5, 7, 9])\nassert(intersection_array(array_nums1: [1, 2, 3, 5, 7, 8, 9, 10], array_nums2: [10, 20, 30, 40]) == [10])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) && !result.contains(num) {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result",
    "    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    set_nums1.intersection(set_nums2)\n    return Array(set_nums1)",
    "    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result",
    "    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = [Int]()\n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result",
    "    var dict = [Int: Int]()\n    var result = [Int]()\n    for num in array_nums1 {\n        dict[num] = 1\n    }\n    for num in array_nums2 {\n        if dict[num] == 1 {\n            result.append(num)\n            dict[num] = 2\n        }\n    }\n    return result",
    "    var set_nums1 = Set<Int>()\n    var set_nums2 = Set<Int>()\n    var set_intersection = Set<Int>()\n    \n    for num in array_nums1 {\n        set_nums1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set_nums2.insert(num)\n    }\n    \n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            set_intersection.insert(num)\n        }\n    }\n    \n    return Array(set_intersection)",
    "    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    for num in set_nums1 {\n        if set_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n            dict[num] = nil\n        }\n    }\n    return result",
    "    var array_intersection = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            array_intersection.append(num)\n        }\n    }\n    return array_intersection",
    "    var set1 = Set<Int>()\n    var set2 = Set<Int>()\n    var result = [Int]()\n    \n    for num in array_nums1 {\n        set1.insert(num)\n    }\n    \n    for num in array_nums2 {\n        set2.insert(num)\n    }\n    \n    for num in set1 {\n        if set2.contains(num) {\n            result.append(num)\n        }\n    }\n    \n    return result",
    "    var array_nums1 = array_nums1\n    var array_nums2 = array_nums2\n    var result = [Int]()\n    for i in 0..<array_nums1.count {\n        for j in 0..<array_nums2.count {\n            if array_nums1[i] == array_nums2[j] {\n                result.append(array_nums1[i])\n                array_nums2.remove(at: j)\n                break\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result",
    "    var intersection_array = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            intersection_array.append(num)\n        }\n    }\n    return intersection_array",
    "    var result = [Int]()\n    for num in array_nums1 {\n        if array_nums2.contains(num) {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in array_nums1 {\n        if dict[num] == nil {\n            dict[num] = 1\n        } else {\n            dict[num] = dict[num]! + 1\n        }\n    }\n    for num in array_nums2 {\n        if dict[num] != nil {\n            result.append(num)\n            dict[num] = dict[num]! - 1\n            if dict[num] == 0 {\n                dict.removeValue(forKey: num)\n            }\n        }\n    }\n    return result",
    "    var set_nums1 = Set(array_nums1)\n    var set_nums2 = Set(array_nums2)\n    set_nums1.formIntersection(set_nums2)\n    return Array(set_nums1)"
  ]
}