{
  "name": "mbpp_61_count_Substrings",
  "language": "swift",
  "prompt": "\n/// Write a python function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s: String) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Substrings(s: \"112112\") == 6)\nassert(count_Substrings(s: \"111\") == 6)\nassert(count_Substrings(s: \"1101112\") == 12)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            let sum = subString.reduce(0, {$0 + Int(String($1))!})\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)])\n            if subString.count == subString.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j + 1)])\n            if subString.count == sumOfDigits(s: subString) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 1...s.count {\n        for j in 0...s.count - i {\n            let start = s.index(s.startIndex, offsetBy: j)\n            let end = s.index(s.startIndex, offsetBy: j + i)\n            let sub = s[start..<end]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == i {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j + 1)]\n            if sub.count == sum_of_digits(s: String(sub)) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            if subString.count == subString.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = String(s[s.index(s.startIndex, offsetBy: i)...s.index(s.startIndex, offsetBy: j)])\n            if subString.count == subString.compactMap({ Int(String($0)) }).reduce(0, +) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subStr = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)])\n            if subStr.count == subStr.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            let sum = subString.reduce(0, {$0 + Int(String($1))!})\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i+1...s.count {\n            let subString = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j)]\n            let sum = subString.reduce(0, {$0 + Int(String($1))!})\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            let sum = subString.reduce(0, {$0 + Int(String($1))!})\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j + 1)])\n            if subString.count == subString.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0...s.count {\n        for j in i...s.count {\n            let sub = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j)]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j + 1)])\n            if subString.count == subString.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            let sum = subString.reduce(0, { $0 + Int(String($1))! })\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            let sum = subString.reduce(0, {$0 + Int(String($1))!})\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let substring = s[i...j]\n            let sum = substring.reduce(0, { $0 + Int(String($1))! })\n            if sum == substring.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sum_of_digits(s: sub) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            let sum = subString.reduce(0, { $0 + Int(String($1))! })\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j + 1)]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j + 1)]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let substring = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)]\n            if substring.count == substring.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            if subString.count == subString.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i+1...s.count {\n            let sub = s[i..<j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let start = s.index(s.startIndex, offsetBy: i)\n            let end = s.index(s.startIndex, offsetBy: j)\n            let sub = s[start...end]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = String(s[s.index(s.startIndex, offsetBy: i)...s.index(s.startIndex, offsetBy: j)])\n            if sub.count == sub.compactMap({Int(String($0))}).reduce(0, +) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            if subString.count == subString.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let s1 = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)]\n            let s2 = s1.filter { $0.isNumber }\n            if s1.count == s2.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let substr = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)])\n            if substr.count == substr.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j + 1)])\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            let sum = subString.reduce(0, { $0 + Int(String($1))! })\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.digits.reduce(0, +) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)])\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)])\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i+1...s.count {\n            let sub = s[i..<j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 1...s.count {\n        for j in 0...s.count - i {\n            let start = s.index(s.startIndex, offsetBy: j)\n            let end = s.index(s.startIndex, offsetBy: j + i)\n            let range = start..<end\n            let substring = s[range]\n            let sum = substring.reduce(0) { $0 + Int(String($1))! }\n            if sum == i {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            let sum = subString.reduce(0, { $0 + Int(String($1))! })\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = String(s[s.index(s.startIndex, offsetBy: i)...s.index(s.startIndex, offsetBy: j)])\n            if subString.count == subString.digits.reduce(0, +) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            if subString.count == subString.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let substr = s[i...j]\n            if substr.count == substr.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            let sum = subString.reduce(0, { $0 + Int(String($1))! })\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j + 1)])\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            if sum_of_digits(s: String(s[i...j])) == j - i + 1 {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            if subString.count == subString.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)]\n            let sum = subString.reduce(0, { $0 + Int(String($1))! })\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = String(s[s.index(s.startIndex, offsetBy: i) ... s.index(s.startIndex, offsetBy: j)])\n            if sub.count == sub.digits.reduce(0, +) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            let sum = subString.reduce(0, {$0 + Int(String($1))!})\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.digits.reduce(0, +) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.digits.reduce(0, +) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j + 1)])\n            if subString.count == subString.digits.reduce(0, +) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let substring = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)]\n            let sum = substring.reduce(0, {$0 + Int(String($1))!})\n            if sum == substring.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            let sum = subString.reduce(0) { $0 + Int(String($1))! }\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j + 1)])\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    let count = s.count\n    var result = 0\n    for i in 0..<count {\n        for j in i..<count {\n            let substring = s[i...j]\n            let sum = substring.reduce(0) { $0 + Int(String($1))! }\n            if sum == substring.count {\n                result += 1\n            }\n        }\n    }\n    return result",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)])\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sum_of_digits(s: sub) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 1...s.count {\n        for j in 0...s.count - i {\n            let start = s.index(s.startIndex, offsetBy: j)\n            let end = s.index(s.startIndex, offsetBy: j + i)\n            let range = start..<end\n            let subString = s[range]\n            let sum = subString.reduce(0, {$0 + Int(String($1))!})\n            if sum == i {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            let sum = subString.reduce(0, {$0 + Int(String($1))!})\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.digits.reduce(0, +) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j+1)])\n            if subString.count == subString.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j + 1)])\n            if subString.count == subString.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j + 1)]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            if subString.count == subString.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: j + 1)])\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count"
  ]
}