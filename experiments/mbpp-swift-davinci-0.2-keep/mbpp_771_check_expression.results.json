{
  "name": "mbpp_771_check_expression",
  "language": "swift",
  "prompt": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" || c == \"[\" || c == \"{\" {\n            stack.push(c)\n        } else if c == \")\" || c == \"]\" || c == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if top == \"(\" && c != \")\" {\n                return false\n            }\n            if top == \"[\" && c != \"]\" {\n                return false\n            }\n            if top == \"{\" && c != \"}\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmpipths7ws.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    \n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(element: char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() != \"(\" {\n                return false\n            } else if char == \"]\" && stack.peek() != \"[\" {\n                return false\n            } else if char == \"}\" && stack.peek() != \"{\" {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmprluzvizw.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if top == \"(\" && char != \")\" {\n                return false\n            } else if top == \"[\" && char != \"]\" {\n                return false\n            } else if top == \"{\" && char != \"}\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp8d0_jbpe.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    let stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_tz1zvja.swift:4:17: error: cannot find 'Stack' in scope\n    let stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"{\" && char != \"}\") || (top == \"[\" && char != \"]\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp__7jwe_c.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(element: char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() != \"(\" {\n                return false\n            }\n            if char == \"]\" && stack.peek() != \"[\" {\n                return false\n            }\n            if char == \"}\" && stack.peek() != \"{\" {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp29fg08r6.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"{\" && char != \"}\") || (top == \"[\" && char != \"]\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmpewl85xwf.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp1r6xhkxj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack: [Character] = []\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.append(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty {\n                return false\n            }\n            let top = stack.removeLast()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpzwejuaaz.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpyd5zjjd9.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if !is_matching_pair(left: top!, right: char) {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmp31912ten.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n/tmp/tmp31912ten.swift:13:17: error: cannot find 'is_matching_pair' in scope\n            if !is_matching_pair(left: top!, right: char) {\n                ^~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    let stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_tz1zvja.swift:4:17: error: cannot find 'Stack' in scope\n    let stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"]\" && top != \"[\") || (char == \"}\" && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpfu7z4sq4.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmps1yyvl9i.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"}\" && top != \"{\") || (char == \"]\" && top != \"[\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmplg2utv5f.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(element: char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpjj112mx7.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" {\n            stack.push(c)\n        } else if c == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpdk9p8wvl.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(element: char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpjj112mx7.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() == \"(\" {\n                stack.pop()\n            } else if char == \"]\" && stack.peek() == \"[\" {\n                stack.pop()\n            } else if char == \"}\" && stack.peek() == \"{\" {\n                stack.pop()\n            } else {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmppzx3kp1y.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack: [Character] = []\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.append(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty {\n                return false\n            }\n            let top = stack.popLast()!\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    \n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    \n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmpp7ebty5b.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    let stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    if stack.isEmpty() {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmphhv1fo3j.swift:4:17: error: cannot find 'Stack' in scope\n    let stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    if stack.isEmpty() {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmpwt08whjo.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                let top = stack.pop()\n                if char == \")\" && top != \"(\" {\n                    return false\n                } else if char == \"]\" && top != \"[\" {\n                    return false\n                } else if char == \"}\" && top != \"{\" {\n                    return false\n                }\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpq020hz28.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() != \"(\" {\n                return false\n            }\n            if char == \"]\" && stack.peek() != \"[\" {\n                return false\n            }\n            if char == \"}\" && stack.peek() != \"{\" {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpia4jcqae.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() == \"(\" {\n                stack.pop()\n            } else if char == \"}\" && stack.peek() == \"{\" {\n                stack.pop()\n            } else if char == \"]\" && stack.peek() == \"[\" {\n                stack.pop()\n            } else {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpy6axp__p.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if !isMatchingPair(top: top, char: char) {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmprssw_mmh.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n/tmp/tmprssw_mmh.swift:13:17: error: cannot find 'isMatchingPair' in scope\n            if !isMatchingPair(top: top, char: char) {\n                ^~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(element: char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpmqyv_gd4.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"]\" && top != \"[\") || (char == \"}\" && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpfu7z4sq4.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    if stack.isEmpty() {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmpt35ici5f.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack: [Character] = []\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.append(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty {\n                return false\n            }\n            let top = stack.removeLast()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" || char == \"}\" && top != \"{\" || char == \"]\" && top != \"[\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmp4bke7q0i.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                let top = stack.pop()\n                if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                    return false\n                }\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmp7mmegndi.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.pop() != \"(\" {\n                return false\n            }\n        } else if char == \"]\" {\n            if stack.pop() != \"[\" {\n                return false\n            }\n        } else if char == \"}\" {\n            if stack.pop() != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp5frcoyqy.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if !((top == \"(\" && char == \")\") || (top == \"[\" && char == \"]\") || (top == \"{\" && char == \"}\")) {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp92wtaqgp.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"]\" && top != \"[\") || (char == \"}\" && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmp225mauzm.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        switch char {\n        case \"(\", \"{\", \"[\":\n            stack.push(char)\n        case \")\":\n            if stack.isEmpty() || stack.pop() != \"(\" {\n                return false\n            }\n        case \"}\":\n            if stack.isEmpty() || stack.pop() != \"{\" {\n                return false\n            }\n        case \"]\":\n            if stack.isEmpty() || stack.pop() != \"[\" {\n                return false\n            }\n        default:\n            break\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmpsx09x27w.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() || stack.pop() != \"(\" {\n                return false\n            }\n        } else if char == \"]\" {\n            if stack.isEmpty() || stack.pop() != \"[\" {\n                return false\n            }\n        } else if char == \"}\" {\n            if stack.isEmpty() || stack.pop() != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpz_v7dyju.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(element: char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpjj112mx7.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty {\n                return false\n            }\n            let top = stack.pop()\n            if top == \"(\" && char != \")\" {\n                return false\n            } else if top == \"[\" && char != \"]\" {\n                return false\n            } else if top == \"{\" && char != \"}\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmpesyszdb7.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() != \"(\" {\n                return false\n            }\n            if char == \"]\" && stack.peek() != \"[\" {\n                return false\n            }\n            if char == \"}\" && stack.peek() != \"{\" {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpia4jcqae.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    if stack.isEmpty() {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmpwt08whjo.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                let top = stack.pop()\n                if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                    return false\n                }\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmp7mmegndi.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" {\n            stack.push(c)\n        } else if c == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpdk9p8wvl.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpyd5zjjd9.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack: [Character] = []\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.append(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty {\n                return false\n            }\n            let top = stack.popLast()!\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp1r6xhkxj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if !isMatchingPair(top: top, char: char) {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmpcln_lqca.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n/tmp/tmpcln_lqca.swift:13:17: error: cannot find 'isMatchingPair' in scope\n            if !isMatchingPair(top: top, char: char) {\n                ^~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpzwejuaaz.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() || stack.pop() != \"(\" {\n                return false\n            }\n        } else if char == \"]\" {\n            if stack.isEmpty() || stack.pop() != \"[\" {\n                return false\n            }\n        } else if char == \"}\" {\n            if stack.isEmpty() || stack.pop() != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpz_v7dyju.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" {\n            stack.push(c)\n        } else if c == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpdk9p8wvl.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() || stack.pop() != \"(\" {\n                return false\n            }\n        } else if char == \"]\" {\n            if stack.isEmpty() || stack.pop() != \"[\" {\n                return false\n            }\n        } else if char == \"}\" {\n            if stack.isEmpty() || stack.pop() != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpz_v7dyju.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp1r6xhkxj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if !isMatchingPair(top: top, char: char) {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmprssw_mmh.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n/tmp/tmprssw_mmh.swift:13:17: error: cannot find 'isMatchingPair' in scope\n            if !isMatchingPair(top: top, char: char) {\n                ^~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() != \"(\" {\n                return false\n            }\n            if char == \"}\" && stack.peek() != \"{\" {\n                return false\n            }\n            if char == \"]\" && stack.peek() != \"[\" {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpbajl7med.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmps1yyvl9i.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp1r6xhkxj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() || stack.pop() != \"(\" {\n                return false\n            }\n        } else if char == \"]\" {\n            if stack.isEmpty() || stack.pop() != \"[\" {\n                return false\n            }\n        } else if char == \"}\" {\n            if stack.isEmpty() || stack.pop() != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpz_v7dyju.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" || c == \"{\" || c == \"[\" {\n            stack.push(c)\n        } else if c == \")\" || c == \"}\" || c == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (c == \")\" && top != \"(\") || (c == \"}\" && top != \"{\") || (c == \"]\" && top != \"[\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmp8hiqiu7x.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"}\" && top != \"{\") || (char == \"]\" && top != \"[\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmplg2utv5f.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" {\n            stack.push(c)\n        } else if c == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmp5xta6x31.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"]\" && top != \"[\") || (char == \"}\" && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpfu7z4sq4.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"{\" && char != \"}\") || (top == \"[\" && char != \"]\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp__7jwe_c.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    var i = 0\n    while i < exp.count {\n        let char = exp[exp.index(exp.startIndex, offsetBy: i)]\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"{\" && char != \"}\") || (top == \"[\" && char != \"]\") {\n                return false\n            }\n        }\n        i += 1\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmp9_v3_2gu.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() != \"(\" {\n                return false\n            }\n            if char == \"}\" && stack.peek() != \"{\" {\n                return false\n            }\n            if char == \"]\" && stack.peek() != \"[\" {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpbajl7med.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" || c == \"[\" || c == \"{\" {\n            stack.push(c)\n        } else if c == \")\" || c == \"]\" || c == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if c == \")\" && top != \"(\" {\n                return false\n            }\n            if c == \"]\" && top != \"[\" {\n                return false\n            }\n            if c == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmpy52mcljc.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if top == \"(\" && char != \")\" {\n                return false\n            } else if top == \"[\" && char != \"]\" {\n                return false\n            } else if top == \"{\" && char != \"}\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp8d0_jbpe.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" || c == \"[\" || c == \"{\" {\n            stack.push(c)\n        } else if c == \")\" || c == \"]\" || c == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if c == \")\" && top != \"(\" {\n                return false\n            }\n            if c == \"]\" && top != \"[\" {\n                return false\n            }\n            if c == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmpy52mcljc.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() != \"(\" {\n                return false\n            }\n            if char == \"]\" && stack.peek() != \"[\" {\n                return false\n            }\n            if char == \"}\" && stack.peek() != \"{\" {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpia4jcqae.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"{\" && char != \"}\") || (top == \"[\" && char != \"]\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmpewl85xwf.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                let top = stack.pop()\n                if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                    return false\n                }\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmp7mmegndi.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"]\" && top != \"[\") || (char == \"}\" && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmp225mauzm.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"]\" && top != \"[\") || (char == \"}\" && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpfu7z4sq4.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}