{
  "name": "mbpp_222_check_type",
  "language": "swift",
  "prompt": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != tuple_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp1q80knr1.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1q80knr1.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1q80knr1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1q80knr1.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    switch tuple_type {\n    case is Int.Type:\n        return true\n    case is String.Type:\n        return true\n    case is Double.Type:\n        return true\n    case is Float.Type:\n        return true\n    default:\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpeu6vpu3c.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeu6vpu3c.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpeu6vpu3c.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    let set = Set(type_array)\n    if set.count == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp7ye4okqm.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ye4okqm.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ye4okqm.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7ye4okqm.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_string = String(describing: tuple_type)\n    if tuple_type_string.contains(\"(\") {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpokmgdan4.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpokmgdan4.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpokmgdan4.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_string = String(describing: tuple_type)\n    if tuple_type_string == \"Tuple\" {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmphs05ulpy.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphs05ulpy.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphs05ulpy.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = Mirror(reflecting: test_tuple).subjectType\n    for i in test_tuple {\n        if Mirror(reflecting: i).subjectType != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp4j9rxj7d.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4j9rxj7d.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4j9rxj7d.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4j9rxj7d.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    print(tuple_type)\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpnfmp9vej.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnfmp9vej.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnfmp9vej.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpv0wlas9h.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv0wlas9h.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv0wlas9h.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv0wlas9h.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpgxt28459.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgxt28459.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgxt28459.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgxt28459.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type != type(of: i) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpt14jqxsg.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt14jqxsg.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt14jqxsg.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt14jqxsg.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple = test_tuple as! (AnyHashable, AnyHashable, AnyHashable, AnyHashable, AnyHashable)\n    let type1 = type(of: test_tuple.0)\n    let type2 = type(of: test_tuple.1)\n    let type3 = type(of: test_tuple.2)\n    let type4 = type(of: test_tuple.3)\n    let type5 = type(of: test_tuple.4)\n    if type1 == type2 && type2 == type3 && type3 == type4 && type4 == type5 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpa0l05bf5.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa0l05bf5.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa0l05bf5.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp7nqorw2o.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7nqorw2o.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7nqorw2o.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7nqorw2o.swift:5:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmp7nqorw2o.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpyg0t9xxj.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpyg0t9xxj.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    if tuple_type_str.contains(\"Tuple\") {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpith7hyu8.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpith7hyu8.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpith7hyu8.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpb1b_23wn.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var count = 0\n    for i in test_tuple {\n        if type(of: i) == type(of: test_tuple[0]) {\n            count += 1\n        }\n    }\n    if count == test_tuple.count {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpplgzp2m0.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpplgzp2m0.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpplgzp2m0.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpplgzp2m0.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n/tmp/tmpplgzp2m0.swift:10:28: error: value of type 'AnyHashable' has no member 'count'\n    if count == test_tuple.count {\n                ~~~~~~~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpimuibpwp.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpimuibpwp.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpimuibpwp.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpimuibpwp.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type != type(of: i) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpt14jqxsg.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt14jqxsg.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt14jqxsg.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt14jqxsg.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    let set = Set(type_array)\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmphy5wk83j.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphy5wk83j.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphy5wk83j.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphy5wk83j.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    return type_array.allSatisfy { $0 == type_array[0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpoyt9wmjc.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    if type_array.count == Set(type_array).count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpa3d1bks6.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa3d1bks6.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa3d1bks6.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpa3d1bks6.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp_lqi7c12.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_lqi7c12.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_lqi7c12.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_lqi7c12.swift:5:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_lqi7c12.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_element = test_tuple[0]\n    for element in test_tuple {\n        if type(of: element) != type(of: first_element) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmplyrpooj4.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplyrpooj4.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplyrpooj4.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplyrpooj4.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    let first_element = test_tuple[0]\n                        ~~~~~~~~~~^\n/tmp/tmplyrpooj4.swift:5:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var check = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            check = false\n        }\n    }\n    return check\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpcv2yerc1.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcv2yerc1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcv2yerc1.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcv2yerc1.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpb1b_23wn.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    let set = Set(type_array)\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmphy5wk83j.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphy5wk83j.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphy5wk83j.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphy5wk83j.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_type = type(of: test_tuple)\n    let test_tuple_type_string = String(describing: test_tuple_type)\n    let test_tuple_type_string_array = test_tuple_type_string.split(separator: \",\")\n    let test_tuple_type_string_array_count = test_tuple_type_string_array.count\n    var test_tuple_type_string_array_count_count = 0\n    for i in test_tuple_type_string_array {\n        if i == test_tuple_type_string_array[0] {\n            test_tuple_type_string_array_count_count += 1\n        }\n    }\n    if test_tuple_type_string_array_count == test_tuple_type_string_array_count_count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpsedet2l6.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsedet2l6.swift:35:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsedet2l6.swift:36:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpyg0t9xxj.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpyg0t9xxj.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp9r2svp69.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmp9r2svp69.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple.value)\n    for i in test_tuple {\n        if type(of: i.value) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmprsg4fpqo.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprsg4fpqo.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprsg4fpqo.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprsg4fpqo.swift:4:42: error: value of type 'AnyHashable' has no member 'value'\n    let first_type = type(of: test_tuple.value)\n                              ~~~~~~~~~~ ^~~~~\n/tmp/tmprsg4fpqo.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    let type_set = Set(type_array)\n    return type_set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpjlnucz9p.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjlnucz9p.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjlnucz9p.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjlnucz9p.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_type = type(of: test_tuple)\n    let test_tuple_type_string = String(describing: test_tuple_type)\n    let test_tuple_type_string_array = test_tuple_type_string.split(separator: \",\")\n    let test_tuple_type_string_array_count = test_tuple_type_string_array.count\n    var check_type_flag = true\n    for i in 0..<test_tuple_type_string_array_count {\n        if test_tuple_type_string_array[0] != test_tuple_type_string_array[i] {\n            check_type_flag = false\n            break\n        }\n    }\n    return check_type_flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpbxtiml1j.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbxtiml1j.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbxtiml1j.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpyg0t9xxj.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpyg0t9xxj.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpyg0t9xxj.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpyg0t9xxj.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpbnfkr7k4.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbnfkr7k4.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbnfkr7k4.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbnfkr7k4.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = Mirror(reflecting: test_tuple).subjectType\n    type = type.substring(from: type.index(type.startIndex, offsetBy: 1))\n    type = type.substring(to: type.index(type.endIndex, offsetBy: -1))\n    if type.contains(\"Int\") {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmprunymhp0.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprunymhp0.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprunymhp0.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprunymhp0.swift:5:17: error: value of type 'any Any.Type' has no member 'substring'\n    type = type.substring(from: type.index(type.startIndex, offsetBy: 1))\n           ~~~~ ^~~~~~~~~\n/tmp/tmprunymhp0.swift:5:38: error: value of type 'any Any.Type' has no member 'index'\n    type = type.substring(from: type.index(type.startIndex, offsetBy: 1))\n                                ~~~~ ^~~~~\n/tmp/tmprunymhp0.swift:5:49: error: value of type 'any Any.Type' has no member 'startIndex'\n    type = type.substring(from: type.index(type.startIndex, offsetBy: 1))\n                                           ~~~~ ^~~~~~~~~~\n/tmp/tmprunymhp0.swift:6:17: error: value of type 'any Any.Type' has no member 'substring'\n    type = type.substring(to: type.index(type.endIndex, offsetBy: -1))\n           ~~~~ ^~~~~~~~~\n/tmp/tmprunymhp0.swift:6:36: error: value of type 'any Any.Type' has no member 'index'\n    type = type.substring(to: type.index(type.endIndex, offsetBy: -1))\n                              ~~~~ ^~~~~\n/tmp/tmprunymhp0.swift:6:47: error: value of type 'any Any.Type' has no member 'endIndex'\n    type = type.substring(to: type.index(type.endIndex, offsetBy: -1))\n                                         ~~~~ ^~~~~~~~\n/tmp/tmprunymhp0.swift:7:13: error: value of type 'any Any.Type' has no member 'contains'\n    if type.contains(\"Int\") {\n       ~~~~ ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var temp = test_tuple.first\n    for i in test_tuple {\n        if type(of: i) != type(of: temp) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpyj5dllrc.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyj5dllrc.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyj5dllrc.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyj5dllrc.swift:4:27: error: value of type 'AnyHashable' has no member 'first'\n    var temp = test_tuple.first\n               ~~~~~~~~~~ ^~~~~\n/tmp/tmpyj5dllrc.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    let tuple_type_str_arr = tuple_type_str.components(separatedBy: \",\")\n    let tuple_type_str_arr_count = tuple_type_str_arr.count\n    var tuple_type_str_arr_count_temp = tuple_type_str_arr_count - 1\n    var tuple_type_str_arr_count_temp_flag = 0\n    while tuple_type_str_arr_count_temp > 0 {\n        if tuple_type_str_arr[0] == tuple_type_str_arr[tuple_type_str_arr_count_temp] {\n            tuple_type_str_arr_count_temp_flag += 1\n        }\n        tuple_type_str_arr_count_temp -= 1\n    }\n    if tuple_type_str_arr_count_temp_flag == tuple_type_str_arr_count - 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp04r8dqa2.swift:36:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp04r8dqa2.swift:37:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp04r8dqa2.swift:38:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp04r8dqa2.swift:6:45: error: value of type 'String' has no member 'components'\n    let tuple_type_str_arr = tuple_type_str.components(separatedBy: \",\")\n                             ~~~~~~~~~~~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var result = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            result = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpbbk69y41.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbbk69y41.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbbk69y41.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbbk69y41.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_string = String(describing: tuple_type)\n    let tuple_type_string_array = tuple_type_string.split(separator: \",\")\n    let tuple_type_string_array_count = tuple_type_string_array.count\n    var tuple_type_string_array_count_index = 0\n    var tuple_type_string_array_count_index_value = tuple_type_string_array[tuple_type_string_array_count_index]\n    var tuple_type_string_array_count_index_value_array = tuple_type_string_array_count_index_value.split(separator: \":\")\n    var tuple_type_string_array_count_index_value_array_count = tuple_type_string_array_count_index_value_array.count\n    var tuple_type_string_array_count_index_value_array_count_index = 0\n    var tuple_type_string_array_count_index_value_array_count_index_value = tuple_type_string_array_count_index_value_array[tuple_type_string_array_count_index_value_array_count_index]\n    var tuple_type_string_array_count_index_value_array_count_index_value_string = String(tuple_type_string_array_count_index_value_array_count_index_value)\n    var tuple_type_string_array_count_index_value_array_count_index_value_string_array = tuple_type_string_array_count_index_value_array_count_index_value_string.split(separator: \".\")\n    var tuple_type_string_array_count_index_value_array_count_index_value_string_array_count = tuple_type_string_array_count_index_value_array_count_index_value_string_array.count\n    var tuple_type_string_array_count_index_value_array_count_index_value_string_array_count_index = 0\n    var tuple_type_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp_lshxsgo.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_lshxsgo.swift:35:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_lshxsgo.swift:36:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_lshxsgo.swift:18:9: error: type annotation missing in pattern\n    var tuple_type_string\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple = test_tuple as! (AnyHashable, AnyHashable, AnyHashable, AnyHashable)\n    let type_1 = type(of: test_tuple.0)\n    let type_2 = type(of: test_tuple.1)\n    let type_3 = type(of: test_tuple.2)\n    let type_4 = type(of: test_tuple.3)\n    if type_1 == type_2 && type_2 == type_3 && type_3 == type_4 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpgyv1g00r.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgyv1g00r.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgyv1g00r.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    let tuple_type_str_arr = tuple_type_str.split(separator: \",\")\n    let tuple_type_str_arr_count = tuple_type_str_arr.count\n    var type_count = 0\n    for i in 0..<tuple_type_str_arr_count {\n        if tuple_type_str_arr[i] == tuple_type_str_arr[0] {\n            type_count += 1\n        }\n    }\n    if type_count == tuple_type_str_arr_count {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp6rb4d_qj.swift:35:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6rb4d_qj.swift:36:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6rb4d_qj.swift:37:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type_set = Set(test_tuple.map { type(of: $0) })\n    return type_set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmphonj9os5.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphonj9os5.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphonj9os5.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphonj9os5.swift:4:35: error: value of type 'AnyHashable' has no member 'map'\n    let type_set = Set(test_tuple.map { type(of: $0) })\n                       ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_element = test_tuple.first\n    let first_type = type(of: first_element)\n    for element in test_tuple {\n        if type(of: element) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpkhqowkpk.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpkhqowkpk.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpkhqowkpk.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpkhqowkpk.swift:4:36: error: value of type 'AnyHashable' has no member 'first'\n    let first_element = test_tuple.first\n                        ~~~~~~~~~~ ^~~~~\n/tmp/tmpkhqowkpk.swift:6:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpbnfkr7k4.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbnfkr7k4.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbnfkr7k4.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbnfkr7k4.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    return type_array.allSatisfy { $0 == type_array[0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpoyt9wmjc.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpoyt9wmjc.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var temp = test_tuple[0]\n    for i in test_tuple {\n        if type(of: temp) != type(of: i) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpx36eclec.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx36eclec.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx36eclec.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx36eclec.swift:5:26: error: value of type 'AnyHashable' has no subscripts\n    var temp = test_tuple[0]\n               ~~~~~~~~~~^\n/tmp/tmpx36eclec.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple = test_tuple as! (Any, Any, Any)\n    let type_1 = type(of: test_tuple.0)\n    let type_2 = type(of: test_tuple.1)\n    let type_3 = type(of: test_tuple.2)\n    if type_1 == type_2 && type_2 == type_3 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmprqflt7eb.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprqflt7eb.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprqflt7eb.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var check = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            check = false\n        }\n    }\n    return check\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpcv2yerc1.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcv2yerc1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcv2yerc1.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcv2yerc1.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpimuibpwp.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpimuibpwp.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpimuibpwp.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpimuibpwp.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = Mirror(reflecting: test_tuple).subjectType\n    print(type)\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpdvcxyyhh.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdvcxyyhh.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdvcxyyhh.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdvcxyyhh.swift:4:9: warning: variable 'flag' was never mutated; consider changing to 'let' constant\n    var flag = true\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    var type_check = true\n    for i in 0..<test_tuple_array.count {\n        if type(of: test_tuple_array[i]) != type(of: test_tuple_array[0]) {\n            type_check = false\n            break\n        }\n    }\n    return type_check\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpbpf68yt1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp9r2svp69.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmp9r2svp69.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    if type == Int.self {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpn6z8twvi.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn6z8twvi.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn6z8twvi.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_type = type(of: test_tuple)\n    let test_tuple_type_str = String(describing: test_tuple_type)\n    let test_tuple_type_str_arr = test_tuple_type_str.split(separator: \",\")\n    let test_tuple_type_str_arr_count = test_tuple_type_str_arr.count\n    var i = 0\n    var flag = true\n    while i < test_tuple_type_str_arr_count {\n        if test_tuple_type_str_arr[i] != test_tuple_type_str_arr[0] {\n            flag = false\n            break\n        }\n        i += 1\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpwgd9d5jt.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwgd9d5jt.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwgd9d5jt.swift:35:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    let type_set = Set(type_array)\n    return type_set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpjlnucz9p.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjlnucz9p.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjlnucz9p.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjlnucz9p.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for element in test_tuple {\n        if type(of: element) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp8fz7um6z.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8fz7um6z.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8fz7um6z.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8fz7um6z.swift:5:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let first_element = test_tuple_array[0]\n    for i in test_tuple_array {\n        if type(of: i) != type(of: first_element) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp67277tbw.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp67277tbw.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp67277tbw.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp67277tbw.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var check = true\n    var type = type(of: test_tuple[0])\n    for i in 0..<test_tuple.count {\n        if type != type(of: test_tuple[i]) {\n            check = false\n            break\n        }\n    }\n    return check\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpiykaesye.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiykaesye.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiykaesye.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiykaesye.swift:5:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpiykaesye.swift:6:29: error: value of type 'AnyHashable' has no member 'count'\n    for i in 0..<test_tuple.count {\n                 ~~~~~~~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    if tuple_type_str.contains(\"Tuple\") {\n        let tuple_str = String(describing: test_tuple)\n        let tuple_str_arr = tuple_str.split(separator: \",\")\n        let first_type = String(tuple_str_arr[0].split(separator: \":\")[1])\n        for i in 1..<tuple_str_arr.count {\n            let type = String(tuple_str_arr[i].split(separator: \":\")[1])\n            if type != first_type {\n                return false\n            }\n        }\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmponqibexr.swift:35:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmponqibexr.swift:36:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmponqibexr.swift:37:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = Mirror(reflecting: test_tuple).subjectType\n    for i in test_tuple {\n        if type != Mirror(reflecting: i).subjectType {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpj4djm9qh.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj4djm9qh.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj4djm9qh.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj4djm9qh.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpyg0t9xxj.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpyg0t9xxj.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type != type(of: i) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpthzlmo5h.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthzlmo5h.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthzlmo5h.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpthzlmo5h.swift:5:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpthzlmo5h.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple = test_tuple as! (AnyHashable, AnyHashable, AnyHashable, AnyHashable, AnyHashable)\n    let type_1 = type(of: test_tuple.0)\n    let type_2 = type(of: test_tuple.1)\n    let type_3 = type(of: test_tuple.2)\n    let type_4 = type(of: test_tuple.3)\n    let type_5 = type(of: test_tuple.4)\n    if type_1 == type_2 && type_2 == type_3 && type_3 == type_4 && type_4 == type_5 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpishwdyaj.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpishwdyaj.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpishwdyaj.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpyg0t9xxj.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpyg0t9xxj.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple = test_tuple as! (AnyHashable, AnyHashable, AnyHashable, AnyHashable, AnyHashable)\n    if type(of: test_tuple.0) == type(of: test_tuple.1) && type(of: test_tuple.1) == type(of: test_tuple.2) && type(of: test_tuple.2) == type(of: test_tuple.3) && type(of: test_tuple.3) == type(of: test_tuple.4) {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpsv2ravjo.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsv2ravjo.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsv2ravjo.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type_list = test_tuple.map { type(of: $0) }\n    let set = Set(type_list)\n    if set.count == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpi27tlsaw.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpi27tlsaw.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpi27tlsaw.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpi27tlsaw.swift:4:32: error: value of type 'AnyHashable' has no member 'map'\n    let type_list = test_tuple.map { type(of: $0) }\n                    ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    var type_check = true\n    for i in 0..<test_tuple_array.count {\n        if type(of: test_tuple_array[i]) != type(of: test_tuple_array[0]) {\n            type_check = false\n            break\n        }\n    }\n    return type_check\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpbpf68yt1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple = test_tuple as! (AnyHashable, AnyHashable, AnyHashable, AnyHashable, AnyHashable)\n    let type1 = type(of: test_tuple.0)\n    let type2 = type(of: test_tuple.1)\n    let type3 = type(of: test_tuple.2)\n    let type4 = type(of: test_tuple.3)\n    let type5 = type(of: test_tuple.4)\n    if type1 == type2 && type2 == type3 && type3 == type4 && type4 == type5 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp3nm3n0yg.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3nm3n0yg.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3nm3n0yg.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    return Set(type_array).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp6uxzxy2o.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6uxzxy2o.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6uxzxy2o.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6uxzxy2o.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_element = test_tuple.first\n    for element in test_tuple {\n        if type(of: first_element) != type(of: element) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpadheepp6.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpadheepp6.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpadheepp6.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpadheepp6.swift:4:36: error: value of type 'AnyHashable' has no member 'first'\n    let first_element = test_tuple.first\n                        ~~~~~~~~~~ ^~~~~\n/tmp/tmpadheepp6.swift:5:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var type = type(of: test_tuple[0])\n    for i in 0..<test_tuple.count {\n        if type(of: test_tuple[i]) != type {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpru3xjbou.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpru3xjbou.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpru3xjbou.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpru3xjbou.swift:5:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpru3xjbou.swift:6:29: error: value of type 'AnyHashable' has no member 'count'\n    for i in 0..<test_tuple.count {\n                 ~~~~~~~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_value = test_tuple\n    let tuple_value_type = type(of: tuple_value)\n    if tuple_type == tuple_value_type {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmphb56q8ea.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphb56q8ea.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmphb56q8ea.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type_list = test_tuple.map{type(of: $0)}\n    let set = Set(type_list)\n    if set.count == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpzzyuw4sp.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzzyuw4sp.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzzyuw4sp.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzzyuw4sp.swift:4:32: error: value of type 'AnyHashable' has no member 'map'\n    let type_list = test_tuple.map{type(of: $0)}\n                    ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpb1b_23wn.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpyg0t9xxj.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpyg0t9xxj.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_type = type(of: test_tuple)\n    let test_tuple_type_string = String(describing: test_tuple_type)\n    let test_tuple_type_string_array = test_tuple_type_string.split(separator: \",\")\n    let test_tuple_type_string_array_count = test_tuple_type_string_array.count\n    let test_tuple_type_string_array_first_element = test_tuple_type_string_array[0]\n    let test_tuple_type_string_array_first_element_count = test_tuple_type_string_array_first_element.count\n    let test_tuple_type_string_array_first_element_count_minus_1 = test_tuple_type_string_array_first_element_count - 1\n    let test_tuple_type_string_array_first_element_count_minus_1_index = test_tuple_type_string_array_first_element.index(test_tuple_type_string_array_first_element.startIndex, offsetBy: test_tuple_type_string_array_first_element_count_minus_1)\n    let test_tuple_type_string_array_first_element_count_minus_1_index_string = String(test_tuple_type_string_array_first_element[test_tuple_type_string_array_first_element_count_minus_1_index])\n    let test_tuple_type_string_array_first_element_count_minus_1_index_string_int = Int(test_tuple_type_string_array_first_element_count_minus_1_index_string)\n    let test_tuple_type_string_array_first_element_count_minus_1_index_string_int_minus_1 = test_tuple_type_string_array_first_element_count_minus_1_index_string_int! - 1\n    let test_tuple_type_string_array_first_element_count_minus_1_index_string_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpk_2c_kq2.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk_2c_kq2.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk_2c_kq2.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpk_2c_kq2.swift:15:9: error: type annotation missing in pattern\n    let test_tuple_type_string_array_first_element_count_minus_1_index_string_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple = test_tuple as! (AnyHashable, AnyHashable, AnyHashable, AnyHashable, AnyHashable)\n    let type_1 = type(of: test_tuple.0)\n    let type_2 = type(of: test_tuple.1)\n    let type_3 = type(of: test_tuple.2)\n    let type_4 = type(of: test_tuple.3)\n    let type_5 = type(of: test_tuple.4)\n    if type_1 == type_2 && type_2 == type_3 && type_3 == type_4 && type_4 == type_5 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpnpmp0vst.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnpmp0vst.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnpmp0vst.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let first_element = test_tuple_array[0]\n    for i in test_tuple_array {\n        if type(of: i) != type(of: first_element) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp67277tbw.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp67277tbw.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp67277tbw.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp67277tbw.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_list = test_tuple as! [Any]\n    let type = type(of: tuple_list[0])\n    for i in tuple_list {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpjqj4e1ki.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjqj4e1ki.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjqj4e1ki.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjqj4e1ki.swift:7:20: error: type 'Any' has no member 'init'\n        if type != type(of: i) {\n                   ^~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp6_er8c1r.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6_er8c1r.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6_er8c1r.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6_er8c1r.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    let type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmp6_er8c1r.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpyg0t9xxj.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpyg0t9xxj.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpyg0t9xxj.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    var type_of_first_element = type(of: test_tuple_array[0])\n    for i in test_tuple_array {\n        if type(of: i) != type_of_first_element {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp6907vy64.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6907vy64.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6907vy64.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp6907vy64.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp_lqi7c12.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_lqi7c12.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_lqi7c12.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_lqi7c12.swift:5:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_lqi7c12.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpb1b_23wn.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpb1b_23wn.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    let set_type_array = Set(type_array)\n    if set_type_array.count == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpfqmqjq2l.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfqmqjq2l.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfqmqjq2l.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfqmqjq2l.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let set = Set(test_tuple.map { type(of: $0) })\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp2iu__osc.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:4:30: error: value of type 'AnyHashable' has no member 'map'\n    let set = Set(test_tuple.map { type(of: $0) })\n                  ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var temp: AnyHashable = test_tuple\n    var flag: Bool = true\n    for i in test_tuple {\n        if type(of: i) != type(of: temp) {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp9hgvz78g.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9hgvz78g.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9hgvz78g.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9hgvz78g.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp9r2svp69.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmp9r2svp69.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type: AnyHashable.Type?\n    for i in test_tuple {\n        if type == nil {\n            type = type(of: i)\n        } else if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpbbovma8_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbbovma8_.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbbovma8_.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbbovma8_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_count = test_tuple.count\n    var flag = true\n    for i in 0..<tuple_count {\n        if type(of: test_tuple[i]) != tuple_type {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp5pp6djz8.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5pp6djz8.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5pp6djz8.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5pp6djz8.swift:5:34: error: value of type 'AnyHashable' has no member 'count'\n    let tuple_count = test_tuple.count\n                      ~~~~~~~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    let tuple_type_str_arr = tuple_type_str.components(separatedBy: \",\")\n    if tuple_type_str_arr.count == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpbw2xgtyr.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbw2xgtyr.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbw2xgtyr.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbw2xgtyr.swift:6:45: error: value of type 'String' has no member 'components'\n    let tuple_type_str_arr = tuple_type_str.components(separatedBy: \",\")\n                             ~~~~~~~~~~~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_string = String(describing: tuple_type)\n    let tuple_type_string_array = tuple_type_string.components(separatedBy: \",\")\n    let tuple_type_string_array_count = tuple_type_string_array.count\n    let tuple_type_string_array_last_element = tuple_type_string_array[tuple_type_string_array_count - 1]\n    let tuple_type_string_array_last_element_array = tuple_type_string_array_last_element.components(separatedBy: \")\")\n    let tuple_type_string_array_last_element_array_first_element = tuple_type_string_array_last_element_array[0]\n    let tuple_type_string_array_last_element_array_first_element_array = tuple_type_string_array_last_element_array_first_element.components(separatedBy: \".\")\n    let tuple_type_string_array_last_element_array_first_element_array_last_element = tuple_type_string_array_last_element_array_first_element_array[tuple_type_string_array_last_element_array_first_element_array.count - 1]\n    let tuple_type_string_array_last_element_array_first_element_array_last_element_array = tuple_type_string_array_last_element_array_first_element_array_last_element.components(separatedBy: \" \")\n    let tuple_type_string_array_last_element_array_first_element_array_last_element_array_first_element = tuple_type_string_array_last_element_array_first_element_array_last_element_array[0]\n    let tuple_type_string_array_last_element_array_first_element_array_last_element_array_first_element_array = tuple_type_string_array_last_element_array_first_element_array_last_element_array_first_element.components(separatedBy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp5ryiyt9z.swift:16:1: error: expected ')' in expression list\n}\n^\n/tmp/tmp5ryiyt9z.swift:15:219: note: to match this opening '('\n    let tuple_type_string_array_last_element_array_first_element_array_last_element_array_first_element_array = tuple_type_string_array_last_element_array_first_element_array_last_element_array_first_element.components(separatedBy\n                                                                                                                                                                                                                          ^\n/tmp/tmp5ryiyt9z.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5ryiyt9z.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5ryiyt9z.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5ryiyt9z.swift:6:53: error: value of type 'String' has no member 'components'\n    let tuple_type_string_array = tuple_type_string.components(separatedBy: \",\")\n                                  ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp5ryiyt9z.swift:15:220: error: cannot find 'separatedBy' in scope\n    let tuple_type_string_array_last_element_array_first_element_array_last_element_array_first_element_array = tuple_type_string_array_last_element_array_first_element_array_last_element_array_first_element.components(separatedBy\n                                                                                                                                                                                                                           ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type: Any.Type? = nil\n    for element in test_tuple {\n        if type == nil {\n            type = type(of: element)\n        } else if type != type(of: element) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp1n75l7fh.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1n75l7fh.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1n75l7fh.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1n75l7fh.swift:5:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_type = type(of: test_tuple)\n    let test_tuple_type_str = String(describing: test_tuple_type)\n    let test_tuple_type_str_arr = test_tuple_type_str.split(separator: \",\")\n    let test_tuple_type_str_arr_count = test_tuple_type_str_arr.count\n    let test_tuple_type_str_arr_first = test_tuple_type_str_arr[0]\n    var check_type_bool = true\n    for i in 1..<test_tuple_type_str_arr_count {\n        if test_tuple_type_str_arr_first != test_tuple_type_str_arr[i] {\n            check_type_bool = false\n        }\n    }\n    return check_type_bool\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp9pd0ko8l.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9pd0ko8l.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9pd0ko8l.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let set = Set(test_tuple.map { type(of: $0) })\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp2iu__osc.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:4:30: error: value of type 'AnyHashable' has no member 'map'\n    let set = Set(test_tuple.map { type(of: $0) })\n                  ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp9r2svp69.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmp9r2svp69.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    print(type)\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpg77gioye.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg77gioye.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpg77gioye.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_type = type(of: test_tuple)\n    print(test_tuple_type)\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpqasi14ay.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqasi14ay.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqasi14ay.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    let tuple_type_str_arr = tuple_type_str.split(separator: \",\")\n    let tuple_type_str_arr_count = tuple_type_str_arr.count\n    var type_count = 0\n    for i in 0..<tuple_type_str_arr_count {\n        if tuple_type_str_arr[i].contains(\"Int\") {\n            type_count += 1\n        }\n        if tuple_type_str_arr[i].contains(\"String\") {\n            type_count += 1\n        }\n        if tuple_type_str_arr[i].contains(\"Double\") {\n            type_count += 1\n        }\n        if tuple_type_str_arr[i].contains(\"Float\") {\n            type_count += 1\n        }\n    }\n    if type_count == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpw39qx8j_.swift:43:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw39qx8j_.swift:44:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpw39qx8j_.swift:45:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_element = test_tuple[0]\n    for element in test_tuple {\n        if type(of: element) != type(of: first_element) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmplyrpooj4.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplyrpooj4.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplyrpooj4.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplyrpooj4.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    let first_element = test_tuple[0]\n                        ~~~~~~~~~~^\n/tmp/tmplyrpooj4.swift:5:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let set = Set(test_tuple.map { type(of: $0) })\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp2iu__osc.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp2iu__osc.swift:4:30: error: value of type 'AnyHashable' has no member 'map'\n    let set = Set(test_tuple.map { type(of: $0) })\n                  ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type_tuple = test_tuple.map { type(of: $0) }\n    let set_type = Set(type_tuple)\n    if set_type.count == 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmprq3f4kq0.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprq3f4kq0.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprq3f4kq0.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprq3f4kq0.swift:4:33: error: value of type 'AnyHashable' has no member 'map'\n    let type_tuple = test_tuple.map { type(of: $0) }\n                     ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple = test_tuple as! (Any, Any, Any)\n    let type_1 = type(of: tuple.0)\n    let type_2 = type(of: tuple.1)\n    let type_3 = type(of: tuple.2)\n    if type_1 == type_2 && type_2 == type_3 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp3cprakor.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3cprakor.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp3cprakor.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var data_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != data_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp83su05kd.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp83su05kd.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp83su05kd.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp83su05kd.swift:4:40: error: value of type 'AnyHashable' has no subscripts\n    var data_type = type(of: test_tuple[0])\n                             ~~~~~~~~~~^\n/tmp/tmp83su05kd.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple = test_tuple as! (AnyHashable, AnyHashable, AnyHashable)\n    let type1 = type(of: test_tuple.0)\n    let type2 = type(of: test_tuple.1)\n    let type3 = type(of: test_tuple.2)\n    if type1 == type2 && type2 == type3 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpt2rz6yu2.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt2rz6yu2.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpt2rz6yu2.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let set = Set(test_tuple.map{type(of: $0)})\n    return set.count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmprmprqjdf.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprmprqjdf.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprmprqjdf.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprmprqjdf.swift:4:30: error: value of type 'AnyHashable' has no member 'map'\n    let set = Set(test_tuple.map{type(of: $0)})\n                  ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type_list = test_tuple.map { type(of: $0) }\n    return Set(type_list).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp60iuwvrm.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:4:32: error: value of type 'AnyHashable' has no member 'map'\n    let type_list = test_tuple.map { type(of: $0) }\n                    ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type_list = test_tuple.map { type(of: $0) }\n    return type_list.allSatisfy { $0 == type_list.first }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpxneyi8gg.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxneyi8gg.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxneyi8gg.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxneyi8gg.swift:4:32: error: value of type 'AnyHashable' has no member 'map'\n    let type_list = test_tuple.map { type(of: $0) }\n                    ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type_list = test_tuple.map { type(of: $0) }\n    return Set(type_list).count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp60iuwvrm.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp60iuwvrm.swift:4:32: error: value of type 'AnyHashable' has no member 'map'\n    let type_list = test_tuple.map { type(of: $0) }\n                    ~~~~~~~~~~ ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_element = test_tuple.first\n    let first_type = type(of: first_element)\n    for element in test_tuple {\n        if type(of: element) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpkhqowkpk.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpkhqowkpk.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpkhqowkpk.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpkhqowkpk.swift:4:36: error: value of type 'AnyHashable' has no member 'first'\n    let first_element = test_tuple.first\n                        ~~~~~~~~~~ ^~~~~\n/tmp/tmpkhqowkpk.swift:6:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = Mirror(reflecting: test_tuple).children.first?.value\n    for i in Mirror(reflecting: test_tuple).children {\n        if type != i.value {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpmnvdut0u.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmnvdut0u.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmnvdut0u.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmnvdut0u.swift:6:17: error: type 'Any' cannot conform to 'Equatable'\n        if type != i.value {\n                ^\n/tmp/tmpmnvdut0u.swift:6:17: note: only concrete types such as structs, enums and classes can conform to protocols\n        if type != i.value {\n                ^\n/tmp/tmpmnvdut0u.swift:6:17: note: requirement from conditional conformance of 'Any?' to 'Equatable'\n        if type != i.value {\n                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = Mirror(reflecting: test_tuple).subjectType\n    var count = 0\n    for i in test_tuple {\n        if type == Mirror(reflecting: i).subjectType {\n            count += 1\n        }\n    }\n    if count == test_tuple.count {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpc4f0b16v.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc4f0b16v.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc4f0b16v.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc4f0b16v.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n/tmp/tmpc4f0b16v.swift:11:28: error: value of type 'AnyHashable' has no member 'count'\n    if count == test_tuple.count {\n                ~~~~~~~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_type = type(of: test_tuple)\n    print(test_tuple_type)\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpqasi14ay.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqasi14ay.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpqasi14ay.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmph69_m082.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph69_m082.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph69_m082.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph69_m082.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    for element in test_tuple {\n        if type(of: element) != tuple_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmph82y_f1k.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph82y_f1k.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph82y_f1k.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph82y_f1k.swift:5:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_type = type(of: test_tuple)\n    let test_tuple_type_string = String(describing: test_tuple_type)\n    let test_tuple_type_string_array = test_tuple_type_string.components(separatedBy: \",\")\n    let test_tuple_type_string_array_count = test_tuple_type_string_array.count\n    var count = 0\n    for i in 0..<test_tuple_type_string_array_count {\n        if test_tuple_type_string_array[0] == test_tuple_type_string_array[i] {\n            count += 1\n        }\n    }\n    if count == test_tuple_type_string_array_count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpj_u0fobe.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj_u0fobe.swift:35:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj_u0fobe.swift:36:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpj_u0fobe.swift:6:63: error: value of type 'String' has no member 'components'\n    let test_tuple_type_string_array = test_tuple_type_string.components(separatedBy: \",\")\n                                       ~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type != type(of: i) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp9r2svp69.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9r2svp69.swift:4:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmp9r2svp69.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    var type_check = true\n    for i in 0..<test_tuple_array.count {\n        if type(of: test_tuple_array[i]) != type(of: test_tuple_array[0]) {\n            type_check = false\n            break\n        }\n    }\n    return type_check\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpbpf68yt1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_value = test_tuple.value(forKey: \"0\")\n    for i in 1..<test_tuple.count {\n        if type(of: first_value!) != type(of: test_tuple.value(forKey: \"\\(i)\")) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpn7mtlrsx.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn7mtlrsx.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn7mtlrsx.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpn7mtlrsx.swift:4:34: error: value of type 'AnyHashable' has no member 'value'\n    let first_value = test_tuple.value(forKey: \"0\")\n                      ~~~~~~~~~~ ^~~~~\n/tmp/tmpn7mtlrsx.swift:5:29: error: value of type 'AnyHashable' has no member 'count'\n    for i in 1..<test_tuple.count {\n                 ~~~~~~~~~~ ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    let tuple_type_str_array = tuple_type_str.split(separator: \",\")\n    let tuple_type_str_array_count = tuple_type_str_array.count\n    var type_count = 0\n    for i in 0..<tuple_type_str_array_count {\n        if tuple_type_str_array[i] == tuple_type_str_array[0] {\n            type_count += 1\n        }\n    }\n    if type_count == tuple_type_str_array_count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp7l2x7oq7.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7l2x7oq7.swift:35:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7l2x7oq7.swift:36:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    switch tuple_type {\n    case is Int.Type:\n        return true\n    case is String.Type:\n        return true\n    case is Double.Type:\n        return true\n    default:\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp4y7aggpv.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4y7aggpv.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4y7aggpv.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    var type_check = true\n    for i in 0..<test_tuple_array.count {\n        if type(of: test_tuple_array[i]) != type(of: test_tuple_array[0]) {\n            type_check = false\n            break\n        }\n    }\n    return type_check\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpbpf68yt1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbpf68yt1.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_type = type(of: test_tuple)\n    let test_tuple_type_string = String(describing: test_tuple_type)\n    let test_tuple_type_string_array = test_tuple_type_string.components(separatedBy: \",\")\n    var test_tuple_type_string_array_count = test_tuple_type_string_array.count\n    test_tuple_type_string_array_count -= 1\n    for i in 0...test_tuple_type_string_array_count {\n        if test_tuple_type_string_array[i] != test_tuple_type_string_array[0] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp5uk2ao_h.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5uk2ao_h.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5uk2ao_h.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5uk2ao_h.swift:6:63: error: value of type 'String' has no member 'components'\n    let test_tuple_type_string_array = test_tuple_type_string.components(separatedBy: \",\")\n                                       ~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != tuple_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp1q80knr1.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1q80knr1.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1q80knr1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1q80knr1.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_string = String(describing: tuple_type)\n    if tuple_type_string.contains(\"(\") {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpokmgdan4.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpokmgdan4.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpokmgdan4.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_count = test_tuple.count\n    var count = 0\n    for i in test_tuple {\n        if type(of: i) == tuple_type {\n            count += 1\n        }\n    }\n    if count == tuple_count {\n        return true\n    }\n    else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpsxpgxxda.swift:33:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsxpgxxda.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsxpgxxda.swift:35:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsxpgxxda.swift:5:34: error: value of type 'AnyHashable' has no member 'count'\n    let tuple_count = test_tuple.count\n                      ~~~~~~~~~~ ^~~~~\n/tmp/tmpsxpgxxda.swift:7:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type_of_first_element = type(of: test_tuple.first!)\n    for element in test_tuple {\n        if type(of: element) != type_of_first_element {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpe6f4hjlg.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe6f4hjlg.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe6f4hjlg.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe6f4hjlg.swift:4:53: error: value of type 'AnyHashable' has no member 'first'\n    let type_of_first_element = type(of: test_tuple.first!)\n                                         ~~~~~~~~~~ ^~~~~\n/tmp/tmpe6f4hjlg.swift:5:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for element in test_tuple {\n        if type(of: element) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp8fz7um6z.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8fz7um6z.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8fz7um6z.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8fz7um6z.swift:5:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_string = String(describing: tuple_type)\n    let tuple_type_array = tuple_type_string.components(separatedBy: \",\")\n    let tuple_type_array_count = tuple_type_array.count\n    var count = 0\n    for i in 0..<tuple_type_array_count {\n        if tuple_type_array[i] == tuple_type_array[0] {\n            count += 1\n        }\n    }\n    if count == tuple_type_array_count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpbcm_3ti2.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbcm_3ti2.swift:35:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbcm_3ti2.swift:36:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbcm_3ti2.swift:6:46: error: value of type 'String' has no member 'components'\n    let tuple_type_array = tuple_type_string.components(separatedBy: \",\")\n                           ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple.first!)\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmppp7kdag1.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp7kdag1.swift:4:42: error: value of type 'AnyHashable' has no member 'first'\n    let first_type = type(of: test_tuple.first!)\n                              ~~~~~~~~~~ ^~~~~\n/tmp/tmppp7kdag1.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpx5eztblk.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx5eztblk.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx5eztblk.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx5eztblk.swift:5:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpx5eztblk.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let first_element = test_tuple_array[0]\n    for i in test_tuple_array {\n        if type(of: i) != type(of: first_element) {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp67277tbw.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp67277tbw.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp67277tbw.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp67277tbw.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_string = String(describing: tuple_type)\n    let tuple_type_array = tuple_type_string.components(separatedBy: \",\")\n    let tuple_type_array_count = tuple_type_array.count\n    var tuple_type_array_count_temp = tuple_type_array_count\n    var tuple_type_array_temp = tuple_type_array\n    var tuple_type_array_temp_count = tuple_type_array_count\n    var tuple_type_array_temp_count_temp = tuple_type_array_count\n    var tuple_type_array_temp_temp = tuple_type_array\n    var tuple_type_array_temp_temp_count = tuple_type_array_count\n    var tuple_type_array_temp_temp_count_temp = tuple_type_array_count\n    var tuple_type_array_temp_temp_temp = tuple_type_array\n    var tuple_type_array_temp_temp_temp_count = tuple_type_array_count\n    var tuple_type_array_temp_temp_temp_count_temp = tuple_type_array_count\n    var tuple_type_array_temp_temp_temp_temp = tuple_type_array\n    var tuple_type_array_temp_temp_temp_temp_count = tuple_type_array_count\n    var tuple_type_array_temp_temp_temp_temp_count_temp = tuple_type_array_count\n    var tuple_type_array_temp_temp_temp_temp_temp = tuple_type_array\n    var tuple_type_array_temp_temp_temp_temp_temp_count = tuple_type_array_count\n    var tuple_type_array_temp_temp_temp_temp_temp_count_temp = tuple_type_array_count\n    var tuple_type_array_temp_temp_temp_temp_temp_temp = tuple_type_array\n    var tuple_type_array_temp_temp_temp_temp_temp_temp_count = tuple_type_array_count\n    var tuple_type_array_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpiwmbpopn.swift:42:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiwmbpopn.swift:43:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiwmbpopn.swift:44:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpiwmbpopn.swift:6:46: error: value of type 'String' has no member 'components'\n    let tuple_type_array = tuple_type_string.components(separatedBy: \",\")\n                           ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpiwmbpopn.swift:26:9: error: type annotation missing in pattern\n    var tuple_type_array_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type = Mirror(reflecting: test_tuple).children.first?.value\n    for i in Mirror(reflecting: test_tuple).children {\n        if type != i.value {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpmnvdut0u.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmnvdut0u.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmnvdut0u.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpmnvdut0u.swift:6:17: error: type 'Any' cannot conform to 'Equatable'\n        if type != i.value {\n                ^\n/tmp/tmpmnvdut0u.swift:6:17: note: only concrete types such as structs, enums and classes can conform to protocols\n        if type != i.value {\n                ^\n/tmp/tmpmnvdut0u.swift:6:17: note: requirement from conditional conformance of 'Any?' to 'Equatable'\n        if type != i.value {\n                ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    let tuple_type_str_arr = tuple_type_str.split(separator: \",\")\n    let tuple_type_str_arr_count = tuple_type_str_arr.count\n    let tuple_type_str_arr_first = tuple_type_str_arr[0]\n    for i in 1..<tuple_type_str_arr_count {\n        if tuple_type_str_arr_first != tuple_type_str_arr[i] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpv1uluepo.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv1uluepo.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpv1uluepo.swift:32:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type_array = test_tuple_array.map { type(of: $0) }\n    let type_set = Set(type_array)\n    if type_set.count == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp_bfjved7.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_bfjved7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_bfjved7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_bfjved7.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmp_6sjf4am.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_6sjf4am.swift:4:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmp_6sjf4am.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_str = String(describing: tuple_type)\n    let tuple_type_str_arr = tuple_type_str.split(separator: \",\")\n    let tuple_type_str_arr_count = tuple_type_str_arr.count\n    for i in 0..<tuple_type_str_arr_count {\n        if tuple_type_str_arr[i] != tuple_type_str_arr[0] {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpswd2jhr2.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpswd2jhr2.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpswd2jhr2.swift:31:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpznw9owo_.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpznw9owo_.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let type = type(of: test_tuple)\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpdynpv5m7.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdynpv5m7.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple.value)\n    for element in test_tuple {\n        if type(of: element.value) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpjfl3p8rl.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjfl3p8rl.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjfl3p8rl.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjfl3p8rl.swift:4:42: error: value of type 'AnyHashable' has no member 'value'\n    let first_type = type(of: test_tuple.value)\n                              ~~~~~~~~~~ ^~~~~\n/tmp/tmpjfl3p8rl.swift:5:20: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for element in test_tuple {\n                   ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let first_type = type(of: test_tuple.value)\n    for i in test_tuple {\n        if type(of: i.value) != first_type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmprsg4fpqo.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprsg4fpqo.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprsg4fpqo.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmprsg4fpqo.swift:4:42: error: value of type 'AnyHashable' has no member 'value'\n    let first_type = type(of: test_tuple.value)\n                              ~~~~~~~~~~ ^~~~~\n/tmp/tmprsg4fpqo.swift:5:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_string = String(describing: tuple_type)\n    let tuple_type_array = tuple_type_string.split(separator: \",\")\n    let tuple_type_array_count = tuple_type_array.count\n    var count = 0\n    for i in 0..<tuple_type_array_count {\n        if tuple_type_array[i] == tuple_type_array[0] {\n            count += 1\n        }\n    }\n    if count == tuple_type_array_count {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp9fa4kq00.swift:34:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9fa4kq00.swift:35:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9fa4kq00.swift:36:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let type = type(of: test_tuple)\n    return type == test_tuple\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1665510547,
      "stdout": "",
      "stderr": "/tmp/tmpvde3t4lw.swift:21:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:22:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:23:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpvde3t4lw.swift:5:12: error: cannot convert value of type 'AnyHashable.Type' to expected argument type 'AnyHashable'\n    return type == test_tuple\n           ^\n                as! AnyHashable\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple_array = Array(test_tuple)\n    let type = type(of: test_tuple_array[0])\n    for i in test_tuple_array {\n        if type(of: i) != type {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp56kj5mt3.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp56kj5mt3.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp56kj5mt3.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp56kj5mt3.swift:4:34: error: missing argument label 'arrayLiteral:' in call\n    let test_tuple_array = Array(test_tuple)\n                                 ^\n                                 arrayLiteral: \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    let first_type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != first_type {\n            flag = false\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpooto9ypl.swift:27:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpooto9ypl.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpooto9ypl.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpooto9ypl.swift:5:41: error: value of type 'AnyHashable' has no subscripts\n    let first_type = type(of: test_tuple[0])\n                              ~~~~~~~~~~^\n/tmp/tmpooto9ypl.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var flag = true\n    var type = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpx5eztblk.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx5eztblk.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx5eztblk.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpx5eztblk.swift:5:35: error: value of type 'AnyHashable' has no subscripts\n    var type = type(of: test_tuple[0])\n                        ~~~~~~~~~~^\n/tmp/tmpx5eztblk.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let test_tuple = test_tuple as! (AnyHashable, AnyHashable, AnyHashable, AnyHashable)\n    let type_1 = type(of: test_tuple.0)\n    let type_2 = type(of: test_tuple.1)\n    let type_3 = type(of: test_tuple.2)\n    let type_4 = type(of: test_tuple.3)\n    if type_1 == type_2 && type_2 == type_3 && type_3 == type_4 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp8nu_ioso.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8nu_ioso.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8nu_ioso.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    let tuple_type_string = String(describing: tuple_type)\n    let tuple_type_string_array = tuple_type_string.split(separator: \",\")\n    let tuple_type_string_array_count = tuple_type_string_array.count\n    var tuple_type_string_array_index = 0\n    var tuple_type_string_array_index_next = 1\n    var tuple_type_string_array_index_next_next = 2\n    var tuple_type_string_array_index_next_next_next = 3\n    var tuple_type_string_array_index_next_next_next_next = 4\n    var tuple_type_string_array_index_next_next_next_next_next = 5\n    var tuple_type_string_array_index_next_next_next_next_next_next = 6\n    var tuple_type_string_array_index_next_next_next_next_next_next_next = 7\n    var tuple_type_string_array_index_next_next_next_next_next_next_next_next = 8\n    var tuple_type_string_array_index_next_next_next_next_next_next_next_next_next = 9\n    var tuple_type_string_array_index_next_next_next_next_next_next_next_next_next_next = 10\n    var tuple_type_string_array_index_next_next_next_next_next_next_next_next_next_next_next = 11\n    var tuple_type_string_array_index_next_next_next_next_next_next_next_next_next_next_next_next = 12\n    var tuple_type_string_array_index_next_next_next_next_next_next_next_next_next_next_next_next_next = 13\n    var tuple_type_string_array_index_next_next_next_next_next_next_next_next_next_next_next_next_next_next = 14\n    var tuple_type_string_array_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpp_tb_lwu.swift:39:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpp_tb_lwu.swift:40:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpp_tb_lwu.swift:41:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpp_tb_lwu.swift:23:9: error: type annotation missing in pattern\n    var tuple_type_string_array_\n        ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    var type_check = true\n    var type_check_temp = type(of: test_tuple[0])\n    for i in test_tuple {\n        if type(of: i) != type_check_temp {\n            type_check = false\n            break\n        }\n    }\n    return type_check\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpnki_xu5a.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnki_xu5a.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnki_xu5a.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpnki_xu5a.swift:5:46: error: value of type 'AnyHashable' has no subscripts\n    var type_check_temp = type(of: test_tuple[0])\n                                   ~~~~~~~~~~^\n/tmp/tmpnki_xu5a.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple_type = type(of: test_tuple)\n    var result = true\n    for i in test_tuple {\n        if type(of: i) != tuple_type {\n            result = false\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpuj80s9e_.swift:28:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpuj80s9e_.swift:29:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpuj80s9e_.swift:30:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpuj80s9e_.swift:6:14: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for i in test_tuple {\n             ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if all the elements in tuple have same data type or not.\nfunc check_type(test_tuple: AnyHashable) -> Bool {\n    let tuple = test_tuple as! (Any, Any, Any)\n    if type(of: tuple.0) == type(of: tuple.1) && type(of: tuple.0) == type(of: tuple.2) {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpe19soin7.swift:24:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (5, 6, 7, 3, 5, 6)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe19soin7.swift:25:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (1, 2, \"4\")) == false)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe19soin7.swift:26:1: error: type of expression is ambiguous without more context\nassert(check_type(test_tuple: (3, 2, 1, 4, 5)) == true)\n^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}