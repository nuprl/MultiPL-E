{
  "name": "mbpp_392_get_max_sum",
  "language": "swift",
  "prompt": "\n/// Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nfunc get_max_sum(n: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_sum(n: 60) == 106)\nassert(get_max_sum(n: 10) == 12)\nassert(get_max_sum(n: 2) == 2)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i)\n    }\n    return dp[n]",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    let divisors = [2, 3, 4, 5]\n    for divisor in divisors {\n        let sum = get_max_sum(n: n/divisor)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    if sum > n {\n        return sum\n    }\n    return n",
    "    if n <= 0 {\n        return 0\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i)\n    }\n    return dp[n]",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 1, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n-i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n == 0 {\n        return 0\n    }\n    var sum = n\n    let divisors = [2, 3, 4, 5]\n    for divisor in divisors {\n        if n % divisor == 0 {\n            sum = max(sum, get_max_sum(n: n / divisor))\n        }\n    }\n    return sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n < 2 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        if n % i == 0 {\n            sum += get_max_sum(n: n / i)\n        }\n    }\n    return max(sum, n)",
    "    if n <= 0 {\n        return 0\n    }\n    \n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    \n    return max(a+b+c+d, n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 2 {\n        return n\n    }\n    var sum = 0\n    var max_sum = 0\n    for i in 2...5 {\n        if n % i == 0 {\n            sum = get_max_sum(n: n/i)\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum + n",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    return max(a+b+c+d, n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = 0\n    for i in 2...5 {\n        max_sum = max(max_sum, get_max_sum(n: n / i))\n    }\n    return max_sum + n",
    "    if n < 2 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        if n % i == 0 {\n            max_sum = max(max_sum, get_max_sum(n: n/i))\n        }\n    }\n    return max_sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(i, dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5])\n    }\n    return dp[n]",
    "    if n == 0 {\n        return 0\n    }\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    let e = get_max_sum(n: n/6)\n    let f = get_max_sum(n: n/7)\n    let g = get_max_sum(n: n/8)\n    let h = get_max_sum(n: n/9)\n    let i = get_max_sum(n: n/10)\n    let j = get_max_sum(n: n/11)\n    let k = get_max_sum(n: n/12)\n    let l = get_max_sum(n: n/13)\n    let m = get_max_sum(n: n/14)\n    let o = get_max_sum(n: n/15)\n    let p = get_max_sum(n: n/16)\n    let q = get_max_sum(n: n/17)\n    let r = get_max_sum(n: n/18)\n    let s = get_max_sum(n: n/19)\n    let t = get_max_sum(n: n/20)\n    let u = get_max_sum(n: n/21)\n    let v = get_max_sum(n: n/22)\n    let w = get_max_sum(n: n/23)\n    let x = get_max_sum(n: n/24)\n    let y = get_max_sum(n: n/25)\n    let z = get_max_sum(n: n/26)\n    let aa = get_max_sum(n: n/27)\n    let ab = get_max_sum(n: n/28)\n    let ac = get_max_sum(n: n/29)\n    let ad = get_max_sum(n: n/30)\n    let a",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n-i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    let n_by_2 = n/2\n    let n_by_3 = n/3\n    let n_by_4 = n/4\n    let n_by_5 = n/5\n    let sum = get_max_sum(n: n_by_2) + get_max_sum(n: n_by_3) + get_max_sum(n: n_by_4) + get_max_sum(n: n_by_5)\n    if sum > max_sum {\n        max_sum = sum\n    }\n    return max_sum",
    "    if n < 2 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        if n % i == 0 {\n            max_sum = max(max_sum, get_max_sum(n: n / i))\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n-i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        if n % i == 0 {\n            max_sum = max(max_sum, get_max_sum(n: n/i) + get_max_sum(n: n/i))\n        }\n    }\n    return max_sum",
    "    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i)\n    }\n    return dp[n]",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    \n    var max_sum = n\n    let max_sum_1 = get_max_sum(n: n/2)\n    let max_sum_2 = get_max_sum(n: n/3)\n    let max_sum_3 = get_max_sum(n: n/4)\n    let max_sum_4 = get_max_sum(n: n/5)\n    \n    if max_sum_1 + max_sum_2 + max_sum_3 + max_sum_4 > max_sum {\n        max_sum = max_sum_1 + max_sum_2 + max_sum_3 + max_sum_4\n    }\n    \n    return max_sum",
    "    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i)\n    }\n    return dp[n]",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    var dp = [Int](repeating: 0, count: n+1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    dp[4] = 4\n    dp[5] = 5\n    for i in 6...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, through: n/5, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    var memo = [Int](repeating: 0, count: n + 1)\n    return get_max_sum(n: n, memo: &memo)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    sum = max(sum, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n    sum = max(sum, n)\n    return sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n < 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]",
    "    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    var dp = Array(repeating: 0, count: n+1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    \n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n < 2 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)",
    "    if n == 0 {\n        return 0\n    }\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    let e = a + b + c + d\n    return max(n, e)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum = max(sum, get_max_sum(n: n/i))\n    }\n    return sum + n",
    "    if n == 0 {\n        return 0\n    }\n    var sum = n\n    let temp = n / 2\n    if temp > 0 {\n        sum += get_max_sum(n: temp)\n    }\n    let temp2 = n / 3\n    if temp2 > 0 {\n        sum += get_max_sum(n: temp2)\n    }\n    let temp3 = n / 4\n    if temp3 > 0 {\n        sum += get_max_sum(n: temp3)\n    }\n    let temp4 = n / 5\n    if temp4 > 0 {\n        sum += get_max_sum(n: temp4)\n    }\n    return sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 1 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5], i)\n    }\n    return dp[n]",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    if sum > n {\n        return sum\n    }\n    return n",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n-i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n < 2 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(i, dp[i / 2] + dp[i / 3] + dp[i / 4] + dp[i / 5])\n    }\n    return dp[n]",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    \n    var sum = n\n    let divisors = [2, 3, 4, 5]\n    for divisor in divisors {\n        if n % divisor == 0 {\n            sum += get_max_sum(n: n / divisor)\n        }\n    }\n    return sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 12 {\n        return n\n    }\n    let n1 = get_max_sum(n: n/2)\n    let n2 = get_max_sum(n: n/3)\n    let n3 = get_max_sum(n: n/4)\n    let n4 = get_max_sum(n: n/5)\n    return max(n, n1+n2+n3+n4)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    var sum = 0\n    for i in 2...5 {\n        sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 || n == 1 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    var arr = [Int](repeating: 0, count: n + 1)\n    arr[0] = 0\n    arr[1] = 1\n    arr[2] = 2\n    arr[3] = 3\n    arr[4] = 4\n    arr[5] = 5\n    for i in 6...n {\n        arr[i] = max(arr[i / 2] + arr[i / 3] + arr[i / 4] + arr[i / 5], i)\n    }\n    return arr[n]",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    var sum = 0\n    sum = max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n    return sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    sum = max(sum, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n    sum = max(sum, n)\n    return sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, through: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 6 {\n        return n\n    }\n    var sum = 0\n    for i in stride(from: n/2, to: n/5, by: -1) {\n        sum = max(sum, get_max_sum(n: i))\n    }\n    return sum + n",
    "    if n == 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 2 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        if n % i == 0 {\n            let sum = get_max_sum(n: n/i)\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum",
    "    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return 1\n    }\n    \n    var sum = 0\n    sum = max(sum, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))\n    sum = max(sum, n)\n    \n    return sum",
    "    if n <= 0 {\n        return 0\n    }\n    \n    var cache = [Int](repeating: 0, count: n + 1)\n    cache[0] = 0\n    cache[1] = 1\n    for i in 2...n {\n        cache[i] = max(cache[i/2] + cache[i/3] + cache[i/4] + cache[i/5], i)\n    }\n    return cache[n]",
    "    if n <= 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return 1\n    }\n    \n    if n == 2 {\n        return 2\n    }\n    \n    if n == 3 {\n        return 3\n    }\n    \n    if n == 4 {\n        return 4\n    }\n    \n    if n == 5 {\n        return 5\n    }\n    \n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    \n    return max(sum, n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: 1, through: n/5, by: 1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    var sum = 0\n    sum = max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)\n    return sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    var arr = Array(repeating: 0, count: n+1)\n    arr[0] = 0\n    arr[1] = 1\n    for i in 2...n {\n        arr[i] = max(arr[i/2] + arr[i/3] + arr[i/4] + arr[i/5], i)\n    }\n    return arr[n]",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    return max(sum, n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n+1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    dp[4] = 4\n    dp[5] = 5\n    for i in 6...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n < 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    let sum = get_max_sum(n: n / 2) + get_max_sum(n: n / 3) + get_max_sum(n: n / 4) + get_max_sum(n: n / 5)\n    return max(n, sum)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 || n == 1 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n == 0 {\n        return 0\n    }\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    let max_sum = max(a+b+c+d, n)\n    return max_sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n / i)\n    }\n    return max(n, sum)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 2 {\n        return n\n    }\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    let e = get_max_sum(n: n/6)\n    return max(a+b+c+d+e, n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    if sum < n {\n        sum = n\n    }\n    return sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(n, sum)",
    "    if n < 12 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n < 2 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    if sum > n {\n        return sum\n    } else {\n        return n\n    }",
    "    if n < 0 {\n        return 0\n    }\n    \n    if n == 0 {\n        return 0\n    }\n    \n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 2 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n+1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in 2...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    dp[4] = 4\n    dp[5] = 5\n    for i in 6...n {\n        dp[i] = max(dp[i/2] + dp[i/3] + dp[i/4] + dp[i/5], i)\n    }\n    return dp[n]",
    "    if n == 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var max_sum = n\n    for i in stride(from: n/2, through: 1, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 || n == 1 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 2 {\n        return n\n    }\n    var max_sum = n\n    var i = 2\n    while i <= 5 {\n        let temp = get_max_sum(n: n/i)\n        if max_sum < temp {\n            max_sum = temp\n        }\n        i += 1\n    }\n    return max_sum",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n < 2 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in 2...5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/5, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n == 0 {\n        return 0\n    }\n    let sum = get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5)\n    if sum > n {\n        return sum\n    }\n    return n",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = n\n    var sum1 = get_max_sum(n: n/2)\n    var sum2 = get_max_sum(n: n/3)\n    var sum3 = get_max_sum(n: n/4)\n    var sum4 = get_max_sum(n: n/5)\n    sum = max(sum, sum1 + sum2 + sum3 + sum4)\n    return sum",
    "    if n < 12 {\n        return n\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, through: n/5, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var sum = 0\n    for i in 2...5 {\n        sum += get_max_sum(n: n/i)\n    }\n    return max(sum, n)",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    let max_sum = max(a + b + c + d, n)\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n < 2 {\n        return n\n    }\n    var max_sum = n\n    var i = 2\n    while i <= 5 {\n        let sum = get_max_sum(n: n/i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n        i += 1\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        let sum = get_max_sum(n: i) + get_max_sum(n: n - i)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    return max(get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5), n)",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    var temp_sum = 0\n    for i in stride(from: 2, through: 5, by: 1) {\n        temp_sum = get_max_sum(n: n/i)\n        if temp_sum > max_sum {\n            max_sum = temp_sum\n        }\n    }\n    return max_sum",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var result = n\n    let a = get_max_sum(n: n/2)\n    let b = get_max_sum(n: n/3)\n    let c = get_max_sum(n: n/4)\n    let d = get_max_sum(n: n/5)\n    result = max(a+b+c+d, result)\n    return result",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: n/2, to: 0, by: -1) {\n        max_sum = max(max_sum, get_max_sum(n: i) + get_max_sum(n: n-i))\n    }\n    return max_sum",
    "    if n == 0 {\n        return 0\n    }\n    var sum = n\n    let n2 = n / 2\n    let n3 = n / 3\n    let n4 = n / 4\n    let n5 = n / 5\n    if n2 > 0 {\n        sum += get_max_sum(n: n2)\n    }\n    if n3 > 0 {\n        sum += get_max_sum(n: n3)\n    }\n    if n4 > 0 {\n        sum += get_max_sum(n: n4)\n    }\n    if n5 > 0 {\n        sum += get_max_sum(n: n5)\n    }\n    return sum",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return max(n, get_max_sum(n: n/2) + get_max_sum(n: n/3) + get_max_sum(n: n/4) + get_max_sum(n: n/5))",
    "    if n <= 0 {\n        return 0\n    }\n    if n <= 5 {\n        return n\n    }\n    var max_sum = n\n    for i in stride(from: 1, to: n, by: 1) {\n        let sum = get_max_sum(n: i/2) + get_max_sum(n: i/3) + get_max_sum(n: i/4) + get_max_sum(n: i/5)\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n    return max_sum"
  ]
}