{
  "name": "mbpp_562_Find_Max_Length",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_len {\n            max_len = lst[i].count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max = 0\n    for i in lst {\n        if i.count > max {\n            max = i.count\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for l in lst {\n        max_len = max(max_len, l.count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for l in lst {\n        max_len = max(max_len, l.count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for sublist in lst {\n        if sublist.count > max_len {\n            max_len = sublist.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for sublist in lst {\n        max_len = max(max_len, sublist.count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for sublist in lst {\n        max_len = max(max_len, sublist.count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len: Int = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_len {\n            max_len = lst[i].count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for l in lst {\n        if l.count > max_length {\n            max_length = l.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for sublist in lst {\n        if sublist.count > max_len {\n            max_len = sublist.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    return lst.map({$0.count}).max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for sublist in lst {\n        if sublist.count > max_len {\n            max_len = sublist.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_len {\n            max_len = lst[i].count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for item in lst {\n        if item.count > max_len {\n            max_len = item.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    return lst.map({$0.count}).max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for l in lst {\n        max_len = max(max_len, l.count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for lst in lst {\n        if lst.count > max_length {\n            max_length = lst.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for sublist in lst {\n        max_len = max(max_len, sublist.count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    return lst.map { $0.count }.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for l in lst {\n        max_len = max(max_len, l.count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for l in lst {\n        if l.count > max_length {\n            max_length = l.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_len {\n            max_len = lst[i].count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for l in lst {\n        max_len = max(max_len, l.count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for l in lst {\n        if l.count > max_length {\n            max_length = l.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for l in lst {\n        max_length = max(max_length, l.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for l in lst {\n        if l.count > max_length {\n            max_length = l.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        let length = sublist.count\n        if length > max_length {\n            max_length = length\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for l in lst {\n        max_length = max(max_length, l.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for l in lst {\n        max_len = max(max_len, l.count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for l in lst {\n        max_len = max(max_len, l.count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for l in lst {\n        if l.count > max_length {\n            max_length = l.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for sublist in lst {\n        if sublist.count > max_len {\n            max_len = sublist.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for l in lst {\n        if l.count > max_length {\n            max_length = l.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        if i.count > max_len {\n            max_len = i.count\n        }\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        max_length = max(max_length, lst[i].count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in lst {\n        max_len = max(max_len, i.count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for item in lst {\n        if item.count > max_length {\n            max_length = item.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for l in lst {\n        max_len = max(max_len, l.count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        max_length = max(max_length, sublist.count)\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sub_list in lst {\n        if sub_list.count > max_length {\n            max_length = sub_list.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in 0..<lst.count {\n        if lst[i].count > max_length {\n            max_length = lst[i].count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1666124225,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_len = 0\n    for i in 0..<lst.count {\n        max_len = max(max_len, lst[i].count)\n    }\n    return max_len\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for i in lst {\n        if i.count > max_length {\n            max_length = i.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the length of the longest sublists.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n    var max_length = 0\n    for sublist in lst {\n        if sublist.count > max_length {\n            max_length = sublist.count\n        }\n    }\n    return max_length\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
      "timestamp": 1665509686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}