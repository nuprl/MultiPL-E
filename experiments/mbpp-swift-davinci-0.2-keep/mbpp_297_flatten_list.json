{
  "name": "mbpp_297_flatten_list",
  "language": "swift",
  "prompt": "\n/// Write a function to flatten a given nested list structure.\nfunc flatten_list(list1: AnyHashable) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(flatten_list(list1: [0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120])\nassert(flatten_list(list1: [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40])\nassert(flatten_list(list1: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else {\n                result += flatten_list(list1: item)\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list2: [Int] = []\n    if let list1 = list1 as? [AnyHashable] {\n        for item in list1 {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2 += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var list = list1\n    var result = [Int]()\n    while let l = list as? [AnyHashable] {\n        list = l[0]\n    }\n    while let l = list as? [AnyHashable] {\n        result.append(contentsOf: flatten_list(list1: l[0]))\n        list = l[1]\n    }\n    if let l = list as? Int {\n        result.append(l)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = list1\n    var result: [Int] = []\n    while let list1 = list as? [AnyHashable] {\n        for item in list1 {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n        list = list1\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result += flatten_list(list1: item)\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    \n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    \n    return list",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = list1\n    var result = [Int]()\n    \n    while let element = list as? [AnyHashable] {\n        list = element[0]\n    }\n    \n    while let element = list as? Int {\n        result.append(element)\n        list = element\n    }\n    \n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let value = list1 as? Int {\n        result.append(value)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    } else {\n        result.append(list1 as! Int)\n    }\n    return result",
    "    var list = list1\n    var result = [Int]()\n    while let list1 = list as? [AnyHashable] {\n        for element in list1 {\n            if let element = element as? Int {\n                result.append(element)\n            } else {\n                list = element\n                break\n            }\n        }\n    }\n    return result",
    "    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2",
    "    var list = list1\n    var result = [Int]()\n    while let listItem = list as? [AnyHashable] {\n        list = listItem[0]\n    }\n    while let listItem = list as? Int {\n        result.append(listItem)\n        if let list = list1 as? [AnyHashable] {\n            list1 = list[1]\n        } else {\n            break\n        }\n        list = list1\n        while let listItem = list as? [AnyHashable] {\n            list = listItem[0]\n        }\n    }\n    return result",
    "    var list = list1\n    var result = [Int]()\n    while let list1 = list as? [AnyHashable] {\n        for item in list1 {\n            if let item1 = item as? Int {\n                result.append(item1)\n            } else if let item1 = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item1))\n            }\n        }\n        break\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let number = list1 as? Int {\n        result.append(number)\n    }\n    return result",
    "    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2",
    "    var result = [Int]()\n    if let list1 = list1 as? [AnyHashable] {\n        for item in list1 {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let list2 = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: list2))\n            } else if let item = item as? Int {\n                result.append(item)\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let l = list1 as? [AnyHashable] {\n        for item in l {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let l = list1 as? Int {\n        list.append(l)\n    }\n    return list",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for element in list {\n            if let element = element as? Int {\n                result.append(element)\n            } else if let element = element as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: element))\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let value = list1 as? Int {\n        result.append(value)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = list1\n    var result = [Int]()\n    while let element = list as? [AnyHashable] {\n        list = element[0]\n    }\n    while let element = list as? Int {\n        result.append(element)\n        list = element\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = list1\n    var result = [Int]()\n    while let list_ = list as? [AnyHashable] {\n        if let list__ = list_[0] as? [AnyHashable] {\n            list = list__\n        } else {\n            result.append(list_[0] as! Int)\n            list = list_[1]\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for element in list {\n            result.append(contentsOf: flatten_list(list1: element))\n        }\n    } else if let element = list1 as? Int {\n        result.append(element)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let num = list1 as? Int {\n        list.append(num)\n    } else if let array = list1 as? [AnyHashable] {\n        for item in array {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    }\n    return list",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else {\n        result.append(list1 as! Int)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var list = list1\n    var result = [Int]()\n    while let l = list as? [AnyHashable] {\n        list = l[0]\n    }\n    result.append(list as! Int)\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let number = list1 as? Int {\n        result.append(number)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var list = list1\n    var result = [Int]()\n    while let l = list as? [AnyHashable] {\n        list = l[0]\n    }\n    while let l = list as? [AnyHashable] {\n        result.append(contentsOf: flatten_list(list1: l[0]))\n        list = l[1]\n    }\n    if let l = list as? Int {\n        result.append(l)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for element in list {\n            result.append(contentsOf: flatten_list(list1: element))\n        }\n    } else if let element = list1 as? Int {\n        result.append(element)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let list = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: list))\n            } else if let number = item as? Int {\n                result.append(number)\n            }\n        }\n    } else if let number = list1 as? Int {\n        result.append(number)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let number = list1 as? Int {\n        result.append(number)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for element in list {\n            list2.append(contentsOf: flatten_list(list1: element))\n        }\n    } else if let element = list1 as? Int {\n        list2.append(element)\n    }\n    return list2",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let number = list1 as? Int {\n        result.append(number)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for element in list {\n            if let element = element as? Int {\n                result.append(element)\n            } else if let element = element as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: element))\n            }\n        }\n    } else if let element = list1 as? Int {\n        result.append(element)\n    }\n    return result",
    "    var result = [Int]()\n    \n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    \n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else {\n        result.append(list1 as! Int)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let list = item as? [AnyHashable] {\n                result += flatten_list(list1: list)\n            } else {\n                result.append(item as! Int)\n            }\n        }\n    } else {\n        result.append(list1 as! Int)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var list = list1\n    var result = [Int]()\n    while let l = list as? [AnyHashable] {\n        if l.count == 0 {\n            break\n        }\n        list = l[0]\n        if let i = list as? Int {\n            result.append(i)\n            list = l[1]\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else {\n        result.append(list1 as! Int)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else {\n        list.append(list1 as! Int)\n    }\n    return list",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else if let item = item as? [AnyHashable] {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            if let item = item as? Int {\n                result.append(item)\n            } else {\n                result.append(contentsOf: flatten_list(list1: item))\n            }\n        }\n    }\n    return result",
    "    var list2 = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            list2 += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        list2.append(item)\n    }\n    return list2",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result += flatten_list(list1: item)\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result = [Int]()\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var result: [Int] = []\n    if let list = list1 as? [AnyHashable] {\n        for item in list {\n            result.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        result.append(item)\n    }\n    return result",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list",
    "    var list = [Int]()\n    if let list2 = list1 as? [AnyHashable] {\n        for item in list2 {\n            list.append(contentsOf: flatten_list(list1: item))\n        }\n    } else if let item = list1 as? Int {\n        list.append(item)\n    }\n    return list"
  ]
}