{
  "name": "mbpp_223_is_majority",
  "language": "swift",
  "prompt": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter{ $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > (n / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af7fd622c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af7fd319561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af7fd319286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af7fd31913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af7fd318bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002af7fd118e83 <unavailable> + 188035\n6    tmpbhmjcoz9                        0x0000563cb865ea3d <unavailable> + 6717\n7    tmpbhmjcoz9                        0x0000563cb865e754 <unavailable> + 5972\n8    libc.so.6                          0x00002af7fd80e460 __libc_start_main + 245\n9    tmpbhmjcoz9                        0x0000563cb865e149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0069b87c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b006987e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b006987e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b006987e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b006987dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b006967de83 <unavailable> + 188035\n6    tmpfdrt2_1m                        0x0000561dd61f0973 <unavailable> + 6515\n7    tmpfdrt2_1m                        0x0000561dd61f0754 <unavailable> + 5972\n8    libc.so.6                          0x00002b0069d73460 __libc_start_main + 245\n9    tmpfdrt2_1m                        0x0000561dd61f0149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var l = 0\n    var r = n - 1\n    var mid = 0\n    while l <= r {\n        mid = (l + r) / 2\n        if arr[mid] == x {\n            break\n        }\n        if arr[mid] < x {\n            l = mid + 1\n        } else {\n            r = mid - 1\n        }\n    }\n    if l > r {\n        return false\n    }\n    if mid + n / 2 < n && arr[mid + n / 2] == x {\n        return true\n    }\n    if mid - n / 2 >= 0 && arr[mid - n / 2] == x {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "tmppzdhm38l/tmppzdhm38l.swift:43: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b921febbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b921fbb2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b921fbb2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b921fbb17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppzdhm38l                        0x00005635fcc48417 <unavailable> + 5143\n5    libc.so.6                          0x00002b92200a7460 __libc_start_main + 245\n6    tmppzdhm38l                        0x00005635fcc48059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0069b87c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b006987e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b006987e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b006987e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b006987dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b006967de83 <unavailable> + 188035\n6    tmpfdrt2_1m                        0x0000561dd61f0973 <unavailable> + 6515\n7    tmpfdrt2_1m                        0x0000561dd61f0754 <unavailable> + 5972\n8    libc.so.6                          0x00002b0069d73460 __libc_start_main + 245\n9    tmpfdrt2_1m                        0x0000561dd61f0149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af7fd622c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af7fd319561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af7fd319286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af7fd31913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af7fd318bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002af7fd118e83 <unavailable> + 188035\n6    tmpbhmjcoz9                        0x0000563cb865ea3d <unavailable> + 6717\n7    tmpbhmjcoz9                        0x0000563cb865e754 <unavailable> + 5972\n8    libc.so.6                          0x00002af7fd80e460 __libc_start_main + 245\n9    tmpbhmjcoz9                        0x0000563cb865e149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n/2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e769a1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e76698561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9e76698286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9e7669813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9e76697bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b9e7649ae83 <unavailable> + 188035\n6    tmppuj9u2f3                        0x0000557541b3ba3d <unavailable> + 6717\n7    tmppuj9u2f3                        0x0000557541b3b754 <unavailable> + 5972\n8    libc.so.6                          0x00002b9e76b8d460 __libc_start_main + 245\n9    tmppuj9u2f3                        0x0000557541b3b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af7fd622c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af7fd319561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af7fd319286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af7fd31913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af7fd318bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002af7fd118e83 <unavailable> + 188035\n6    tmpbhmjcoz9                        0x0000563cb865ea3d <unavailable> + 6717\n7    tmpbhmjcoz9                        0x0000563cb865e754 <unavailable> + 5972\n8    libc.so.6                          0x00002af7fd80e460 __libc_start_main + 245\n9    tmpbhmjcoz9                        0x0000563cb865e149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let mid = n / 2\n    let index = binary_search(arr: arr, n: n, x: x)\n    if index == -1 {\n        return false\n    }\n    if (index + mid) < n && arr[index + mid] == x {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "/tmp/tmpuz23m2s7.swift:5:17: error: cannot find 'binary_search' in scope\n    let index = binary_search(arr: arr, n: n, x: x)\n                ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    let count = arr.filter { $0 == x }.count\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let mid = n/2\n    let index = binary_search(arr: arr, l: 0, r: n-1, x: x)\n    if index == -1 {\n        return false\n    }\n    if index + mid > n-1 {\n        return true\n    }\n    return arr[index + mid] == x\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "/tmp/tmp2x0a_bnh.swift:5:17: error: cannot find 'binary_search' in scope\n    let index = binary_search(arr: arr, l: 0, r: n-1, x: x)\n                ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac6c87efc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac6c84e6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ac6c84e6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ac6c84e613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ac6c84e5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ac6c82e6e83 <unavailable> + 188035\n6    tmpz4rgs98r                        0x000055957a752973 <unavailable> + 6515\n7    tmpz4rgs98r                        0x000055957a752754 <unavailable> + 5972\n8    libc.so.6                          0x00002ac6c89db460 __libc_start_main + 245\n9    tmpz4rgs98r                        0x000055957a752149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af7fd622c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af7fd319561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af7fd319286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af7fd31913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af7fd318bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002af7fd118e83 <unavailable> + 188035\n6    tmpbhmjcoz9                        0x0000563cb865ea3d <unavailable> + 6717\n7    tmpbhmjcoz9                        0x0000563cb865e754 <unavailable> + 5972\n8    libc.so.6                          0x00002af7fd80e460 __libc_start_main + 245\n9    tmpbhmjcoz9                        0x0000563cb865e149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var left = 0\n    var right = n - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if arr[mid] == x {\n            if mid + n/2 < n && arr[mid + n/2] == x {\n                return true\n            } else {\n                return false\n            }\n        } else if arr[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "tmppjzr7ubj/tmppjzr7ubj.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af2216efc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af2213e6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af2213e6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af2213e57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppjzr7ubj                        0x000055886a811417 <unavailable> + 5143\n5    libc.so.6                          0x00002af2218db460 __libc_start_main + 245\n6    tmppjzr7ubj                        0x000055886a811059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    return arr.filter { $0 == x }.count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    if n == 0 {\n        return false\n    }\n    let mid = n / 2\n    if arr[mid] == x {\n        if (mid + n/2) < n && arr[mid + n/2] == x {\n            return true\n        } else if (mid - n/2) >= 0 && arr[mid - n/2] == x {\n            return true\n        }\n    }\n    if arr[mid] <= x {\n        return is_majority(arr: Array(arr[mid+1..<n]), n: n/2, x: x)\n    }\n    return is_majority(arr: Array(arr[0..<mid]), n: n/2, x: x)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "tmp80dghu1v/tmp80dghu1v.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63ba610c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63ba307b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63ba307988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63ba3067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp80dghu1v                        0x00005573301d666f <unavailable> + 5743\n5    libc.so.6                          0x00002b63ba7fc460 __libc_start_main + 245\n6    tmp80dghu1v                        0x00005573301d61b9 <unavailable> + 4537\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n / 2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba6f4e54c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba6f4b4b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ba6f4b4b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ba6f4b4b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ba6f4b4abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ba6f494be83 <unavailable> + 188035\n6    tmp64nrzxrj                        0x000055a66f13c973 <unavailable> + 6515\n7    tmp64nrzxrj                        0x000055a66f13c754 <unavailable> + 5972\n8    libc.so.6                          0x00002ba6f5040460 __libc_start_main + 245\n9    tmp64nrzxrj                        0x000055a66f13c149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var low = 0\n    var high = n - 1\n    var mid = (low + high) / 2\n    \n    while low <= high {\n        if arr[mid] == x {\n            if (mid + n/2) <= high && arr[mid + n/2] == x {\n                return true\n            } else {\n                return false\n            }\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n        mid = (low + high) / 2\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "tmp3kxhqrv_/tmp3kxhqrv_.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0a38b21c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0a38818b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0a38818988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0a388177b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3kxhqrv_                        0x0000555cd79c6417 <unavailable> + 5143\n5    libc.so.6                          0x00002b0a38d0d460 __libc_start_main + 245\n6    tmp3kxhqrv_                        0x0000555cd79c6059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af7fd622c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af7fd319561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af7fd319286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af7fd31913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af7fd318bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002af7fd118e83 <unavailable> + 188035\n6    tmpbhmjcoz9                        0x0000563cb865ea3d <unavailable> + 6717\n7    tmpbhmjcoz9                        0x0000563cb865e754 <unavailable> + 5972\n8    libc.so.6                          0x00002af7fd80e460 __libc_start_main + 245\n9    tmpbhmjcoz9                        0x0000563cb865e149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    \n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b958e5a2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b958e299561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b958e299286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b958e29913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b958e298bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b958e099e83 <unavailable> + 188035\n6    tmpck34kv98                        0x000055d574387973 <unavailable> + 6515\n7    tmpck34kv98                        0x000055d574387754 <unavailable> + 5972\n8    libc.so.6                          0x00002b958e78e460 __libc_start_main + 245\n9    tmpck34kv98                        0x000055d574387149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac6c87efc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac6c84e6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ac6c84e6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ac6c84e613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ac6c84e5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ac6c82e6e83 <unavailable> + 188035\n6    tmpz4rgs98r                        0x000055957a752973 <unavailable> + 6515\n7    tmpz4rgs98r                        0x000055957a752754 <unavailable> + 5972\n8    libc.so.6                          0x00002ac6c89db460 __libc_start_main + 245\n9    tmpz4rgs98r                        0x000055957a752149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let majority = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > majority\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9716f76c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9716c6d561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b9716c6d286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b9716c6d13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b9716c6cbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b9716a6de83 <unavailable> + 188035\n6    tmp3v0368_p                        0x00005560cec0ba3d <unavailable> + 6717\n7    tmp3v0368_p                        0x00005560cec0b754 <unavailable> + 5972\n8    libc.so.6                          0x00002b9717162460 __libc_start_main + 245\n9    tmp3v0368_p                        0x00005560cec0b149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0069b87c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b006987e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b006987e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b006987e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b006987dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b006967de83 <unavailable> + 188035\n6    tmpfdrt2_1m                        0x0000561dd61f0973 <unavailable> + 6515\n7    tmpfdrt2_1m                        0x0000561dd61f0754 <unavailable> + 5972\n8    libc.so.6                          0x00002b0069d73460 __libc_start_main + 245\n9    tmpfdrt2_1m                        0x0000561dd61f0149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let mid = n / 2\n    let index = binary_search(arr: arr, l: 0, r: n - 1, x: x)\n    if index == -1 {\n        return false\n    }\n    if (index + mid) <= (n - 1) && arr[index + mid] == x {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "/tmp/tmpo5a0lv7x.swift:5:17: error: cannot find 'binary_search' in scope\n    let index = binary_search(arr: arr, l: 0, r: n - 1, x: x)\n                ^~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0069b87c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b006987e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b006987e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b006987e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b006987dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b006967de83 <unavailable> + 188035\n6    tmpfdrt2_1m                        0x0000561dd61f0973 <unavailable> + 6515\n7    tmpfdrt2_1m                        0x0000561dd61f0754 <unavailable> + 5972\n8    libc.so.6                          0x00002b0069d73460 __libc_start_main + 245\n9    tmpfdrt2_1m                        0x0000561dd61f0149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af7fd622c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af7fd319561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af7fd319286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af7fd31913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af7fd318bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002af7fd118e83 <unavailable> + 188035\n6    tmpbhmjcoz9                        0x0000563cb865ea3d <unavailable> + 6717\n7    tmpbhmjcoz9                        0x0000563cb865e754 <unavailable> + 5972\n8    libc.so.6                          0x00002af7fd80e460 __libc_start_main + 245\n9    tmpbhmjcoz9                        0x0000563cb865e149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0069b87c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b006987e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b006987e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b006987e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b006987dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b006967de83 <unavailable> + 188035\n6    tmpfdrt2_1m                        0x0000561dd61f0973 <unavailable> + 6515\n7    tmpfdrt2_1m                        0x0000561dd61f0754 <unavailable> + 5972\n8    libc.so.6                          0x00002b0069d73460 __libc_start_main + 245\n9    tmpfdrt2_1m                        0x0000561dd61f0149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af7fd622c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af7fd319561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af7fd319286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af7fd31913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af7fd318bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002af7fd118e83 <unavailable> + 188035\n6    tmpbhmjcoz9                        0x0000563cb865ea3d <unavailable> + 6717\n7    tmpbhmjcoz9                        0x0000563cb865e754 <unavailable> + 5972\n8    libc.so.6                          0x00002af7fd80e460 __libc_start_main + 245\n9    tmpbhmjcoz9                        0x0000563cb865e149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0069b87c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b006987e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b006987e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b006987e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b006987dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b006967de83 <unavailable> + 188035\n6    tmpfdrt2_1m                        0x0000561dd61f0973 <unavailable> + 6515\n7    tmpfdrt2_1m                        0x0000561dd61f0754 <unavailable> + 5972\n8    libc.so.6                          0x00002b0069d73460 __libc_start_main + 245\n9    tmpfdrt2_1m                        0x0000561dd61f0149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let half = n / 2\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > half\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af7fd622c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af7fd319561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002af7fd319286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002af7fd31913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002af7fd318bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002af7fd118e83 <unavailable> + 188035\n6    tmpbhmjcoz9                        0x0000563cb865ea3d <unavailable> + 6717\n7    tmpbhmjcoz9                        0x0000563cb865e754 <unavailable> + 5972\n8    libc.so.6                          0x00002af7fd80e460 __libc_start_main + 245\n9    tmpbhmjcoz9                        0x0000563cb865e149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    let count = arr.filter { $0 == x }.count\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var left = 0\n    var right = n - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if arr[mid] == x {\n            break\n        } else if arr[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    if left > right {\n        return false\n    }\n    var count = 0\n    var i = mid\n    while i >= 0 && arr[i] == x {\n        count += 1\n        i -= 1\n    }\n    i = mid + 1\n    while i < n && arr[i] == x {\n        count += 1\n        i += 1\n    }\n    return count > n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    \n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b92aeaadc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b92ae7a4561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b92ae7a4286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b92ae7a413c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b92ae7a3bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b92ae5a4e83 <unavailable> + 188035\n6    tmpv3sa26av                        0x000055ab90773973 <unavailable> + 6515\n7    tmpv3sa26av                        0x000055ab90773754 <unavailable> + 5972\n8    libc.so.6                          0x00002b92aec99460 __libc_start_main + 245\n9    tmpv3sa26av                        0x000055ab90773149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    return count > n/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031f0a4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b031ed9b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b031ed9b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b031ed9b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b031ed9abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b031eb9ae83 <unavailable> + 188035\n6    tmp7c1bwngz                        0x000055acb2a88973 <unavailable> + 6515\n7    tmp7c1bwngz                        0x000055acb2a88754 <unavailable> + 5972\n8    libc.so.6                          0x00002b031f290460 __libc_start_main + 245\n9    tmp7c1bwngz                        0x000055acb2a88149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr: [Int], n: Int, x: Int) -> Bool {\n    var count = 0\n    for i in 0..<n {\n        if arr[i] == x {\n            count += 1\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_majority(arr: [1, 2, 3, 3, 3, 3, 10], n: 7, x: 3) == true)\nassert(is_majority(arr: [1, 1, 2, 4, 4, 4, 6, 6], n: 8, x: 4) == false)\nassert(is_majority(arr: [1, 1, 1, 2, 2], n: 5, x: 1) == true)\nassert(is_majority(arr: [1, 1, 2, 2], n: 5, x: 1) == false)",
      "timestamp": 1665510124,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae1bd988c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae1bd67f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae1bd67f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae1bd67f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae1bd67ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002ae1bd47ee83 <unavailable> + 188035\n6    tmp8u8jcmvd                        0x0000562ce605d973 <unavailable> + 6515\n7    tmp8u8jcmvd                        0x0000562ce605d754 <unavailable> + 5972\n8    libc.so.6                          0x00002ae1bdb74460 __libc_start_main + 245\n9    tmp8u8jcmvd                        0x0000562ce605d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}