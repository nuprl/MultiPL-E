{
  "name": "mbpp_426_filter_oddnumbers",
  "language": "swift",
  "prompt": "\n/// Write a function to filter odd numbers.\nfunc filter_oddnumbers(nums: [Int]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(filter_oddnumbers(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9])\nassert(filter_oddnumbers(nums: [10, 20, 45, 67, 84, 93]) == [45, 67, 93])\nassert(filter_oddnumbers(nums: [5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var oddnumbers = [Int]()\n    for num in nums {\n        if num % 2 == 1 {\n            oddnumbers.append(num)\n        }\n    }\n    return oddnumbers",
    "    return nums.filter { $0 % 2 == 1 }",
    "    var result = [Int]()\n    for num in nums {\n        if num % 2 == 1 {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for num in nums {\n        if num % 2 == 1 {\n            result.append(num)\n        }\n    }\n    return result",
    "    return nums.filter { $0 % 2 != 0 }",
    "    var odd_numbers = [Int]()\n    for num in nums {\n        if num % 2 != 0 {\n            odd_numbers.append(num)\n        }\n    }\n    return odd_numbers",
    "    var result = [Int]()\n    for num in nums {\n        if num % 2 == 1 {\n            result.append(num)\n        }\n    }\n    return result",
    "    return nums.filter { $0 % 2 != 0 }",
    "    return nums.filter { $0 % 2 == 1 }",
    "    var result: [Int] = []\n    for num in nums {\n        if num % 2 != 0 {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for num in nums {\n        if num % 2 != 0 {\n            result.append(num)\n        }\n    }\n    return result",
    "    var oddnumbers = [Int]()\n    for num in nums {\n        if num % 2 != 0 {\n            oddnumbers.append(num)\n        }\n    }\n    return oddnumbers",
    "    var result: [Int] = []\n    for num in nums {\n        if num % 2 == 1 {\n            result.append(num)\n        }\n    }\n    return result",
    "    return nums.filter({$0 % 2 == 1})",
    "    return nums.filter { $0 % 2 != 0 }",
    "    var result = [Int]()\n    for num in nums {\n        if num % 2 == 1 {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for num in nums {\n        if num % 2 != 0 {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result: [Int] = []\n    for num in nums {\n        if num % 2 == 1 {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for num in nums {\n        if num % 2 == 1 {\n            result.append(num)\n        }\n    }\n    return result",
    "    var result = [Int]()\n    for num in nums {\n        if num % 2 == 1 {\n            result.append(num)\n        }\n    }\n    return result"
  ]
}