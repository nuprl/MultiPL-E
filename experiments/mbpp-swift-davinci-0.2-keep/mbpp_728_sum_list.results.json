{
  "name": "mbpp_728_sum_list",
  "language": "swift",
  "prompt": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst: [Int] = []\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    if lst1.count != lst2.count {\n        return []\n    }\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for (index, element) in lst1.enumerated() {\n        sum.append(element + lst2[index])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst: [Int] = []\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst: [Int] = []\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    return zip(lst1, lst2).map { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for (i, _) in lst1.enumerate() {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "/tmp/tmp6be2xiha.swift:5:5: error: failed to produce diagnostic for expression; please submit a bug report (https://swift.org/contributing/#reporting-bugs) and include the project\n    for (i, _) in lst1.enumerate() {\n    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_list = [Int]()\n    for i in 0..<lst1.count {\n        sum_list.append(lst1[i] + lst2[i])\n    }\n    return sum_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst: [Int] = []\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst: [Int] = []\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for (index, _) in lst1.enumerated() {\n        sum.append(lst1[index] + lst2[index])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_list = [Int]()\n    for i in 0..<lst1.count {\n        sum_list.append(lst1[i] + lst2[i])\n    }\n    return sum_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for (index, element) in lst1.enumerated() {\n        result.append(element + lst2[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst: [Int] = []\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for (index, _) in lst1.enumerated() {\n        sum.append(lst1[index] + lst2[index])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for (index, _) in lst1.enumerated() {\n        sum.append(lst1[index] + lst2[index])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst: [Int] = []\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for (i, _) in lst1.enumerated() {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    return zip(lst1, lst2).map(+)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum: [Int] = []\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for (index, _) in lst1.enumerated() {\n        sum.append(lst1[index] + lst2[index])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for (index, element) in lst1.enumerated() {\n        sum.append(element + lst2[index])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    return zip(lst1, lst2).map { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    return zip(lst1, lst2).map { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for (a, b) in zip(lst1, lst2) {\n        result.append(a + b)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var lst = [Int]()\n    for i in 0..<lst1.count {\n        lst.append(lst1[i] + lst2[i])\n    }\n    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for (index, _) in lst1.enumerate() {\n        sum.append(lst1[index] + lst2[index])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "/tmp/tmpios71609.swift:5:5: error: failed to produce diagnostic for expression; please submit a bug report (https://swift.org/contributing/#reporting-bugs) and include the project\n    for (index, _) in lst1.enumerate() {\n    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for (index, _) in lst1.enumerated() {\n        sum.append(lst1[index] + lst2[index])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for (index, element) in lst1.enumerated() {\n        result.append(element + lst2[index])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    return zip(lst1, lst2).map { $0 + $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1666123192,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst: [Int] = []\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum_lst = [Int]()\n    for i in 0..<lst1.count {\n        sum_lst.append(lst1[i] + lst2[i])\n    }\n    return sum_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nfunc sum_list(lst1: [Int], lst2: [Int]) -> [Int] {\n    var sum = [Int]()\n    for i in 0..<lst1.count {\n        sum.append(lst1[i] + lst2[i])\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(sum_list(lst1: [10, 20, 30], lst2: [15, 25, 35]) == [25, 45, 65])\nassert(sum_list(lst1: [1, 2, 3], lst2: [5, 6, 7]) == [6, 8, 10])\nassert(sum_list(lst1: [15, 20, 30], lst2: [15, 45, 75]) == [30, 65, 105])",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}