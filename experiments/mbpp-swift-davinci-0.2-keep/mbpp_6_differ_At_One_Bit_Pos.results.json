{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "swift",
  "prompt": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let x = a ^ b\n    return (x & (x - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return ((c & (c - 1)) == 0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let x = a ^ b\n    return (x & (x - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    if count == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        count += 1\n        c = c & (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        count += 1\n        c = c & (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        count += 1\n        c = c & (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        count += 1\n        c &= (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        count += 1\n        c = c & (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c == 0 {\n        return false\n    }\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var x = a ^ b\n    return x & (x - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        count += 1\n        c = c & (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        count += 1\n        c &= (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        c = c & (c - 1)\n        count += 1\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    let count = c.nonzeroBitCount\n    if count == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    return (a ^ b) & (a ^ b - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        c = c & (c-1)\n        count += 1\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        count += 1\n        c = c & (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1\n        }\n        c = c >> 1\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1\n        }\n        c >>= 1\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        count += 1\n        c = c & (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    return (a ^ b) & (a ^ b - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        count += 1\n        c = c & (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var x = a ^ b\n    return (x & (x - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    return (a ^ b) & (a ^ b - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c > 0 {\n        if c & 1 == 1 {\n            count += 1\n        }\n        c = c >> 1\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    return (a ^ b) & (a ^ b - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        count += 1\n        c = c & (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        c = c & (c - 1)\n        count += 1\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    if a == b {\n        return false\n    }\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        count += 1\n        c = c & (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        c = c & (c - 1)\n        count += 1\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    return (a ^ b) & (a ^ b - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        count += 1\n        c = c & (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    return (a ^ b) & (a ^ b - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c > 0 {\n        count += c & 1\n        c >>= 1\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    return (a ^ b) & (a ^ b - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let x = a ^ b\n    return (x & (x - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    return (a ^ b) & (a ^ b - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    return (a ^ b) & (a ^ b - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c == 0 {\n        return false\n    }\n    var count = 0\n    while c > 0 {\n        count += 1\n        c = c & (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "/tmp/tmpp48xtrvd.swift:11:9: error: cannot assign to value: 'c' is a 'let' constant\n        c = c & (c - 1)\n        ^\n/tmp/tmpp48xtrvd.swift:4:5: note: change 'let' to 'var' to make it mutable\n    let c = a ^ b\n    ^~~\n    var\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    return (a ^ b) == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "tmp8k5rcr5y/tmp8k5rcr5y.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b718dc6cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b718d963b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b718d963988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b718d9627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8k5rcr5y                        0x00005579d18c31b6 <unavailable> + 4534\n5    libc.so.6                          0x00002b718de58460 __libc_start_main + 245\n6    tmp8k5rcr5y                        0x00005579d18c2e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    let count = c.nonzeroBitCount\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c != 0 {\n        count += 1\n        c = c & (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c > 0 {\n        count += 1\n        c = c & (c - 1)\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    if c & (c - 1) == 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    return (a ^ b) & (a ^ b - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    var c = a ^ b\n    var count = 0\n    while c > 0 {\n        c = c & (c - 1)\n        count += 1\n    }\n    return count == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    return a ^ b == 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1666123484,
      "stdout": "",
      "stderr": "tmprl3fj1kv/tmprl3fj1kv.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2b60c3ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2b60935b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2b60935988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2b609347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprl3fj1kv                        0x000056536a0511b6 <unavailable> + 4534\n5    libc.so.6                          0x00002b2b60e2a460 __libc_start_main + 245\n6    tmprl3fj1kv                        0x000056536a050e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return (c & (c - 1)) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to check whether the two numbers differ at one bit position only or not.\nfunc differ_At_One_Bit_Pos(a: Int, b: Int) -> Bool {\n    let c = a ^ b\n    return c & (c - 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(differ_At_One_Bit_Pos(a: 13, b: 9) == true)\nassert(differ_At_One_Bit_Pos(a: 15, b: 8) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 4) == false)\nassert(differ_At_One_Bit_Pos(a: 2, b: 3) == true)\nassert(differ_At_One_Bit_Pos(a: 5, b: 1) == true)\nassert(differ_At_One_Bit_Pos(a: 1, b: 5) == true)",
      "timestamp": 1665510515,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}