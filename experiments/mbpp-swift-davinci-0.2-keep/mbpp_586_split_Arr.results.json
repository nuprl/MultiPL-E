{
  "name": "mbpp_586_split_Arr",
  "language": "swift",
  "prompt": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    var i = 0\n    while i < l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n        i += 1\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "tmp03icmb8t/tmp03icmb8t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac10be28c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac10bb1fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac10bb1f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac10bb1e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp03icmb8t                        0x00005626c91c35a9 <unavailable> + 5545\n5    libc.so.6                          0x00002ac10c014460 __libc_start_main + 245\n6    tmp03icmb8t                        0x00005626c91c3179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first_part = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first_part)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = l\n    let first = newArr[0..<n]\n    let second = newArr[n..<newArr.count]\n    newArr = Array(second) + Array(first)\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l.prefix(n)\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var result = l\n    let firstPart = Array(result[0..<n])\n    result.removeSubrange(0..<n)\n    result.append(contentsOf: firstPart)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let firstPart = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: firstPart)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first_part = l[0..<n]\n    let second_part = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first_part)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l.prefix(n)\n    let second = l.suffix(l.count - n)\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "/tmp/tmpyre2w8sw.swift:6:19: error: cannot convert return expression of type 'ArraySlice<Int>' to return type '[Int]'\n    return second + first\n           ~~~~~~~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<l.count {\n        if i >= n {\n            newArr.append(l[i])\n        }\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let last = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let firstPart = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: firstPart)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let firstPart = arr[0..<n]\n    let secondPart = arr[n..<arr.count]\n    arr.removeSubrange(0..<n)\n    arr.append(contentsOf: firstPart)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let last = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = Array(l[0..<n])\n    let second = Array(l[n..<l.count])\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    arr.removeSubrange(0..<n)\n    arr.append(contentsOf: first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l1 = [Int]()\n    var l2 = [Int]()\n    for i in 0..<n {\n        l1.append(l[i])\n    }\n    for i in n..<l.count {\n        l2.append(l[i])\n    }\n    return l2 + l1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let firstPart = l[0...n]\n    l.removeSubrange(0...n)\n    l.append(contentsOf: firstPart)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "tmpaaftc4m8/tmpaaftc4m8.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b13e92cbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b13e8fc2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b13e8fc2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b13e8fc17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpaaftc4m8                        0x00005644e485b749 <unavailable> + 5961\n5    libc.so.6                          0x00002b13e94b7460 __libc_start_main + 245\n6    tmpaaftc4m8                        0x00005644e485b319 <unavailable> + 4889\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = Array(l[0..<n])\n    let second = Array(l[n..<l.count])\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l.prefix(n)\n    let second = l.suffix(l.count - n)\n    l = Array(second) + Array(first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    arr.removeSubrange(0..<n)\n    arr.append(contentsOf: first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    l.append(contentsOf: l[0..<n])\n    l.removeSubrange(0..<n)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let firstPart = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: firstPart)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return Array(second) + Array(first)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let firstPart = l[0..<n]\n    let secondPart = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: firstPart)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let firstPart = l[0..<n]\n    let secondPart = l[n..<l.count]\n    return Array(secondPart) + Array(firstPart)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = Array(l[0..<n])\n    let second = Array(l[n..<l.count])\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    result = Array(second) + Array(first)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var result: [Int] = []\n    for i in 0..<l.count {\n        if i < n {\n            result.append(l[i])\n        } else {\n            result.insert(l[i], at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "tmpp_ubseaa/tmpp_ubseaa.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b29120c8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2911dbfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2911dbf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2911dbe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp_ubseaa                        0x000055c72cfdc6e9 <unavailable> + 5865\n5    libc.so.6                          0x00002b29122b4460 __libc_start_main + 245\n6    tmpp_ubseaa                        0x000055c72cfdc2b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return Array(second) + Array(first)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l.prefix(n)\n    let second = l.suffix(l.count - n)\n    l = Array(second) + Array(first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in 0..<l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "tmpblh6mor7/tmpblh6mor7.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b596883ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5968535b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5968535988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b59685347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpblh6mor7                        0x00005601af20a739 <unavailable> + 5945\n5    libc.so.6                          0x00002b5968a2a460 __libc_start_main + 245\n6    tmpblh6mor7                        0x00005601af20a309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l.prefix(n)\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = Array(l[0..<n])\n    let second = Array(l[n..<l.count])\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let firstPart = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: firstPart)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    arr.removeSubrange(0..<n)\n    arr.append(contentsOf: first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr.removeSubrange(0..<n)\n    arr.append(contentsOf: first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return Array(second) + Array(first)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var result = l\n    let first = result[0..<n]\n    let second = result[n..<result.count]\n    result = Array(second) + Array(first)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = Array(second) + Array(first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<l.count {\n        if i < n {\n            result.append(l[i])\n        } else {\n            result.insert(l[i], at: 0)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "tmp7ovhro8q/tmp7ovhro8q.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2f5216ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2f51e61b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2f51e61988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2f51e607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ovhro8q                        0x00005562a323c739 <unavailable> + 5945\n5    libc.so.6                          0x00002b2f52356460 __libc_start_main + 245\n6    tmp7ovhro8q                        0x00005562a323c309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr.removeSubrange(0..<n)\n    arr.append(contentsOf: first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr: [Int] = []\n    for i in 0..<l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "tmp09d334qa/tmp09d334qa.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae21f83cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae21f533b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae21f533988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae21f5327b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp09d334qa                        0x0000564b50cc16e9 <unavailable> + 5865\n5    libc.so.6                          0x00002ae21fa28460 __libc_start_main + 245\n6    tmp09d334qa                        0x0000564b50cc12b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr.removeSubrange(0..<n)\n    arr.append(contentsOf: first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let firstPart = l[0..<n]\n    l.append(contentsOf: firstPart)\n    l.removeSubrange(0..<n)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    arr.removeFirst(n)\n    arr.append(contentsOf: first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    l.append(contentsOf: l[0..<n])\n    l.removeFirst(n)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return Array(second) + Array(first)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l.prefix(n)\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return Array(second) + Array(first)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l.prefix(n)\n    let last = l.suffix(l.count - n)\n    l = Array(last) + Array(first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let firstPart = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: firstPart)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    var n = n\n    if n < 0 {\n        n = l.count + n\n    }\n    let l1 = l[0..<n]\n    let l2 = l[n..<l.count]\n    l = Array(l2) + Array(l1)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let last = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = Array(second) + Array(first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l.prefix(n)\n    let second = l.suffix(l.count - n)\n    l = Array(second) + Array(first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    for i in n..<l.count {\n        result.append(l[i])\n    }\n    for i in 0..<n {\n        result.append(l[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = Array(l[0..<n])\n    let second = Array(l[n..<l.count])\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l.prefix(n)\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let firstPart = arr[0..<n]\n    arr.removeSubrange(0..<n)\n    arr.append(contentsOf: firstPart)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let firstPart = l[0..<n]\n    let secondPart = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: firstPart)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = Array(l[0..<n])\n    let second = Array(l[n..<l.count])\n    return second + first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return Array(second) + Array(first)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let firstPart = arr[0..<n]\n    arr.removeSubrange(0..<n)\n    arr.append(contentsOf: firstPart)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let firstPart = l[0..<n]\n    let secondPart = l[n..<l.count]\n    l = Array(secondPart) + Array(firstPart)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l.prefix(n)\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr.removeSubrange(0..<n)\n    arr.append(contentsOf: first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l = Array(second) + Array(first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first_part = Array(l[0..<n])\n    let second_part = Array(l[n..<l.count])\n    return second_part + first_part\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    var i = 0\n    while i < l.count {\n        if i < n {\n            newArr.append(l[i])\n        } else {\n            newArr.insert(l[i], at: 0)\n        }\n        i += 1\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "tmp03icmb8t/tmp03icmb8t.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac10be28c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac10bb1fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac10bb1f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac10bb1e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp03icmb8t                        0x00005626c91c35a9 <unavailable> + 5545\n5    libc.so.6                          0x00002ac10c014460 __libc_start_main + 245\n6    tmp03icmb8t                        0x00005626c91c3179 <unavailable> + 4473\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = l\n    let first = newArr[0..<n]\n    newArr.removeSubrange(0..<n)\n    newArr.append(contentsOf: first)\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeFirst(n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    arr = Array(second) + Array(first)\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var arr = l\n    let first = arr[0..<n]\n    let second = arr[n..<arr.count]\n    let newArr = Array(second) + Array(first)\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var newArr = [Int]()\n    for i in n..<l.count {\n        newArr.append(l[i])\n    }\n    for i in 0..<n {\n        newArr.append(l[i])\n    }\n    return newArr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var result = [Int]()\n    for i in n..<l.count {\n        result.append(l[i])\n    }\n    for i in 0..<n {\n        result.append(l[i])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    var l = l\n    let first = l[0..<n]\n    l.removeSubrange(0..<n)\n    l.append(contentsOf: first)\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to split a list at the nth eelment and add the first part to the end.\nfunc split_Arr(l: [Int], n: Int) -> [Int] {\n    let first = l[0..<n]\n    let second = l[n..<l.count]\n    return Array(second + first)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(split_Arr(l: [12, 10, 5, 6, 52, 36], n: 2) == [5, 6, 52, 36, 12, 10])\nassert(split_Arr(l: [1, 2, 3, 4], n: 1) == [2, 3, 4, 1])\nassert(split_Arr(l: [0, 1, 2, 3, 4, 5, 6, 7], n: 3) == [3, 4, 5, 6, 7, 0, 1, 2])",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}