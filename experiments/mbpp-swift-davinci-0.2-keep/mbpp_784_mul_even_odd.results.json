{
  "name": "mbpp_784_mul_even_odd",
  "language": "swift",
  "prompt": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                count += 1\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_n52pmil/tmp_n52pmil.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba119dbac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba119ab1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba119ab1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba119ab07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_n52pmil                        0x000055bb7f16662f <unavailable> + 5679\n5    libc.so.6                          0x00002ba119fa6460 __libc_start_main + 245\n6    tmp_n52pmil                        0x000055bb7f166169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even *= i\n        } else {\n            odd *= i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpkuq_or2l/tmpkuq_or2l.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b438c34bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b438c042b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b438c042988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b438c0417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkuq_or2l                        0x0000556d3bbf752e <unavailable> + 5422\n5    libc.so.6                          0x00002b438c537460 __libc_start_main + 245\n6    tmpkuq_or2l                        0x0000556d3bbf7169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_5llk0js/tmp_5llk0js.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac908051c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac907d48b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac907d48988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac907d477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_5llk0js                        0x000056280e5fe47e <unavailable> + 5246\n5    libc.so.6                          0x00002ac90823d460 __libc_start_main + 245\n6    tmp_5llk0js                        0x000056280e5fe0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    var product = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                product = even * odd\n                break\n            }\n        }\n        else {\n            odd = i\n            count += 1\n            if count == 2 {\n                product = even * odd\n                break\n            }\n        }\n    }\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpf65xqc38/tmpf65xqc38.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad2cd0adc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad2ccda4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad2ccda4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad2ccda37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf65xqc38                        0x000055e26de1052e <unavailable> + 5422\n5    libc.so.6                          0x00002ad2cd299460 __libc_start_main + 245\n6    tmpf65xqc38                        0x000055e26de10169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd_num = i\n                count += 1\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp7fqtz0xi/tmp7fqtz0xi.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba4a5850c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba4a5547b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba4a5547988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba4a55467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7fqtz0xi                        0x000055e29624d62f <unavailable> + 5679\n5    libc.so.6                          0x00002ba4a5a3c460 __libc_start_main + 245\n6    tmp7fqtz0xi                        0x000055e29624d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpy6j31277/tmpy6j31277.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad695ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6959c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6959c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6959c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy6j31277                        0x000055b181b2462f <unavailable> + 5679\n5    libc.so.6                          0x00002ad695eb7460 __libc_start_main + 245\n6    tmpy6j31277                        0x000055b181b24169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_odd_mul = 1\n    var even_count = 0\n    var odd_count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if even_count == 0 {\n                even_odd_mul *= i\n                even_count += 1\n            }\n        } else {\n            if odd_count == 0 {\n                even_odd_mul *= i\n                odd_count += 1\n            }\n        }\n    }\n    return even_odd_mul\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpy6j31277/tmpy6j31277.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad695ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6959c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6959c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6959c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy6j31277                        0x000055b181b2462f <unavailable> + 5679\n5    libc.so.6                          0x00002ad695eb7460 __libc_start_main + 245\n6    tmpy6j31277                        0x000055b181b24169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_5llk0js/tmp_5llk0js.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac908051c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac907d48b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac907d48988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac907d477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_5llk0js                        0x000056280e5fe47e <unavailable> + 5246\n5    libc.so.6                          0x00002ac90823d460 __libc_start_main + 245\n6    tmp_5llk0js                        0x000056280e5fe0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even = even * i\n        } else {\n            odd = odd * i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpqgn7lmwf/tmpqgn7lmwf.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab51d428c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab51d11fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab51d11f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab51d11e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqgn7lmwf                        0x00005648fc01f52e <unavailable> + 5422\n5    libc.so.6                          0x00002ab51d614460 __libc_start_main + 245\n6    tmpqgn7lmwf                        0x00005648fc01f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                break\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpyblp1b76/tmpyblp1b76.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba0f1ce2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba0f19d9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba0f19d9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba0f19d87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyblp1b76                        0x00005587498c962f <unavailable> + 5679\n5    libc.so.6                          0x00002ba0f1ece460 __libc_start_main + 245\n6    tmpyblp1b76                        0x00005587498c9169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                count += 1\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_n52pmil/tmp_n52pmil.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba119dbac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba119ab1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba119ab1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba119ab07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_n52pmil                        0x000055bb7f16662f <unavailable> + 5679\n5    libc.so.6                          0x00002ba119fa6460 __libc_start_main + 245\n6    tmp_n52pmil                        0x000055bb7f166169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmphycitirr/tmphycitirr.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8049baec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b80498a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b80498a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b80498a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphycitirr                        0x00005644e7b8662f <unavailable> + 5679\n5    libc.so.6                          0x00002b8049d9a460 __libc_start_main + 245\n6    tmphycitirr                        0x00005644e7b86169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                count += 1\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_n52pmil/tmp_n52pmil.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba119dbac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba119ab1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba119ab1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba119ab07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_n52pmil                        0x000055bb7f16662f <unavailable> + 5679\n5    libc.so.6                          0x00002ba119fa6460 __libc_start_main + 245\n6    tmp_n52pmil                        0x000055bb7f166169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpasttwy6k/tmpasttwy6k.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7793f68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7793c5fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7793c5f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7793c5e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpasttwy6k                        0x000056391f19662f <unavailable> + 5679\n5    libc.so.6                          0x00002b7794154460 __libc_start_main + 245\n6    tmpasttwy6k                        0x000056391f196169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmp5n4fjau8/tmp5n4fjau8.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b24c47f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b24c44e8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b24c44e8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b24c44e77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5n4fjau8                        0x00005640354f862f <unavailable> + 5679\n5    libc.so.6                          0x00002b24c49dd460 __libc_start_main + 245\n6    tmp5n4fjau8                        0x00005640354f8169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var i = 0\n    var j = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            break\n        }\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd_num = j\n            break\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpnkc7i2fx/tmpnkc7i2fx.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14ab659c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14ab350b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14ab350988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14ab34f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnkc7i2fx                        0x000056291d5b847e <unavailable> + 5246\n5    libc.so.6                          0x00002b14ab845460 __libc_start_main + 245\n6    tmpnkc7i2fx                        0x000056291d5b80b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpkfpabhqf/tmpkfpabhqf.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b145302bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1452d22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1452d22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1452d217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkfpabhqf                        0x000056006c82062f <unavailable> + 5679\n5    libc.so.6                          0x00002b1453217460 __libc_start_main + 245\n6    tmpkfpabhqf                        0x000056006c820169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpnkc7i2fx/tmpnkc7i2fx.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b14ab659c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b14ab350b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b14ab350988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b14ab34f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnkc7i2fx                        0x000056291d5b847e <unavailable> + 5246\n5    libc.so.6                          0x00002b14ab845460 __libc_start_main + 245\n6    tmpnkc7i2fx                        0x000056291d5b80b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    var flag1 = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        }\n        else {\n            if flag1 == 0 {\n                odd = i\n                flag1 = 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_odd_product = 1\n    var even_flag = true\n    var odd_flag = true\n    for i in list1 {\n        if i % 2 == 0 && even_flag {\n            even_odd_product *= i\n            even_flag = false\n        } else if i % 2 != 0 && odd_flag {\n            even_odd_product *= i\n            odd_flag = false\n        }\n        if !even_flag && !odd_flag {\n            break\n        }\n    }\n    return even_odd_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmp7evjrni6/tmp7evjrni6.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767e256c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767df4db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767df4d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767df4c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7evjrni6                        0x00005636a82ae52e <unavailable> + 5422\n5    libc.so.6                          0x00002b767e442460 __libc_start_main + 245\n6    tmp7evjrni6                        0x00005636a82ae169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpkfpabhqf/tmpkfpabhqf.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b145302bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1452d22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1452d22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1452d217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkfpabhqf                        0x000056006c82062f <unavailable> + 5679\n5    libc.so.6                          0x00002b1453217460 __libc_start_main + 245\n6    tmpkfpabhqf                        0x000056006c820169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                count += 1\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_n52pmil/tmp_n52pmil.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba119dbac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba119ab1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba119ab1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba119ab07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_n52pmil                        0x000055bb7f16662f <unavailable> + 5679\n5    libc.so.6                          0x00002ba119fa6460 __libc_start_main + 245\n6    tmp_n52pmil                        0x000055bb7f166169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpasttwy6k/tmpasttwy6k.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7793f68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7793c5fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7793c5f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7793c5e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpasttwy6k                        0x000056391f19662f <unavailable> + 5679\n5    libc.so.6                          0x00002b7794154460 __libc_start_main + 245\n6    tmpasttwy6k                        0x000056391f196169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 1\n    var odd_num = 1\n    var even_count = 0\n    var odd_count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num *= i\n            even_count += 1\n            if even_count == 2 {\n                break\n            }\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num *= i\n            odd_count += 1\n            if odd_count == 2 {\n                break\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpu6dj8j45/tmpu6dj8j45.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b24c353cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b24c3233b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b24c3233988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b24c32327b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6dj8j45                        0x0000562a8f89152e <unavailable> + 5422\n5    libc.so.6                          0x00002b24c3728460 __libc_start_main + 245\n6    tmpu6dj8j45                        0x0000562a8f891169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpasttwy6k/tmpasttwy6k.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7793f68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7793c5fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7793c5f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7793c5e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpasttwy6k                        0x000056391f19662f <unavailable> + 5679\n5    libc.so.6                          0x00002b7794154460 __libc_start_main + 245\n6    tmpasttwy6k                        0x000056391f196169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even = even * i\n        } else {\n            odd = odd * i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpqgn7lmwf/tmpqgn7lmwf.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab51d428c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab51d11fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab51d11f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab51d11e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqgn7lmwf                        0x00005648fc01f52e <unavailable> + 5422\n5    libc.so.6                          0x00002ab51d614460 __libc_start_main + 245\n6    tmpqgn7lmwf                        0x00005648fc01f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmps4_55lx0/tmps4_55lx0.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af561269c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af560f60b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af560f60988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af560f5f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps4_55lx0                        0x000055ee56f1662f <unavailable> + 5679\n5    libc.so.6                          0x00002af561455460 __libc_start_main + 245\n6    tmps4_55lx0                        0x000055ee56f16169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_5llk0js/tmp_5llk0js.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac908051c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac907d48b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac907d48988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac907d477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_5llk0js                        0x000056280e5fe47e <unavailable> + 5246\n5    libc.so.6                          0x00002ac90823d460 __libc_start_main + 245\n6    tmp_5llk0js                        0x000056280e5fe0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_index = 0\n    var odd_index = 0\n    var even_num = 0\n    var odd_num = 0\n    var mul = 0\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even_num = list1[i]\n            even_index = i\n            break\n        }\n    }\n    for i in 0..<list1.count {\n        if list1[i] % 2 != 0 {\n            odd_num = list1[i]\n            odd_index = i\n            break\n        }\n    }\n    if even_index < odd_index {\n        mul = even_num * odd_num\n    }\n    else {\n        mul = odd_num * even_num\n    }\n    return mul\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = even * i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = odd * i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmp2dwhpo0d/tmp2dwhpo0d.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7b7f7d5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7b7f4ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7b7f4cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7b7f4cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2dwhpo0d                        0x0000556ad29a952e <unavailable> + 5422\n5    libc.so.6                          0x00002b7b7f9c1460 __libc_start_main + 245\n6    tmp2dwhpo0d                        0x0000556ad29a9169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpasttwy6k/tmpasttwy6k.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7793f68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7793c5fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7793c5f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7793c5e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpasttwy6k                        0x000056391f19662f <unavailable> + 5679\n5    libc.so.6                          0x00002b7794154460 __libc_start_main + 245\n6    tmpasttwy6k                        0x000056391f196169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpvrium78v/tmpvrium78v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b001acabc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b001a9a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b001a9a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b001a9a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvrium78v                        0x000055956151f62f <unavailable> + 5679\n5    libc.so.6                          0x00002b001ae97460 __libc_start_main + 245\n6    tmpvrium78v                        0x000055956151f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpyb7w51zg/tmpyb7w51zg.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae7b3433c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae7b312ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae7b312a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae7b31297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyb7w51zg                        0x000055d34062147e <unavailable> + 5246\n5    libc.so.6                          0x00002ae7b361f460 __libc_start_main + 245\n6    tmpyb7w51zg                        0x000055d3406210b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_odd_product = 1\n    var even_count = 0\n    var odd_count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if even_count == 0 {\n                even_odd_product *= i\n                even_count += 1\n            }\n        } else {\n            if odd_count == 0 {\n                even_odd_product *= i\n                odd_count += 1\n            }\n        }\n    }\n    return even_odd_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_count = 0\n    var odd_count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            even_count += 1\n            if even_count == 1 {\n                break\n            }\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            odd_count += 1\n            if odd_count == 1 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if count == 0 {\n            even = i\n            count += 1\n        } else if count == 1 {\n            odd = i\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpujgqneyb/tmpujgqneyb.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48a8cd4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48a89cbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b48a89cb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48a89ca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpujgqneyb                        0x000056056f7ee49e <unavailable> + 5278\n5    libc.so.6                          0x00002b48a8ec0460 __libc_start_main + 245\n6    tmpujgqneyb                        0x000056056f7ee0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even = even * i\n        } else {\n            odd = odd * i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpqgn7lmwf/tmpqgn7lmwf.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab51d428c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab51d11fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab51d11f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab51d11e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqgn7lmwf                        0x00005648fc01f52e <unavailable> + 5422\n5    libc.so.6                          0x00002ab51d614460 __libc_start_main + 245\n6    tmpqgn7lmwf                        0x00005648fc01f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                count += 1\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_n52pmil/tmp_n52pmil.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba119dbac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba119ab1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba119ab1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba119ab07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_n52pmil                        0x000055bb7f16662f <unavailable> + 5679\n5    libc.so.6                          0x00002ba119fa6460 __libc_start_main + 245\n6    tmp_n52pmil                        0x000055bb7f166169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpasttwy6k/tmpasttwy6k.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7793f68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7793c5fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7793c5f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7793c5e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpasttwy6k                        0x000056391f19662f <unavailable> + 5679\n5    libc.so.6                          0x00002b7794154460 __libc_start_main + 245\n6    tmpasttwy6k                        0x000056391f196169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                count += 1\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_n52pmil/tmp_n52pmil.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba119dbac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba119ab1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba119ab1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba119ab07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_n52pmil                        0x000055bb7f16662f <unavailable> + 5679\n5    libc.so.6                          0x00002ba119fa6460 __libc_start_main + 245\n6    tmp_n52pmil                        0x000055bb7f166169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var even_count = 0\n    var odd_count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if even_count == 0 {\n                even = i\n                even_count += 1\n            }\n        } else {\n            if odd_count == 0 {\n                odd = i\n                odd_count += 1\n            }\n        }\n        if even_count == 1 && odd_count == 1 {\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count = count + 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count = count + 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmplikbv4d3/tmplikbv4d3.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9132d94c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9132a8bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9132a8b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9132a8a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplikbv4d3                        0x000055e6ed63762f <unavailable> + 5679\n5    libc.so.6                          0x00002b9132f80460 __libc_start_main + 245\n6    tmplikbv4d3                        0x000055e6ed637169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even = even * i\n        } else {\n            odd = odd * i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpqgn7lmwf/tmpqgn7lmwf.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab51d428c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab51d11fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab51d11f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab51d11e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqgn7lmwf                        0x00005648fc01f52e <unavailable> + 5422\n5    libc.so.6                          0x00002ab51d614460 __libc_start_main + 245\n6    tmpqgn7lmwf                        0x00005648fc01f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even *= i\n        } else {\n            odd *= i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpkuq_or2l/tmpkuq_or2l.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b438c34bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b438c042b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b438c042988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b438c0417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkuq_or2l                        0x0000556d3bbf752e <unavailable> + 5422\n5    libc.so.6                          0x00002b438c537460 __libc_start_main + 245\n6    tmpkuq_or2l                        0x0000556d3bbf7169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpasttwy6k/tmpasttwy6k.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7793f68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7793c5fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7793c5f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7793c5e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpasttwy6k                        0x000056391f19662f <unavailable> + 5679\n5    libc.so.6                          0x00002b7794154460 __libc_start_main + 245\n6    tmpasttwy6k                        0x000056391f196169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var product = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    product = even * odd\n    return product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpvrium78v/tmpvrium78v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b001acabc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b001a9a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b001a9a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b001a9a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvrium78v                        0x000055956151f62f <unavailable> + 5679\n5    libc.so.6                          0x00002b001ae97460 __libc_start_main + 245\n6    tmpvrium78v                        0x000055956151f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                break\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpyblp1b76/tmpyblp1b76.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba0f1ce2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba0f19d9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba0f19d9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba0f19d87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyblp1b76                        0x00005587498c962f <unavailable> + 5679\n5    libc.so.6                          0x00002ba0f1ece460 __libc_start_main + 245\n6    tmpyblp1b76                        0x00005587498c9169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_5llk0js/tmp_5llk0js.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac908051c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac907d48b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac907d48988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac907d477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_5llk0js                        0x000056280e5fe47e <unavailable> + 5246\n5    libc.so.6                          0x00002ac90823d460 __libc_start_main + 245\n6    tmp_5llk0js                        0x000056280e5fe0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpkfpabhqf/tmpkfpabhqf.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b145302bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1452d22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1452d22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1452d217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkfpabhqf                        0x000056006c82062f <unavailable> + 5679\n5    libc.so.6                          0x00002b1453217460 __libc_start_main + 245\n6    tmpkfpabhqf                        0x000056006c820169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpe_aqqrw7/tmpe_aqqrw7.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0916e5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0913dcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0913dc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0913db7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe_aqqrw7                        0x00005623af89956e <unavailable> + 5486\n5    libc.so.6                          0x00002ab0918d1460 __libc_start_main + 245\n6    tmpe_aqqrw7                        0x00005623af8991a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpvm0vc0jm/tmpvm0vc0jm.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea0a006c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea09cfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea09cfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea09cfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvm0vc0jm                        0x0000558f9b6cb56e <unavailable> + 5486\n5    libc.so.6                          0x00002aea0a1f2460 __libc_start_main + 245\n6    tmpvm0vc0jm                        0x0000558f9b6cb1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_count = 0\n    var odd_count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            even_count += 1\n            if even_count == 2 {\n                break\n            }\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            odd_count += 1\n            if odd_count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmp67s5bemo/tmp67s5bemo.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ff4fbac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ff4cb1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ff4cb1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ff4cb07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp67s5bemo                        0x000055b4fb61152e <unavailable> + 5422\n5    libc.so.6                          0x00002b7ff51a6460 __libc_start_main + 245\n6    tmp67s5bemo                        0x000055b4fb611169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even_num * odd_num\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_product = 1\n    var odd_product = 1\n    var count = 0\n    for i in list1 {\n        if count == 0 {\n            even_product *= i\n            count += 1\n        } else if count == 1 {\n            odd_product *= i\n            count -= 1\n        }\n    }\n    return even_product * odd_product\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmp1zfqb1pr/tmp1zfqb1pr.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8bbefb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8bbecabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8bbecab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8bbecaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1zfqb1pr                        0x000055dbdb2c849e <unavailable> + 5278\n5    libc.so.6                          0x00002b8bbf1a0460 __libc_start_main + 245\n6    tmp1zfqb1pr                        0x000055dbdb2c80d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even: Int = 1\n    var odd: Int = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            } else if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpjwq7s56q/tmpjwq7s56q.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aaec556fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aaec5266b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aaec5266988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aaec52657b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjwq7s56q                        0x0000559d5254f52e <unavailable> + 5422\n5    libc.so.6                          0x00002aaec575b460 __libc_start_main + 245\n6    tmpjwq7s56q                        0x0000559d5254f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if count == 0 {\n            even = i\n            count += 1\n        } else if count == 1 {\n            odd = i\n            count += 1\n        } else {\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpx0u1cmd7/tmpx0u1cmd7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac2e5198c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac2e4e8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac2e4e8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac2e4e8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx0u1cmd7                        0x000055d20a90649e <unavailable> + 5278\n5    libc.so.6                          0x00002ac2e5384460 __libc_start_main + 245\n6    tmpx0u1cmd7                        0x000055d20a9060d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for item in list1 {\n        if item % 2 == 0 {\n            if count == 0 {\n                even = item\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = item\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpflgu836q/tmpflgu836q.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad9fee08c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad9feaffb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad9feaff988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad9feafe7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpflgu836q                        0x000055c755cd662f <unavailable> + 5679\n5    libc.so.6                          0x00002ad9feff4460 __libc_start_main + 245\n6    tmpflgu836q                        0x000055c755cd6169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if count == 0 {\n            even = i\n            count += 1\n        } else if count == 1 {\n            odd = i\n            count += 1\n        } else {\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpx0u1cmd7/tmpx0u1cmd7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac2e5198c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac2e4e8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac2e4e8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac2e4e8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx0u1cmd7                        0x000055d20a90649e <unavailable> + 5278\n5    libc.so.6                          0x00002ac2e5384460 __libc_start_main + 245\n6    tmpx0u1cmd7                        0x000055d20a9060d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        }\n        else {\n            odd = odd * list1[i]\n        }\n        i = i + 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpz8b7t06n/tmpz8b7t06n.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2489a14c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b248970bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b248970b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b248970a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz8b7t06n                        0x000055853640747e <unavailable> + 5246\n5    libc.so.6                          0x00002b2489c00460 __libc_start_main + 245\n6    tmpz8b7t06n                        0x00005585364070b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even_odd *= value\n        }\n    }\n    return even_odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpnzcwvsd9/tmpnzcwvsd9.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade1df03c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade1dbfab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade1dbfa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade1dbf97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnzcwvsd9                        0x00005635facfc5de <unavailable> + 5598\n5    libc.so.6                          0x00002ade1e0ef460 __libc_start_main + 245\n6    tmpnzcwvsd9                        0x00005635facfc219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n        if count == 2 {\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpzxnttdu0/tmpzxnttdu0.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b104541ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1045111b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1045111988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b10451107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzxnttdu0                        0x0000564b8b37162f <unavailable> + 5679\n5    libc.so.6                          0x00002b1045606460 __libc_start_main + 245\n6    tmpzxnttdu0                        0x0000564b8b371169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even *= i\n        } else {\n            odd *= i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpkuq_or2l/tmpkuq_or2l.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b438c34bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b438c042b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b438c042988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b438c0417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkuq_or2l                        0x0000556d3bbf752e <unavailable> + 5422\n5    libc.so.6                          0x00002b438c537460 __libc_start_main + 245\n6    tmpkuq_or2l                        0x0000556d3bbf7169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    var j = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if count == 0 {\n            even = i\n            count += 1\n        } else if count == 1 {\n            odd = i\n            count += 1\n        } else {\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpkgnsk1cq/tmpkgnsk1cq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b08a073cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b08a0433b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b08a0433988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b08a04327b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkgnsk1cq                        0x000055e44a07849e <unavailable> + 5278\n5    libc.so.6                          0x00002b08a0928460 __libc_start_main + 245\n6    tmpkgnsk1cq                        0x000055e44a0780d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_odd_mul = 1\n    var even_odd_flag = 0\n    for i in list1 {\n        if even_odd_flag == 0 {\n            if i % 2 == 0 {\n                even_odd_mul *= i\n                even_odd_flag = 1\n            }\n        } else {\n            if i % 2 != 0 {\n                even_odd_mul *= i\n                even_odd_flag = 0\n            }\n        }\n    }\n    return even_odd_mul\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpwhvifswg/tmpwhvifswg.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade053afc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade050a6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade050a6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade050a57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwhvifswg                        0x000055b40d13752e <unavailable> + 5422\n5    libc.so.6                          0x00002ade0559b460 __libc_start_main + 245\n6    tmpwhvifswg                        0x000055b40d137169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpvrium78v/tmpvrium78v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b001acabc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b001a9a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b001a9a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b001a9a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvrium78v                        0x000055956151f62f <unavailable> + 5679\n5    libc.so.6                          0x00002b001ae97460 __libc_start_main + 245\n6    tmpvrium78v                        0x000055956151f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpvrium78v/tmpvrium78v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b001acabc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b001a9a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b001a9a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b001a9a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvrium78v                        0x000055956151f62f <unavailable> + 5679\n5    libc.so.6                          0x00002b001ae97460 __libc_start_main + 245\n6    tmpvrium78v                        0x000055956151f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpvrium78v/tmpvrium78v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b001acabc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b001a9a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b001a9a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b001a9a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvrium78v                        0x000055956151f62f <unavailable> + 5679\n5    libc.so.6                          0x00002b001ae97460 __libc_start_main + 245\n6    tmpvrium78v                        0x000055956151f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmp7evjrni6/tmp7evjrni6.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767e256c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767df4db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767df4d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767df4c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7evjrni6                        0x00005636a82ae52e <unavailable> + 5422\n5    libc.so.6                          0x00002b767e442460 __libc_start_main + 245\n6    tmp7evjrni6                        0x00005636a82ae169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    var j = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            i += 1\n            break\n        }\n        i += 1\n    }\n    while j < list1.count {\n        if list1[j] % 2 != 0 {\n            odd = list1[j]\n            j += 1\n            break\n        }\n        j += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_odd_mul = 1\n    var even_count = 0\n    var odd_count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if even_count == 0 {\n                even_odd_mul = even_odd_mul * i\n                even_count += 1\n            }\n        } else {\n            if odd_count == 0 {\n                even_odd_mul = even_odd_mul * i\n                odd_count += 1\n            }\n        }\n    }\n    return even_odd_mul\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd_num = i\n                count += 1\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp7fqtz0xi/tmp7fqtz0xi.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba4a5850c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba4a5547b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba4a5547988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba4a55467b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7fqtz0xi                        0x000055e29624d62f <unavailable> + 5679\n5    libc.so.6                          0x00002ba4a5a3c460 __libc_start_main + 245\n6    tmp7fqtz0xi                        0x000055e29624d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_5llk0js/tmp_5llk0js.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac908051c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac907d48b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac907d48988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac907d477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_5llk0js                        0x000056280e5fe47e <unavailable> + 5246\n5    libc.so.6                          0x00002ac90823d460 __libc_start_main + 245\n6    tmp_5llk0js                        0x000056280e5fe0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpy6j31277/tmpy6j31277.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad695ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6959c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6959c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6959c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy6j31277                        0x000055b181b2462f <unavailable> + 5679\n5    libc.so.6                          0x00002ad695eb7460 __libc_start_main + 245\n6    tmpy6j31277                        0x000055b181b24169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    for item in list1 {\n        if i % 2 == 0 {\n            even *= item\n        } else {\n            odd *= item\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpzq21xw3w/tmpzq21xw3w.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab193006c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab192cfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab192cfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab192cfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzq21xw3w                        0x0000559c03c3052e <unavailable> + 5422\n5    libc.so.6                          0x00002ab1931f2460 __libc_start_main + 245\n6    tmpzq21xw3w                        0x0000559c03c30169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpasttwy6k/tmpasttwy6k.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7793f68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7793c5fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7793c5f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7793c5e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpasttwy6k                        0x000056391f19662f <unavailable> + 5679\n5    libc.so.6                          0x00002b7794154460 __libc_start_main + 245\n6    tmpasttwy6k                        0x000056391f196169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpl9u2mx_y/tmpl9u2mx_y.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b633a5c2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b633a2b9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b633a2b9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b633a2b87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl9u2mx_y                        0x00005602ace4252e <unavailable> + 5422\n5    libc.so.6                          0x00002b633a7ae460 __libc_start_main + 245\n6    tmpl9u2mx_y                        0x00005602ace42169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpvrium78v/tmpvrium78v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b001acabc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b001a9a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b001a9a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b001a9a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvrium78v                        0x000055956151f62f <unavailable> + 5679\n5    libc.so.6                          0x00002b001ae97460 __libc_start_main + 245\n6    tmpvrium78v                        0x000055956151f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpasttwy6k/tmpasttwy6k.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7793f68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7793c5fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7793c5f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7793c5e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpasttwy6k                        0x000056391f19662f <unavailable> + 5679\n5    libc.so.6                          0x00002b7794154460 __libc_start_main + 245\n6    tmpasttwy6k                        0x000056391f196169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 1 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 1 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_odd_mul = 1\n    var even_count = 0\n    var odd_count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_count += 1\n            if even_count == 2 {\n                even_odd_mul *= i\n                break\n            }\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_count += 1\n            if odd_count == 1 {\n                even_odd_mul *= i\n                break\n            }\n        }\n    }\n    return even_odd_mul\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmptqkiky0r/tmptqkiky0r.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5429326c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b542901db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b542901d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b542901c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptqkiky0r                        0x0000560ab64ba52e <unavailable> + 5422\n5    libc.so.6                          0x00002b5429512460 __libc_start_main + 245\n6    tmptqkiky0r                        0x0000560ab64ba169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpasttwy6k/tmpasttwy6k.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7793f68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7793c5fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7793c5f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7793c5e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpasttwy6k                        0x000056391f19662f <unavailable> + 5679\n5    libc.so.6                          0x00002b7794154460 __libc_start_main + 245\n6    tmpasttwy6k                        0x000056391f196169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    var j = 0\n    while i < list1.count && even == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        }\n        i += 1\n    }\n    while j < list1.count && odd == 0 {\n        if list1[j] % 2 != 0 {\n            odd = list1[j]\n        }\n        j += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, element) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= element\n        } else {\n            odd *= element\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmp4mdc7cgf/tmp4mdc7cgf.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb30763c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb3045ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb3045a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb304597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4mdc7cgf                        0x000055fdebb075de <unavailable> + 5598\n5    libc.so.6                          0x00002aeb3094f460 __libc_start_main + 245\n6    tmp4mdc7cgf                        0x000055fdebb07219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpvrium78v/tmpvrium78v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b001acabc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b001a9a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b001a9a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b001a9a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvrium78v                        0x000055956151f62f <unavailable> + 5679\n5    libc.so.6                          0x00002b001ae97460 __libc_start_main + 245\n6    tmpvrium78v                        0x000055956151f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even *= i\n        } else {\n            odd *= i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpkuq_or2l/tmpkuq_or2l.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b438c34bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b438c042b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b438c042988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b438c0417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkuq_or2l                        0x0000556d3bbf752e <unavailable> + 5422\n5    libc.so.6                          0x00002b438c537460 __libc_start_main + 245\n6    tmpkuq_or2l                        0x0000556d3bbf7169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpyb7w51zg/tmpyb7w51zg.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae7b3433c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae7b312ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae7b312a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae7b31297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyb7w51zg                        0x000055d34062147e <unavailable> + 5246\n5    libc.so.6                          0x00002ae7b361f460 __libc_start_main + 245\n6    tmpyb7w51zg                        0x000055d3406210b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n        i = i + 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpakrno74p/tmpakrno74p.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9e11a8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9e0e9fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9e0e9f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9e0e9e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpakrno74p                        0x000055837518947e <unavailable> + 5246\n5    libc.so.6                          0x00002af9e1394460 __libc_start_main + 245\n6    tmpakrno74p                        0x00005583751890b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpkfpabhqf/tmpkfpabhqf.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b145302bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1452d22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1452d22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1452d217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkfpabhqf                        0x000056006c82062f <unavailable> + 5679\n5    libc.so.6                          0x00002b1453217460 __libc_start_main + 245\n6    tmpkfpabhqf                        0x000056006c820169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpkfpabhqf/tmpkfpabhqf.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b145302bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1452d22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1452d22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1452d217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkfpabhqf                        0x000056006c82062f <unavailable> + 5679\n5    libc.so.6                          0x00002b1453217460 __libc_start_main + 245\n6    tmpkfpabhqf                        0x000056006c820169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_5llk0js/tmp_5llk0js.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac908051c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac907d48b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac907d48988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac907d477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_5llk0js                        0x000056280e5fe47e <unavailable> + 5246\n5    libc.so.6                          0x00002ac90823d460 __libc_start_main + 245\n6    tmp_5llk0js                        0x000056280e5fe0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpvm0vc0jm/tmpvm0vc0jm.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea0a006c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea09cfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea09cfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea09cfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvm0vc0jm                        0x0000558f9b6cb56e <unavailable> + 5486\n5    libc.so.6                          0x00002aea0a1f2460 __libc_start_main + 245\n6    tmpvm0vc0jm                        0x0000558f9b6cb1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpvm0vc0jm/tmpvm0vc0jm.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea0a006c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea09cfdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea09cfd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea09cfc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvm0vc0jm                        0x0000558f9b6cb56e <unavailable> + 5486\n5    libc.so.6                          0x00002aea0a1f2460 __libc_start_main + 245\n6    tmpvm0vc0jm                        0x0000558f9b6cb1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_5llk0js/tmp_5llk0js.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac908051c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac907d48b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac907d48988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac907d477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_5llk0js                        0x000056280e5fe47e <unavailable> + 5246\n5    libc.so.6                          0x00002ac90823d460 __libc_start_main + 245\n6    tmp_5llk0js                        0x000056280e5fe0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmp7evjrni6/tmp7evjrni6.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767e256c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767df4db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767df4d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767df4c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7evjrni6                        0x00005636a82ae52e <unavailable> + 5422\n5    libc.so.6                          0x00002b767e442460 __libc_start_main + 245\n6    tmp7evjrni6                        0x00005636a82ae169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even = even * i\n        }\n        else {\n            odd = odd * i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpm0u6glvx/tmpm0u6glvx.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9438776c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b943846db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b943846d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b943846c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm0u6glvx                        0x000055d40c72652e <unavailable> + 5422\n5    libc.so.6                          0x00002b9438962460 __libc_start_main + 245\n6    tmpm0u6glvx                        0x000055d40c726169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpasttwy6k/tmpasttwy6k.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7793f68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7793c5fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7793c5f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7793c5e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpasttwy6k                        0x000056391f19662f <unavailable> + 5679\n5    libc.so.6                          0x00002b7794154460 __libc_start_main + 245\n6    tmpasttwy6k                        0x000056391f196169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even_num * odd_num\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpy6j31277/tmpy6j31277.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad695ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6959c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6959c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6959c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy6j31277                        0x000055b181b2462f <unavailable> + 5679\n5    libc.so.6                          0x00002ad695eb7460 __libc_start_main + 245\n6    tmpy6j31277                        0x000055b181b24169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpasttwy6k/tmpasttwy6k.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7793f68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7793c5fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7793c5f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7793c5e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpasttwy6k                        0x000056391f19662f <unavailable> + 5679\n5    libc.so.6                          0x00002b7794154460 __libc_start_main + 245\n6    tmpasttwy6k                        0x000056391f196169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = even * list1[i]\n        } else {\n            odd = odd * list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpyb7w51zg/tmpyb7w51zg.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae7b3433c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae7b312ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae7b312a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae7b31297b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyb7w51zg                        0x000055d34062147e <unavailable> + 5246\n5    libc.so.6                          0x00002ae7b361f460 __libc_start_main + 245\n6    tmpyb7w51zg                        0x000055d3406210b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even *= i\n        } else {\n            odd *= i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpkuq_or2l/tmpkuq_or2l.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b438c34bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b438c042b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b438c042988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b438c0417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkuq_or2l                        0x0000556d3bbf752e <unavailable> + 5422\n5    libc.so.6                          0x00002b438c537460 __libc_start_main + 245\n6    tmpkuq_or2l                        0x0000556d3bbf7169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpvrium78v/tmpvrium78v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b001acabc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b001a9a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b001a9a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b001a9a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvrium78v                        0x000055956151f62f <unavailable> + 5679\n5    libc.so.6                          0x00002b001ae97460 __libc_start_main + 245\n6    tmpvrium78v                        0x000055956151f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if count == 0 {\n            even = i\n            count += 1\n        }\n        else if count == 1 {\n            odd = i\n            count += 1\n        }\n        else {\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpjouq40me/tmpjouq40me.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff0be64c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff0bb5bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff0bb5b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff0bb5a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjouq40me                        0x000055b294dca49e <unavailable> + 5278\n5    libc.so.6                          0x00002aff0c050460 __libc_start_main + 245\n6    tmpjouq40me                        0x000055b294dca0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_odd_mul = 1\n    var even_flag = true\n    for num in list1 {\n        if num % 2 == 0 && even_flag {\n            even_odd_mul *= num\n            even_flag = false\n        } else if num % 2 != 0 && !even_flag {\n            even_odd_mul *= num\n            even_flag = true\n        }\n    }\n    return even_odd_mul\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpvscxgplo/tmpvscxgplo.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af308373c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af30806ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af30806a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af3080697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvscxgplo                        0x00005564f80a552e <unavailable> + 5422\n5    libc.so.6                          0x00002af30855f460 __libc_start_main + 245\n6    tmpvscxgplo                        0x00005564f80a5169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for num in list1 {\n        if num % 2 == 0 {\n            if count == 0 {\n                even_num = num\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd_num = num\n                break\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmph3dvf4l4/tmph3dvf4l4.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d12732c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d12429b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d12429988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d124287b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3dvf4l4                        0x000055af944a662f <unavailable> + 5679\n5    libc.so.6                          0x00002b1d1291e460 __libc_start_main + 245\n6    tmph3dvf4l4                        0x000055af944a6169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    for item in list1 {\n        if item % 2 == 0 {\n            even = item\n            break\n        }\n        i += 1\n    }\n    for j in i..<list1.count {\n        if list1[j] % 2 != 0 {\n            odd = list1[j]\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmp4gx4tf_b/tmp4gx4tf_b.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b98b277bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b98b2472b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b98b2472988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b98b24717b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4gx4tf_b                        0x000055a3513ae7cf <unavailable> + 6095\n5    libc.so.6                          0x00002b98b2967460 __libc_start_main + 245\n6    tmp4gx4tf_b                        0x000055a3513ae309 <unavailable> + 4873\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpy6j31277/tmpy6j31277.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad695ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6959c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6959c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6959c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy6j31277                        0x000055b181b2462f <unavailable> + 5679\n5    libc.so.6                          0x00002ad695eb7460 __libc_start_main + 245\n6    tmpy6j31277                        0x000055b181b24169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmp5n4fjau8/tmp5n4fjau8.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b24c47f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b24c44e8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b24c44e8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b24c44e77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5n4fjau8                        0x00005640354f862f <unavailable> + 5679\n5    libc.so.6                          0x00002b24c49dd460 __libc_start_main + 245\n6    tmp5n4fjau8                        0x00005640354f8169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even *= i\n        } else {\n            odd *= i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpkuq_or2l/tmpkuq_or2l.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b438c34bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b438c042b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b438c042988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b438c0417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkuq_or2l                        0x0000556d3bbf752e <unavailable> + 5422\n5    libc.so.6                          0x00002b438c537460 __libc_start_main + 245\n6    tmpkuq_or2l                        0x0000556d3bbf7169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 1\n    var odd_num = 1\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even_num *= list1[i]\n        } else {\n            odd_num *= list1[i]\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpx8fbmske/tmpx8fbmske.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba47d351c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba47d048b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba47d048988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba47d0477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx8fbmske                        0x0000561dcc9dd56e <unavailable> + 5486\n5    libc.so.6                          0x00002ba47d53d460 __libc_start_main + 245\n6    tmpx8fbmske                        0x0000561dcc9dd1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 1\n    var odd_num = 1\n    for (i, num) in list1.enumerated() {\n        if i % 2 == 0 {\n            even_num *= num\n        } else {\n            odd_num *= num\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpxan8_rr4/tmpxan8_rr4.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7c11f37c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7c11c2eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7c11c2e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7c11c2d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxan8_rr4                        0x0000555dd86a25de <unavailable> + 5598\n5    libc.so.6                          0x00002b7c12123460 __libc_start_main + 245\n6    tmpxan8_rr4                        0x0000555dd86a2219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var i = 0\n    var j = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even_num = list1[i]\n            i += 1\n            break\n        }\n        i += 1\n    }\n    while j < list1.count {\n        if list1[j] % 2 != 0 {\n            odd_num = list1[j]\n            j += 1\n            break\n        }\n        j += 1\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpy6j31277/tmpy6j31277.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad695ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6959c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6959c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6959c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy6j31277                        0x000055b181b2462f <unavailable> + 5679\n5    libc.so.6                          0x00002ad695eb7460 __libc_start_main + 245\n6    tmpy6j31277                        0x000055b181b24169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpkfpabhqf/tmpkfpabhqf.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b145302bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1452d22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1452d22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1452d217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkfpabhqf                        0x000056006c82062f <unavailable> + 5679\n5    libc.so.6                          0x00002b1453217460 __libc_start_main + 245\n6    tmpkfpabhqf                        0x000056006c820169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    var j = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            i += 1\n            break\n        }\n        i += 1\n    }\n    while j < list1.count {\n        if list1[j] % 2 != 0 {\n            odd = list1[j]\n            j += 1\n            break\n        }\n        j += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpvrium78v/tmpvrium78v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b001acabc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b001a9a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b001a9a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b001a9a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvrium78v                        0x000055956151f62f <unavailable> + 5679\n5    libc.so.6                          0x00002b001ae97460 __libc_start_main + 245\n6    tmpvrium78v                        0x000055956151f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmp5n4fjau8/tmp5n4fjau8.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b24c47f1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b24c44e8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b24c44e8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b24c44e77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5n4fjau8                        0x00005640354f862f <unavailable> + 5679\n5    libc.so.6                          0x00002b24c49dd460 __libc_start_main + 245\n6    tmp5n4fjau8                        0x00005640354f8169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for item in list1 {\n        if item % 2 == 0 {\n            if count == 0 {\n                even = item\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = item\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpv1wpp4u9/tmpv1wpp4u9.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aacfec4ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aacfe945b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aacfe945988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aacfe9447b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv1wpp4u9                        0x00005633ec07e62f <unavailable> + 5679\n5    libc.so.6                          0x00002aacfee3a460 __libc_start_main + 245\n6    tmpv1wpp4u9                        0x00005633ec07e169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmp7evjrni6/tmp7evjrni6.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767e256c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767df4db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767df4d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767df4c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7evjrni6                        0x00005636a82ae52e <unavailable> + 5422\n5    libc.so.6                          0x00002b767e442460 __libc_start_main + 245\n6    tmp7evjrni6                        0x00005636a82ae169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_odd_mul = 1\n    var even_count = 0\n    var odd_count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if even_count == 0 {\n                even_odd_mul *= i\n                even_count += 1\n            }\n        } else {\n            if odd_count == 0 {\n                even_odd_mul *= i\n                odd_count += 1\n            }\n        }\n        if even_count == 1 && odd_count == 1 {\n            break\n        }\n    }\n    return even_odd_mul\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for (index, value) in list1.enumerated() {\n        if index % 2 == 0 {\n            even *= value\n        } else {\n            odd *= value\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpjztwd8c0/tmpjztwd8c0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8922c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad891fc0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad891fc0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad891fbf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjztwd8c0                        0x000056548c4d55de <unavailable> + 5598\n5    libc.so.6                          0x00002ad8924b5460 __libc_start_main + 245\n6    tmpjztwd8c0                        0x000056548c4d5219 <unavailable> + 4633\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_odd_mul = 1\n    var even_count = 0\n    var odd_count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if even_count == 0 {\n                even_odd_mul *= i\n                even_count += 1\n            }\n        } else {\n            if odd_count == 0 {\n                even_odd_mul *= i\n                odd_count += 1\n            }\n        }\n        if even_count == 1 && odd_count == 1 {\n            break\n        }\n    }\n    return even_odd_mul\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpy6j31277/tmpy6j31277.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad695ccbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad6959c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad6959c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad6959c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpy6j31277                        0x000055b181b2462f <unavailable> + 5679\n5    libc.so.6                          0x00002ad695eb7460 __libc_start_main + 245\n6    tmpy6j31277                        0x000055b181b24169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even_num = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd_num = i\n                count += 1\n            }\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_n52pmil/tmp_n52pmil.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba119dbac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba119ab1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba119ab1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba119ab07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_n52pmil                        0x000055bb7f16662f <unavailable> + 5679\n5    libc.so.6                          0x00002ba119fa6460 __libc_start_main + 245\n6    tmp_n52pmil                        0x000055bb7f166169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpkfpabhqf/tmpkfpabhqf.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b145302bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1452d22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1452d22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1452d217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkfpabhqf                        0x000056006c82062f <unavailable> + 5679\n5    libc.so.6                          0x00002b1453217460 __libc_start_main + 245\n6    tmpkfpabhqf                        0x000056006c820169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even *= i\n        } else {\n            odd *= i\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpkuq_or2l/tmpkuq_or2l.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b438c34bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b438c042b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b438c042988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b438c0417b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkuq_or2l                        0x0000556d3bbf752e <unavailable> + 5422\n5    libc.so.6                          0x00002b438c537460 __libc_start_main + 245\n6    tmpkuq_or2l                        0x0000556d3bbf7169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if count == 0 {\n            even = i\n            count += 1\n        } else if count == 1 {\n            odd = i\n            count += 1\n        } else {\n            break\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpx0u1cmd7/tmpx0u1cmd7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac2e5198c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac2e4e8fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac2e4e8f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac2e4e8e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx0u1cmd7                        0x000055d20a90649e <unavailable> + 5278\n5    libc.so.6                          0x00002ac2e5384460 __libc_start_main + 245\n6    tmpx0u1cmd7                        0x000055d20a9060d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpvrium78v/tmpvrium78v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b001acabc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b001a9a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b001a9a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b001a9a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvrium78v                        0x000055956151f62f <unavailable> + 5679\n5    libc.so.6                          0x00002b001ae97460 __libc_start_main + 245\n6    tmpvrium78v                        0x000055956151f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        } else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "tmpvrium78v/tmpvrium78v.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b001acabc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b001a9a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b001a9a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b001a9a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvrium78v                        0x000055956151f62f <unavailable> + 5679\n5    libc.so.6                          0x00002b001ae97460 __libc_start_main + 245\n6    tmpvrium78v                        0x000055956151f169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpl4dbrdwp/tmpl4dbrdwp.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0665a27c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b066571eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b066571e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b066571d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl4dbrdwp                        0x0000564bbb49462f <unavailable> + 5679\n5    libc.so.6                          0x00002b0665c13460 __libc_start_main + 245\n6    tmpl4dbrdwp                        0x0000564bbb494169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i\n                count += 1\n            }\n        }\n        else {\n            if count == 1 {\n                odd = i\n                count += 1\n            }\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmp94q7_jzz/tmp94q7_jzz.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab06a496c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab06a18db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab06a18d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab06a18c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp94q7_jzz                        0x000055b61f72c62f <unavailable> + 5679\n5    libc.so.6                          0x00002ab06a682460 __libc_start_main + 245\n6    tmp94q7_jzz                        0x000055b61f72c169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmpgyde5v31/tmpgyde5v31.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae325b45c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae32583cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae32583c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae32583b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgyde5v31                        0x0000555b20e2756e <unavailable> + 5486\n5    libc.so.6                          0x00002ae325d31460 __libc_start_main + 245\n6    tmpgyde5v31                        0x0000555b20e271a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even * odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122885,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even_num = 1\n    var odd_num = 1\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = even_num * i\n        }\n        else {\n            odd_num = odd_num * i\n        }\n    }\n    return even_num * odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1666122886,
      "stdout": "",
      "stderr": "tmpp7f_wx7o/tmpp7f_wx7o.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d99600c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d992f7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d992f7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d992f67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp7f_wx7o                        0x0000561213e6352e <unavailable> + 5422\n5    libc.so.6                          0x00002b4d997ec460 __libc_start_main + 245\n6    tmpp7f_wx7o                        0x0000561213e63169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the product of first even and odd number of a given list.\nfunc mul_even_odd(list1: [Int]) -> Int {\n    var even = 1\n    var odd = 1\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even *= list1[i]\n        } else {\n            odd *= list1[i]\n        }\n        i += 1\n    }\n    return even * odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(mul_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 4)\nassert(mul_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2)\nassert(mul_even_odd(list1: [1, 5, 7, 9, 10]) == 10)",
      "timestamp": 1665517372,
      "stdout": "",
      "stderr": "tmp_5llk0js/tmp_5llk0js.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac908051c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac907d48b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac907d48988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac907d477b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_5llk0js                        0x000056280e5fe47e <unavailable> + 5246\n5    libc.so.6                          0x00002ac90823d460 __libc_start_main + 245\n6    tmp_5llk0js                        0x000056280e5fe0b9 <unavailable> + 4281\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}