{
  "name": "mbpp_588_big_diff",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "tmpw93ynw__/tmpw93ynw__.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abfe033ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abfe0031b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abfe0031988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abfe00307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw93ynw__                        0x00005654eb60d30a <unavailable> + 4874\n5    libc.so.6                          0x00002abfe0526460 __libc_start_main + 245\n6    tmpw93ynw__                        0x00005654eb60cf69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "tmpw93ynw__/tmpw93ynw__.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abfe033ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abfe0031b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abfe0031988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abfe00307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw93ynw__                        0x00005654eb60d30a <unavailable> + 4874\n5    libc.so.6                          0x00002abfe0526460 __libc_start_main + 245\n6    tmpw93ynw__                        0x00005654eb60cf69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in 0..<nums.count {\n        if nums[i] > max {\n            max = nums[i]\n        }\n        if nums[i] < min {\n            min = nums[i]\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "tmpw93ynw__/tmpw93ynw__.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abfe033ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abfe0031b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abfe0031988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abfe00307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw93ynw__                        0x00005654eb60d30a <unavailable> + 4874\n5    libc.so.6                          0x00002abfe0526460 __libc_start_main + 245\n6    tmpw93ynw__                        0x00005654eb60cf69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in 0..<nums.count {\n        if nums[i] > max {\n            max = nums[i]\n        }\n        if nums[i] < min {\n            min = nums[i]\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for n in nums {\n        if n > max {\n            max = n\n        }\n        if n < min {\n            min = n\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        } else if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "tmpw93ynw__/tmpw93ynw__.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abfe033ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abfe0031b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abfe0031988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abfe00307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw93ynw__                        0x00005654eb60d30a <unavailable> + 4874\n5    libc.so.6                          0x00002abfe0526460 __libc_start_main + 245\n6    tmpw93ynw__                        0x00005654eb60cf69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for n in nums {\n        if n > max {\n            max = n\n        }\n        if n < min {\n            min = n\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = Int.max\n    var max = Int.min\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in 0..<nums.count {\n        if nums[i] > max {\n            max = nums[i]\n        }\n        if nums[i] < min {\n            min = nums[i]\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "tmpw93ynw__/tmpw93ynw__.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abfe033ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abfe0031b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abfe0031988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abfe00307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw93ynw__                        0x00005654eb60d30a <unavailable> + 4874\n5    libc.so.6                          0x00002abfe0526460 __libc_start_main + 245\n6    tmpw93ynw__                        0x00005654eb60cf69 <unavailable> + 3945\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = 0\n    var min = 0\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "tmpf6fl1hge/tmpf6fl1hge.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdcc829c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdcc520b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdcc520988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdcc51f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf6fl1hge                        0x000056277d0e047a <unavailable> + 5242\n5    libc.so.6                          0x00002acdcca15460 __libc_start_main + 245\n6    tmpf6fl1hge                        0x000056277d0e00d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for i in nums {\n        if i < min {\n            min = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    return nums.max()! - nums.min()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for num in nums {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for n in nums {\n        if n < min {\n            min = n\n        }\n        if n > max {\n            max = n\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var min = nums[0]\n    var max = nums[0]\n    for n in nums {\n        if n < min {\n            min = n\n        }\n        if n > max {\n            max = n\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the difference between largest and smallest value in a given list.\nfunc big_diff(nums: [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max - min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(big_diff(nums: [1, 2, 3, 4]) == 3)\nassert(big_diff(nums: [4, 5, 12]) == 8)\nassert(big_diff(nums: [9, 2, 3]) == 7)",
      "timestamp": 1665510305,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}