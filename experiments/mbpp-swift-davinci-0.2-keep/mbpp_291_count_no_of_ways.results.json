{
  "name": "mbpp_291_count_no_of_ways",
  "language": "swift",
  "prompt": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = [Int](repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 || k == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = k\n    dp[2] = k * k\n    for i in 3...n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b96d8efcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b96d8bf3561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b96d8bf3286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b96d8bf313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b96d8bf2bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpdpc3qd52                        0x00005583dae7178c <unavailable> + 6028\n6    tmpdpc3qd52                        0x00005583dae713ed <unavailable> + 5101\n7    libc.so.6                          0x00002b96d90e8460 __libc_start_main + 245\n8    tmpdpc3qd52                        0x00005583dae71109 <unavailable> + 4361\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "tmpdidv93uy/tmpdidv93uy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a8d8b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a8d5abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4a8d5ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4a8d5aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdidv93uy                        0x000056159070833a <unavailable> + 4922\n5    libc.so.6                          0x00002b4a8daa0460 __libc_start_main + 245\n6    tmpdidv93uy                        0x0000561590707fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "tmpdidv93uy/tmpdidv93uy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a8d8b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a8d5abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4a8d5ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4a8d5aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdidv93uy                        0x000056159070833a <unavailable> + 4922\n5    libc.so.6                          0x00002b4a8daa0460 __libc_start_main + 245\n6    tmpdidv93uy                        0x0000561590707fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    guard n > 0, k > 0 else {\n        return 0\n    }\n    var dp = [Int](repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "tmpdidv93uy/tmpdidv93uy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a8d8b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a8d5abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4a8d5ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4a8d5aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdidv93uy                        0x000056159070833a <unavailable> + 4922\n5    libc.so.6                          0x00002b4a8daa0460 __libc_start_main + 245\n6    tmpdidv93uy                        0x0000561590707fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    var total = same + diff\n    for _ in 2...n {\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[1] = k\n    dp[2] = k * k\n    for i in 3...n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac08bd97c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac08ba8e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ac08ba8e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ac08ba8e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ac08ba8dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpw4aa3bbg                        0x000055708db6c756 <unavailable> + 5974\n6    tmpw4aa3bbg                        0x000055708db6c3ed <unavailable> + 5101\n7    libc.so.6                          0x00002ac08bf83460 __libc_start_main + 245\n8    tmpw4aa3bbg                        0x000055708db6c109 <unavailable> + 4361\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "tmpdidv93uy/tmpdidv93uy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a8d8b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a8d5abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4a8d5ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4a8d5aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdidv93uy                        0x000056159070833a <unavailable> + 4922\n5    libc.so.6                          0x00002b4a8daa0460 __libc_start_main + 245\n6    tmpdidv93uy                        0x0000561590707fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = [Int](repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    guard n > 0, k > 0 else { return 0 }\n    var dp = [Int](repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "tmpdidv93uy/tmpdidv93uy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a8d8b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a8d5abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4a8d5ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4a8d5aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdidv93uy                        0x000056159070833a <unavailable> + 4922\n5    libc.so.6                          0x00002b4a8daa0460 __libc_start_main + 245\n6    tmpdidv93uy                        0x0000561590707fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    guard n > 0, k > 0 else {\n        return 0\n    }\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = [Int](repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    guard n > 0, k > 0 else { return 0 }\n    var same = 0, diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "tmpdidv93uy/tmpdidv93uy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a8d8b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a8d5abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4a8d5ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4a8d5aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdidv93uy                        0x000056159070833a <unavailable> + 4922\n5    libc.so.6                          0x00002b4a8daa0460 __libc_start_main + 245\n6    tmpdidv93uy                        0x0000561590707fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 || k == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return k\n    }\n    \n    var same = k\n    var diff = k * (k - 1)\n    \n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    \n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aba4be15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aba4bb0c561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aba4bb0c286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aba4bb0c13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aba4bb0bbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpqhg515gf                        0x000055b78923b613 <unavailable> + 5651\n6    tmpqhg515gf                        0x000055b78923b2cd <unavailable> + 4813\n7    libc.so.6                          0x00002aba4c001460 __libc_start_main + 245\n8    tmpqhg515gf                        0x000055b78923afe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[1] = k\n    dp[2] = k * k\n    for i in 3...n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac08bd97c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac08ba8e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ac08ba8e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ac08ba8e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ac08ba8dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpw4aa3bbg                        0x000055708db6c756 <unavailable> + 5974\n6    tmpw4aa3bbg                        0x000055708db6c3ed <unavailable> + 5101\n7    libc.so.6                          0x00002ac08bf83460 __libc_start_main + 245\n8    tmpw4aa3bbg                        0x000055708db6c109 <unavailable> + 4361\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "tmpdidv93uy/tmpdidv93uy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a8d8b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a8d5abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4a8d5ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4a8d5aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdidv93uy                        0x000056159070833a <unavailable> + 4922\n5    libc.so.6                          0x00002b4a8daa0460 __libc_start_main + 245\n6    tmpdidv93uy                        0x0000561590707fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    \n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    \n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var total = k\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0, diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "tmpdidv93uy/tmpdidv93uy.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4a8d8b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4a8d5abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4a8d5ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4a8d5aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdidv93uy                        0x000056159070833a <unavailable> + 4922\n5    libc.so.6                          0x00002b4a8daa0460 __libc_start_main + 245\n6    tmpdidv93uy                        0x0000561590707fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    \n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    \n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    \n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    \n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0, diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 { return 0 }\n    if n == 1 { return k }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = k\n    dp[2] = k * k\n    \n    for i in 3...n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    \n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6577148c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6576e3f561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b6576e3f286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b6576e3f13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b6576e3ebb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp6e6hl5g6                        0x000055b23af3978c <unavailable> + 6028\n6    tmp6e6hl5g6                        0x000055b23af393ed <unavailable> + 5101\n7    libc.so.6                          0x00002b6577334460 __libc_start_main + 245\n8    tmp6e6hl5g6                        0x000055b23af39109 <unavailable> + 4361\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 || k == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = [Int](repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[1] = k\n    dp[2] = k * k\n    for i in 3...n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac08bd97c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac08ba8e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ac08ba8e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ac08ba8e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ac08ba8dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpw4aa3bbg                        0x000055708db6c756 <unavailable> + 5974\n6    tmpw4aa3bbg                        0x000055708db6c3ed <unavailable> + 5101\n7    libc.so.6                          0x00002ac08bf83460 __libc_start_main + 245\n8    tmpw4aa3bbg                        0x000055708db6c109 <unavailable> + 4361\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var total = 0\n    var same = 0\n    var diff = k\n    \n    for _ in 1..<n {\n        total = same + diff\n        same = diff\n        diff = total * (k - 1)\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "tmp16nb27d0/tmp16nb27d0.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab528091c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab527d88b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab527d88988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab527d877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp16nb27d0                        0x00005621b6c4d33a <unavailable> + 4922\n5    libc.so.6                          0x00002ab52827d460 __libc_start_main + 245\n6    tmp16nb27d0                        0x00005621b6c4cfe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[1] = k\n    dp[2] = k * k\n    for i in 3...n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac08bd97c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac08ba8e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ac08ba8e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ac08ba8e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ac08ba8dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpw4aa3bbg                        0x000055708db6c756 <unavailable> + 5974\n6    tmpw4aa3bbg                        0x000055708db6c3ed <unavailable> + 5101\n7    libc.so.6                          0x00002ac08bf83460 __libc_start_main + 245\n8    tmpw4aa3bbg                        0x000055708db6c109 <unavailable> + 4361\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k-1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[0] = 0\n    dp[1] = k\n    dp[2] = k * k\n    \n    for i in 3...n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b82d7fb2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b82d7ca9561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b82d7ca9286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b82d7ca913c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b82d7ca8bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp_yr0nfnh                        0x000055d01ae8678c <unavailable> + 6028\n6    tmp_yr0nfnh                        0x000055d01ae863ed <unavailable> + 5101\n7    libc.so.6                          0x00002b82d819e460 __libc_start_main + 245\n8    tmp_yr0nfnh                        0x000055d01ae86109 <unavailable> + 4361\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    // If there is only one post, there is only one way of painting it.\n    if n == 1 {\n        return k\n    }\n    \n    // If there are only two posts, there are two ways of painting them.\n    if n == 2 {\n        return k * k\n    }\n    \n    // If the first two posts have the same color, the number of ways of painting the first two posts is k.\n    // The number of ways of painting the rest of the posts is the same as the number of ways of painting the first two posts.\n    // If the first two posts have different colors, the number of ways of painting the first two posts is k * (k - 1).\n    // The number of ways of painting the rest of the posts is the same as the number of ways of painting the first two posts.\n    var same = k\n    var diff = k * (k - 1)\n    \n    // For the rest of the posts, the number of ways of painting the ith post is the same as the number of ways of painting the (i - 1)th post if the (i - 1)th and the ith posts have the same color.\n    // The number of ways of painting the ith post is the same as the number of ways of painting the (i - 2)th post if the (i - 1)th and the ith posts have different colors.\n    for _ in 3...n {\n        let temp = same\n        same = diff\n        diff = (temp + diff) * (k - 1)\n    }\n    \n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    guard n > 0, k > 0 else { return 0 }\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91d5a0cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91d5703561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b91d5703286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b91d570313c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b91d5702bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpne835kl4                        0x000055837d08f5ec <unavailable> + 5612\n6    tmpne835kl4                        0x000055837d08f2cd <unavailable> + 4813\n7    libc.so.6                          0x00002b91d5bf8460 __libc_start_main + 245\n8    tmpne835kl4                        0x000055837d08efe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 || k == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 3...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae9ebf01c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae9ebbf8561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ae9ebbf8286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ae9ebbf813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ae9ebbf7bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpdxdq2m5_                        0x000055b4fbe42613 <unavailable> + 5651\n6    tmpdxdq2m5_                        0x000055b4fbe422cd <unavailable> + 4813\n7    libc.so.6                          0x00002ae9ec0ed460 __libc_start_main + 245\n8    tmpdxdq2m5_                        0x000055b4fbe41fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    \n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    \n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    var total = same + diff\n    for _ in 2...n {\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n        return k\n    }\n    \n    var same = k\n    var diff = k * (k - 1)\n    \n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    \n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "tmpzmg902lw/tmpzmg902lw.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3d545aec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3d542a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3d542a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3d542a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzmg902lw                        0x000056098376433a <unavailable> + 4922\n5    libc.so.6                          0x00002b3d5479a460 __libc_start_main + 245\n6    tmpzmg902lw                        0x0000560983763fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    var same = k\n    var diff = k * (k - 1)\n    for _ in 2..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var total = k\n    var same = 0\n    var diff = k\n    \n    for _ in 2...n {\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n    }\n    \n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k-1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n + 1)\n    dp[1] = k\n    dp[2] = k * k\n    for i in 3...n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <= upperBound\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac08bd97c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac08ba8e561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ac08ba8e286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ac08ba8e13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ac08ba8dbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpw4aa3bbg                        0x000055708db6c756 <unavailable> + 5974\n6    tmpw4aa3bbg                        0x000055708db6c3ed <unavailable> + 5101\n7    libc.so.6                          0x00002ac08bf83460 __libc_start_main + 245\n8    tmpw4aa3bbg                        0x000055708db6c109 <unavailable> + 4361\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 2...n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0\n    var diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var same = 0, diff = k\n    for _ in 1..<n {\n        let temp = diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1665510180,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n: Int, k: Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    dp[0] = k\n    dp[1] = k * k\n    for i in 2..<n {\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n    }\n    return dp[n - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_no_of_ways(n: 2, k: 4) == 16)\nassert(count_no_of_ways(n: 3, k: 2) == 6)\nassert(count_no_of_ways(n: 4, k: 4) == 228)",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}