{
  "name": "mbpp_755_second_smallest",
  "language": "swift",
  "prompt": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    // TODO: Write some code to compute the second smallest number in `numbers`\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmp318tnpah/tmp318tnpah.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae35edcbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae35eac2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae35eac2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae35eac17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp318tnpah                        0x000055b74039c59e <unavailable> + 5534\n5    libc.so.6                          0x00002ae35efb7460 __libc_start_main + 245\n6    tmp318tnpah                        0x000055b74039c0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    let sorted = numbers.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmp3286jh7r/tmp3286jh7r.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeaca8cdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeaca5c4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeaca5c4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeaca5c37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3286jh7r                        0x0000556fe796678e <unavailable> + 6030\n5    libc.so.6                          0x00002aeacaab9460 __libc_start_main + 245\n6    tmp3286jh7r                        0x0000556fe79662b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmp3kpddm5k/tmp3kpddm5k.swift:22: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b726ebe9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b726e8e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b726e8e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b726e8df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3kpddm5k                        0x000055769323f72e <unavailable> + 5934\n5    libc.so.6                          0x00002b726edd5460 __libc_start_main + 245\n6    tmp3kpddm5k                        0x000055769323f259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpcmil9zm1/tmpcmil9zm1.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b208528ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2084f85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2084f85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2084f847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcmil9zm1                        0x00005580d36ac84e <unavailable> + 6222\n5    libc.so.6                          0x00002b208547a460 __libc_start_main + 245\n6    tmpcmil9zm1                        0x00005580d36ac379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        let temp = smallest\n        smallest = second_smallest\n        second_smallest = temp\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpv0rn6qyc/tmpv0rn6qyc.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c02388c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c0207fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c0207f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c0207e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv0rn6qyc                        0x000055679526a99e <unavailable> + 6558\n5    libc.so.6                          0x00002b4c02574460 __libc_start_main + 245\n6    tmpv0rn6qyc                        0x000055679526a4c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    return numbers.sorted()[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpe4vcrczq/tmpe4vcrczq.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6ddf117c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6ddee0eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6ddee0e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6ddee0d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4vcrczq                        0x000055943105272e <unavailable> + 5934\n5    libc.so.6                          0x00002b6ddf303460 __libc_start_main + 245\n6    tmpe4vcrczq                        0x0000559431052259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    return numbers.sorted()[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpe4vcrczq/tmpe4vcrczq.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6ddf117c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6ddee0eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6ddee0e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6ddee0d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4vcrczq                        0x000055943105272e <unavailable> + 5934\n5    libc.so.6                          0x00002b6ddf303460 __libc_start_main + 245\n6    tmpe4vcrczq                        0x0000559431052259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    if let numbers = numbers as? [Double] {\n        let sortedNumbers = numbers.sorted()\n        if sortedNumbers.count > 1 {\n            return sortedNumbers[1]\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpsts6nrbv/tmpsts6nrbv.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abfd512fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abfd4e26b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abfd4e26988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abfd4e257b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsts6nrbv                        0x000055965858978e <unavailable> + 6030\n5    libc.so.6                          0x00002abfd531b460 __libc_start_main + 245\n6    tmpsts6nrbv                        0x00005596585892b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpcjtfdhh0/tmpcjtfdhh0.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52e4b15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52e480cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52e480c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52e480b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcjtfdhh0                        0x00005582da8b384e <unavailable> + 6222\n5    libc.so.6                          0x00002b52e4d01460 __libc_start_main + 245\n6    tmpcjtfdhh0                        0x00005582da8b3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpcjtfdhh0/tmpcjtfdhh0.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52e4b15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52e480cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52e480c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52e480b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcjtfdhh0                        0x00005582da8b384e <unavailable> + 6222\n5    libc.so.6                          0x00002b52e4d01460 __libc_start_main + 245\n6    tmpcjtfdhh0                        0x00005582da8b3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpcjtfdhh0/tmpcjtfdhh0.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52e4b15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52e480cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52e480c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52e480b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcjtfdhh0                        0x00005582da8b384e <unavailable> + 6222\n5    libc.so.6                          0x00002b52e4d01460 __libc_start_main + 245\n6    tmpcjtfdhh0                        0x00005582da8b3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let numbers = numbers as! [Double]\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "Could not cast value of type 'Swift.AnyHashable' (0x2b5ae4274ac8) to 'Swift.Array<Swift.Double>' (0x2b5ae4374d48).\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil || number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if second_smallest == nil || number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmpeyk522ae.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmp51vwcwa4.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    let sortedNumbers = numbers.sorted()\n    return sortedNumbers[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpd8u0_n58/tmpd8u0_n58.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af518373c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af51806ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af51806a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af5180697b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd8u0_n58                        0x000056321685072e <unavailable> + 5934\n5    libc.so.6                          0x00002af51855f460 __libc_start_main + 245\n6    tmpd8u0_n58                        0x0000563216850259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmp5nj4xz1c.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    if let numbers = numbers as? [Double] {\n        let sorted = numbers.sorted()\n        if sorted.count > 1 {\n            return sorted[1]\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpqg2_wp9n/tmpqg2_wp9n.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad54c016c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad54bd0db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad54bd0d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad54bd0c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqg2_wp9n                        0x00005585358b578e <unavailable> + 6030\n5    libc.so.6                          0x00002ad54c202460 __libc_start_main + 245\n6    tmpqg2_wp9n                        0x00005585358b52b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmp51vwcwa4.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        guard let value = number as? Double else {\n            continue\n        }\n        if smallest == nil {\n            smallest = value\n        } else if second_smallest == nil {\n            if value < smallest! {\n                second_smallest = smallest\n                smallest = value\n            } else {\n                second_smallest = value\n            }\n        } else {\n            if value < smallest! {\n                second_smallest = smallest\n                smallest = value\n            } else if value < second_smallest! {\n                second_smallest = value\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpspic6btd.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    return numbers.sorted()[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpe4vcrczq/tmpe4vcrczq.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6ddf117c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6ddee0eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6ddee0e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6ddee0d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4vcrczq                        0x000055943105272e <unavailable> + 5934\n5    libc.so.6                          0x00002b6ddf303460 __libc_start_main + 245\n6    tmpe4vcrczq                        0x0000559431052259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double? = nil\n    var second_smallest: Double? = nil\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpepzw3tkt.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmppq565v26/tmppq565v26.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9ebd770c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9ebd467b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9ebd467988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9ebd4667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppq565v26                        0x000055fdcbddd99e <unavailable> + 6558\n5    libc.so.6                          0x00002b9ebd95c460 __libc_start_main + 245\n6    tmppq565v26                        0x000055fdcbddd4c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    if sorted.count < 2 {\n        return nil\n    }\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmplotfpaw7.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpcjtfdhh0/tmpcjtfdhh0.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52e4b15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52e480cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52e480c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52e480b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcjtfdhh0                        0x00005582da8b384e <unavailable> + 6222\n5    libc.so.6                          0x00002b52e4d01460 __libc_start_main + 245\n6    tmpcjtfdhh0                        0x00005582da8b3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe6310_wd.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe8u_w6qh.swift:7:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted_numbers = numbers.sorted()\n    return sorted_numbers[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpn81oy7wt.swift:4:34: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted_numbers = numbers.sorted()\n                         ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        let temp = smallest\n        smallest = second_smallest\n        second_smallest = temp\n    }\n    for number in numbers[2...] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpyxvt2502/tmpyxvt2502.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7e1077fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7e10476b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7e10476988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7e104757b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyxvt2502                        0x0000556d2b6f49fe <unavailable> + 6654\n5    libc.so.6                          0x00002b7e1096b460 __libc_start_main + 245\n6    tmpyxvt2502                        0x0000556d2b6f4529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe6310_wd.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmp51vwcwa4.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmp4urbmwr_/tmp4urbmwr_.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b07b2017c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b07b1d0eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b07b1d0e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b07b1d0d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4urbmwr_                        0x000055cab098886e <unavailable> + 6254\n5    libc.so.6                          0x00002b07b2203460 __libc_start_main + 245\n6    tmp4urbmwr_                        0x000055cab0988399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    return numbers.sorted()[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpe4vcrczq/tmpe4vcrczq.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6ddf117c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6ddee0eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6ddee0e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6ddee0d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4vcrczq                        0x000055943105272e <unavailable> + 5934\n5    libc.so.6                          0x00002b6ddf303460 __libc_start_main + 245\n6    tmpe4vcrczq                        0x0000559431052259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    if let numbers = numbers as? [Double] {\n        let sorted = numbers.sorted()\n        if sorted.count >= 2 {\n            return sorted[1]\n        }\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpqpe8lrz5/tmpqpe8lrz5.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b922002ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b921fd25b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b921fd25988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b921fd247b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqpe8lrz5                        0x000055e18419578e <unavailable> + 6030\n5    libc.so.6                          0x00002b922021a460 __libc_start_main + 245\n6    tmpqpe8lrz5                        0x000055e1841952b9 <unavailable> + 4793\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        (smallest, second_smallest) = (second_smallest, smallest)\n    }\n    for number in numbers[2...] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpdftcxylz/tmpdftcxylz.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fdef68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3fdec5fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3fdec5f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3fdec5e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdftcxylz                        0x000055c61c5c19fe <unavailable> + 6654\n5    libc.so.6                          0x00002b3fdf154460 __libc_start_main + 245\n6    tmpdftcxylz                        0x000055c61c5c1529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmp5nj4xz1c.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    // TODO: Implement me!\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpuug_3h2j/tmpuug_3h2j.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba33546ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba335161b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba335161988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba3351607b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuug_3h2j                        0x0000561b0787659e <unavailable> + 5534\n5    libc.so.6                          0x00002ba335656460 __libc_start_main + 245\n6    tmpuug_3h2j                        0x0000561b078760c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe6310_wd.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmp51vwcwa4.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmp51vwcwa4.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    if let numbers = numbers as? [Double] {\n        var smallest = numbers[0]\n        var second_smallest = numbers[0]\n        for number in numbers {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n        return second_smallest\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpjxr5i7sr/tmpjxr5i7sr.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d85f62c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d85c59b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d85c59988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d85c587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjxr5i7sr                        0x0000562954e247fe <unavailable> + 6142\n5    libc.so.6                          0x00002b4d8614e460 __libc_start_main + 245\n6    tmpjxr5i7sr                        0x0000562954e24329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpdlhulqnw/tmpdlhulqnw.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2b66e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2b63e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2b63e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2b63df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdlhulqnw                        0x00005582bf90d59e <unavailable> + 5534\n5    libc.so.6                          0x00002ae2b68d5460 __libc_start_main + 245\n6    tmpdlhulqnw                        0x00005582bf90d0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpmrtk7ei5/tmpmrtk7ei5.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1e7804c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1e74fbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1e74fb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1e74fa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmrtk7ei5                        0x00005650d4efa84e <unavailable> + 6222\n5    libc.so.6                          0x00002ac1e79f0460 __libc_start_main + 245\n6    tmpmrtk7ei5                        0x00005650d4efa379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpcmil9zm1/tmpcmil9zm1.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b208528ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2084f85b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2084f85988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2084f847b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcmil9zm1                        0x00005580d36ac84e <unavailable> + 6222\n5    libc.so.6                          0x00002b208547a460 __libc_start_main + 245\n6    tmpcmil9zm1                        0x00005580d36ac379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpa50sec3p/tmpa50sec3p.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5f379c9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5f376c0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5f376c0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5f376bf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa50sec3p                        0x000056359df1884e <unavailable> + 6222\n5    libc.so.6                          0x00002b5f37bb5460 __libc_start_main + 245\n6    tmpa50sec3p                        0x000056359df18379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpdlhulqnw/tmpdlhulqnw.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2b66e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2b63e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2b63e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2b63df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdlhulqnw                        0x00005582bf90d59e <unavailable> + 5534\n5    libc.so.6                          0x00002ae2b68d5460 __libc_start_main + 245\n6    tmpdlhulqnw                        0x00005582bf90d0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest = Double.infinity\n    var second_smallest = Double.infinity\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe0g_y5ru.swift:7:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmppseknlrg/tmppseknlrg.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ce88f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ce85e9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ce85e9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ce85e87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppseknlrg                        0x000055c2953d57fe <unavailable> + 6142\n5    libc.so.6                          0x00002b8ce8ade460 __libc_start_main + 245\n6    tmppseknlrg                        0x000055c2953d5329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest = Double.infinity\n    var second_smallest = Double.infinity\n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpz33jfe4n.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    return numbers.sorted()[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpe4vcrczq/tmpe4vcrczq.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6ddf117c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6ddee0eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6ddee0e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6ddee0d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4vcrczq                        0x000055943105272e <unavailable> + 5934\n5    libc.so.6                          0x00002b6ddf303460 __libc_start_main + 245\n6    tmpe4vcrczq                        0x0000559431052259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sortedNumbers = numbers.sorted()\n    return sortedNumbers[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpv4jywz2x.swift:4:33: error: value of type 'AnyHashable' has no member 'sorted'\n    let sortedNumbers = numbers.sorted()\n                        ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil || number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if second_smallest == nil || number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpcmke4zhy.swift:7:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    return numbers.sorted()[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpe4vcrczq/tmpe4vcrczq.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6ddf117c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6ddee0eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6ddee0e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6ddee0d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4vcrczq                        0x000055943105272e <unavailable> + 5934\n5    libc.so.6                          0x00002b6ddf303460 __libc_start_main + 245\n6    tmpe4vcrczq                        0x0000559431052259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmp51vwcwa4.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        smallest = numbers[1]\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpnfrwq1t0/tmpnfrwq1t0.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1b6d46cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1b6d163b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1b6d163988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1b6d1627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnfrwq1t0                        0x00005575435ad99e <unavailable> + 6558\n5    libc.so.6                          0x00002b1b6d658460 __libc_start_main + 245\n6    tmpnfrwq1t0                        0x00005575435ad4c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted(by: <)\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpo9_7r26q.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted(by: <)\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    return numbers.sorted()[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpe4vcrczq/tmpe4vcrczq.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6ddf117c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6ddee0eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6ddee0e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6ddee0d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4vcrczq                        0x000055943105272e <unavailable> + 5934\n5    libc.so.6                          0x00002b6ddf303460 __libc_start_main + 245\n6    tmpe4vcrczq                        0x0000559431052259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        swap(&smallest, &second_smallest)\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpwq04fm5h/tmpwq04fm5h.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b480825ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4807f51b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4807f51988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4807f507b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwq04fm5h                        0x000055f2f204c8be <unavailable> + 6334\n5    libc.so.6                          0x00002b4808446460 __libc_start_main + 245\n6    tmpwq04fm5h                        0x000055f2f204c3e9 <unavailable> + 5097\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sortedNumbers = numbers.sorted()\n    return sortedNumbers[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpv4jywz2x.swift:4:33: error: value of type 'AnyHashable' has no member 'sorted'\n    let sortedNumbers = numbers.sorted()\n                        ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmp51vwcwa4.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmp52f2fdu9/tmp52f2fdu9.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6d8d624c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6d8d31bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6d8d31b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6d8d31a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp52f2fdu9                        0x0000558aa93ae72e <unavailable> + 5934\n5    libc.so.6                          0x00002b6d8d810460 __libc_start_main + 245\n6    tmp52f2fdu9                        0x0000558aa93ae259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpcjtfdhh0/tmpcjtfdhh0.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52e4b15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52e480cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52e480c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52e480b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcjtfdhh0                        0x00005582da8b384e <unavailable> + 6222\n5    libc.so.6                          0x00002b52e4d01460 __libc_start_main + 245\n6    tmpcjtfdhh0                        0x00005582da8b3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpwdxkdlux.swift:7:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpxv36gjbr/tmpxv36gjbr.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7a1556c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7a124db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7a124d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7a124c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxv36gjbr                        0x0000560dedfea99e <unavailable> + 6558\n5    libc.so.6                          0x00002ad7a1742460 __libc_start_main + 245\n6    tmpxv36gjbr                        0x0000560dedfea4c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpcjtfdhh0/tmpcjtfdhh0.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52e4b15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52e480cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52e480c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52e480b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcjtfdhh0                        0x00005582da8b384e <unavailable> + 6222\n5    libc.so.6                          0x00002b52e4d01460 __libc_start_main + 245\n6    tmpcjtfdhh0                        0x00005582da8b3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double? = nil\n    var second_smallest: Double? = nil\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil || number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if second_smallest == nil || number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpinwf7qt1.swift:7:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe6310_wd.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil || number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if second_smallest == nil || number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmpeyk522ae.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let nums = numbers as! [Double]\n    var smallest = nums[0]\n    var second_smallest = nums[0]\n    for num in nums {\n        if num < smallest {\n            second_smallest = smallest\n            smallest = num\n        } else if num < second_smallest {\n            second_smallest = num\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "Could not cast value of type 'Swift.AnyHashable' (0x2b25eedd2ac8) to 'Swift.Array<Swift.Double>' (0x2b25eeed2d48).\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpw3x1gerc/tmpw3x1gerc.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ccde4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ccdb41b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ccdb41988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ccdb407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw3x1gerc                        0x000055dba8e2384e <unavailable> + 6222\n5    libc.so.6                          0x00002b7cce036460 __libc_start_main + 245\n6    tmpw3x1gerc                        0x000055dba8e23379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    \n    var smallest = numbers[0]\n    var secondSmallest = numbers[0]\n    \n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    \n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmp2chflms7/tmp2chflms7.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64087f0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b64084e7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b64084e7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b64084e67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2chflms7                        0x000055b2311037fe <unavailable> + 6142\n5    libc.so.6                          0x00002b64089dc460 __libc_start_main + 245\n6    tmp2chflms7                        0x000055b231103329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    if secondSmallest < smallest {\n        (smallest, secondSmallest) = (secondSmallest, smallest)\n    }\n    for number in numbers[2...] {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmprtogb1_w/tmprtogb1_w.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b90e30d7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b90e2dceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b90e2dce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b90e2dcd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprtogb1_w                        0x000055e61f8e79fe <unavailable> + 6654\n5    libc.so.6                          0x00002b90e32c3460 __libc_start_main + 245\n6    tmprtogb1_w                        0x000055e61f8e7529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double? = nil\n    var second_smallest: Double? = nil\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpepzw3tkt.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmp5nj4xz1c.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpw3x1gerc/tmpw3x1gerc.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7ccde4ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7ccdb41b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7ccdb41988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7ccdb407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw3x1gerc                        0x000055dba8e2384e <unavailable> + 6222\n5    libc.so.6                          0x00002b7cce036460 __libc_start_main + 245\n6    tmpw3x1gerc                        0x000055dba8e23379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmp51vwcwa4.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "/tmp/tmpaff53ujk.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpdbqta_ew/tmpdbqta_ew.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5ec9d18c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5ec9a0fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5ec9a0f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5ec9a0e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdbqta_ew                        0x00005638edfd97fe <unavailable> + 6142\n5    libc.so.6                          0x00002b5ec9f04460 __libc_start_main + 245\n6    tmpdbqta_ew                        0x00005638edfd9329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe6310_wd.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    \n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    \n    if smallest > secondSmallest {\n        smallest = numbers[1]\n        secondSmallest = numbers[0]\n    }\n    \n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    \n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpwe5hykpy/tmpwe5hykpy.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5f1022ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5f0ff21b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5f0ff21988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5f0ff207b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwe5hykpy                        0x000055ad5a31684e <unavailable> + 6222\n5    libc.so.6                          0x00002b5f10416460 __libc_start_main + 245\n6    tmpwe5hykpy                        0x000055ad5a316379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let numbers = numbers as! [Double]\n    if numbers.count < 2 {\n        return nil\n    }\n    var min = numbers[0]\n    var second_min = numbers[1]\n    if min > second_min {\n        min = numbers[1]\n        second_min = numbers[0]\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < min {\n            second_min = min\n            min = numbers[i]\n        } else if numbers[i] < second_min {\n            second_min = numbers[i]\n        }\n    }\n    return second_min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "Could not cast value of type 'Swift.AnyHashable' (0x2af2ed403ac8) to 'Swift.Array<Swift.Double>' (0x2af2ed503d48).\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpdlhulqnw/tmpdlhulqnw.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2b66e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2b63e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2b63e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2b63df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdlhulqnw                        0x00005582bf90d59e <unavailable> + 5534\n5    libc.so.6                          0x00002ae2b68d5460 __libc_start_main + 245\n6    tmpdlhulqnw                        0x00005582bf90d0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest = Double.infinity\n    var second_smallest = Double.infinity\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe0g_y5ru.swift:7:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    \n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    \n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpw_keg68k/tmpw_keg68k.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b428dbc0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b428d8b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b428d8b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b428d8b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw_keg68k                        0x0000559091dcf7fe <unavailable> + 6142\n5    libc.so.6                          0x00002b428ddac460 __libc_start_main + 245\n6    tmpw_keg68k                        0x0000559091dcf329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    if let numbers = numbers as? [Double] {\n        if numbers.count < 2 {\n            return nil\n        }\n        var smallest = numbers[0]\n        var second_smallest = numbers[1]\n        for i in 2..<numbers.count {\n            if numbers[i] < smallest {\n                second_smallest = smallest\n                smallest = numbers[i]\n            } else if numbers[i] < second_smallest {\n                second_smallest = numbers[i]\n            }\n        }\n        return second_smallest\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpqg4d8g9h/tmpqg4d8g9h.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002accd341ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002accd3115b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002accd3115988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002accd31147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqg4d8g9h                        0x000055f95093286e <unavailable> + 6254\n5    libc.so.6                          0x00002accd360a460 __libc_start_main + 245\n6    tmpqg4d8g9h                        0x000055f950932399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "Could not cast value of type 'Swift.AnyHashable' (0x2b8b79b9cac8) to 'Swift.Array<Swift.Double>' (0x2b8b79c9cd48).\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpwdxkdlux.swift:7:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe6310_wd.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmp51vwcwa4.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    if smallest > secondSmallest {\n        smallest = secondSmallest\n        secondSmallest = numbers[0]\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            secondSmallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < secondSmallest {\n            secondSmallest = numbers[i]\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpcfolxqir/tmpcfolxqir.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5f65be8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5f658dfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5f658df988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5f658de7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcfolxqir                        0x000055c7320b186e <unavailable> + 6254\n5    libc.so.6                          0x00002b5f65dd4460 __libc_start_main + 245\n6    tmpcfolxqir                        0x000055c7320b1399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe6310_wd.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpdlhulqnw/tmpdlhulqnw.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2b66e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2b63e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2b63e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2b63df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdlhulqnw                        0x00005582bf90d59e <unavailable> + 5534\n5    libc.so.6                          0x00002ae2b68d5460 __libc_start_main + 245\n6    tmpdlhulqnw                        0x00005582bf90d0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                second_smallest = number\n            } else if number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "/tmp/tmpr7d56icx.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe6310_wd.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmppq565v26/tmppq565v26.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9ebd770c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9ebd467b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9ebd467988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9ebd4667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppq565v26                        0x000055fdcbddd99e <unavailable> + 6558\n5    libc.so.6                          0x00002b9ebd95c460 __libc_start_main + 245\n6    tmppq565v26                        0x000055fdcbddd4c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let numbers = numbers as! [Double]\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "Could not cast value of type 'Swift.AnyHashable' (0x2b9b27fa0ac8) to 'Swift.Array<Swift.Double>' (0x2b9b280a0d48).\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        swap(&smallest, &second_smallest)\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmp0uxhuhkg/tmp0uxhuhkg.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b92686f0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b92683e7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b92683e7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b92683e67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0uxhuhkg                        0x000055ef95edd9ee <unavailable> + 6638\n5    libc.so.6                          0x00002b92688dc460 __libc_start_main + 245\n6    tmp0uxhuhkg                        0x000055ef95edd519 <unavailable> + 5401\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2...] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmps1dtnump/tmps1dtnump.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba2b7b68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba2b785fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba2b785f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba2b785e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps1dtnump                        0x00005597effb39fe <unavailable> + 6654\n5    libc.so.6                          0x00002ba2b7d54460 __libc_start_main + 245\n6    tmps1dtnump                        0x00005597effb3529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    return numbers.sorted()[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpe4vcrczq/tmpe4vcrczq.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6ddf117c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6ddee0eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6ddee0e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6ddee0d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4vcrczq                        0x000055943105272e <unavailable> + 5934\n5    libc.so.6                          0x00002b6ddf303460 __libc_start_main + 245\n6    tmpe4vcrczq                        0x0000559431052259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let numbers = numbers as! [Double]\n    if numbers.count < 2 {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        swap(&smallest, &second_smallest)\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "Could not cast value of type 'Swift.AnyHashable' (0x2ae6678c1ac8) to 'Swift.Array<Swift.Double>' (0x2ae6679c1d48).\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    if numbers.count < 2 {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpef7jkkpx/tmpef7jkkpx.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b70cf897c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b70cf58eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b70cf58e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b70cf58d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpef7jkkpx                        0x0000564a9a2e399e <unavailable> + 6558\n5    libc.so.6                          0x00002b70cfa83460 __libc_start_main + 245\n6    tmpef7jkkpx                        0x0000564a9a2e34c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe6310_wd.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    return numbers.sorted()[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpe4vcrczq/tmpe4vcrczq.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6ddf117c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6ddee0eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6ddee0e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6ddee0d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4vcrczq                        0x000055943105272e <unavailable> + 5934\n5    libc.so.6                          0x00002b6ddf303460 __libc_start_main + 245\n6    tmpe4vcrczq                        0x0000559431052259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double? = nil\n    var second_smallest: Double? = nil\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpepzw3tkt.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpxv36gjbr/tmpxv36gjbr.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad7a1556c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad7a124db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad7a124d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad7a124c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxv36gjbr                        0x0000560dedfea99e <unavailable> + 6558\n5    libc.so.6                          0x00002ad7a1742460 __libc_start_main + 245\n6    tmpxv36gjbr                        0x0000560dedfea4c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmp51vwcwa4.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe6310_wd.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpdlhulqnw/tmpdlhulqnw.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2b66e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2b63e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2b63e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2b63df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdlhulqnw                        0x00005582bf90d59e <unavailable> + 5534\n5    libc.so.6                          0x00002ae2b68d5460 __libc_start_main + 245\n6    tmpdlhulqnw                        0x00005582bf90d0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    if let numbers = numbers as? [Double] {\n        var smallest = numbers[0]\n        var second_smallest = numbers[0]\n        for number in numbers {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n        return second_smallest\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpjxr5i7sr/tmpjxr5i7sr.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4d85f62c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4d85c59b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4d85c59988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4d85c587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjxr5i7sr                        0x0000562954e247fe <unavailable> + 6142\n5    libc.so.6                          0x00002b4d8614e460 __libc_start_main + 245\n6    tmpjxr5i7sr                        0x0000562954e24329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double? = nil\n    var second_smallest: Double? = nil\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else if number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "/tmp/tmp23qvw1bb.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    return numbers.sorted().dropFirst().first\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmp15bqp6e6/tmp15bqp6e6.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2190153c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b218fe4ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b218fe4a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b218fe497b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp15bqp6e6                        0x000055edeefa486e <unavailable> + 6254\n5    libc.so.6                          0x00002b219033f460 __libc_start_main + 245\n6    tmp15bqp6e6                        0x000055edeefa4399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmp51vwcwa4.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmppq565v26/tmppq565v26.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9ebd770c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9ebd467b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9ebd467988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9ebd4667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppq565v26                        0x000055fdcbddd99e <unavailable> + 6558\n5    libc.so.6                          0x00002b9ebd95c460 __libc_start_main + 245\n6    tmppq565v26                        0x000055fdcbddd4c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpcjtfdhh0/tmpcjtfdhh0.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52e4b15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52e480cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52e480c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52e480b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcjtfdhh0                        0x00005582da8b384e <unavailable> + 6222\n5    libc.so.6                          0x00002b52e4d01460 __libc_start_main + 245\n6    tmpcjtfdhh0                        0x00005582da8b3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let numbers = numbers as! [Double]\n    if numbers.count < 2 {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        (smallest, second_smallest) = (second_smallest, smallest)\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "Could not cast value of type 'Swift.AnyHashable' (0x2b3ee90a5ac8) to 'Swift.Array<Swift.Double>' (0x2b3ee91a5d48).\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpdlhulqnw/tmpdlhulqnw.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2b66e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2b63e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2b63e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2b63df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdlhulqnw                        0x00005582bf90d59e <unavailable> + 5534\n5    libc.so.6                          0x00002ae2b68d5460 __libc_start_main + 245\n6    tmpdlhulqnw                        0x00005582bf90d0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sortedNumbers = numbers.sorted()\n    if sortedNumbers.count > 1 {\n        return sortedNumbers[1]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "/tmp/tmpi2yhqbtd.swift:4:33: error: value of type 'AnyHashable' has no member 'sorted'\n    let sortedNumbers = numbers.sorted()\n                        ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe6310_wd.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "Could not cast value of type 'Swift.AnyHashable' (0x2b8b79b9cac8) to 'Swift.Array<Swift.Double>' (0x2b8b79c9cd48).\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var min = Double.greatestFiniteMagnitude\n    var second_min = Double.greatestFiniteMagnitude\n    \n    for number in numbers as! [Double] {\n        if number < min {\n            second_min = min\n            min = number\n        } else if number < second_min {\n            second_min = number\n        }\n    }\n    \n    return second_min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "Could not cast value of type 'Swift.AnyHashable' (0x2ae0e3480ac8) to 'Swift.Array<Swift.Double>' (0x2ae0e3580d48).\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpcjtfdhh0/tmpcjtfdhh0.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52e4b15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52e480cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52e480c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52e480b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcjtfdhh0                        0x00005582da8b384e <unavailable> + 6222\n5    libc.so.6                          0x00002b52e4d01460 __libc_start_main + 245\n6    tmpcjtfdhh0                        0x00005582da8b3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmp51vwcwa4.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpdlhulqnw/tmpdlhulqnw.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2b66e9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2b63e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2b63e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2b63df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdlhulqnw                        0x00005582bf90d59e <unavailable> + 5534\n5    libc.so.6                          0x00002ae2b68d5460 __libc_start_main + 245\n6    tmpdlhulqnw                        0x00005582bf90d0c9 <unavailable> + 4297\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest = Double.infinity\n    var second_smallest = Double.infinity\n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpz33jfe4n.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if smallest == nil || number < smallest! {\n            second_smallest = smallest\n            smallest = number\n        } else if second_smallest == nil || number < second_smallest! {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmp0e8gzcmk/tmp0e8gzcmk.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae6b1ec6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae6b1bbdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae6b1bbd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae6b1bbc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0e8gzcmk                        0x000055781743983e <unavailable> + 6206\n5    libc.so.6                          0x00002ae6b20b2460 __libc_start_main + 245\n6    tmp0e8gzcmk                        0x0000557817439369 <unavailable> + 4969\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let numbers = numbers as! [Double]\n    if numbers.count < 2 {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        swap(&smallest, &second_smallest)\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "Could not cast value of type 'Swift.AnyHashable' (0x2b1043290ac8) to 'Swift.Array<Swift.Double>' (0x2b1043390d48).\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "tmpmrtk7ei5/tmpmrtk7ei5.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac1e7804c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac1e74fbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac1e74fb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac1e74fa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmrtk7ei5                        0x00005650d4efa84e <unavailable> + 6222\n5    libc.so.6                          0x00002ac1e79f0460 __libc_start_main + 245\n6    tmpmrtk7ei5                        0x00005650d4efa379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2...] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmps1dtnump/tmps1dtnump.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba2b7b68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba2b785fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba2b785f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba2b785e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps1dtnump                        0x00005597effb39fe <unavailable> + 6654\n5    libc.so.6                          0x00002ba2b7d54460 __libc_start_main + 245\n6    tmps1dtnump                        0x00005597effb3529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe6310_wd.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count >= 2 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpxfcvo9fz/tmpxfcvo9fz.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8360bd5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b83608ccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b83608cc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b83608cb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxfcvo9fz                        0x0000560017beb84e <unavailable> + 6222\n5    libc.so.6                          0x00002b8360dc1460 __libc_start_main + 245\n6    tmpxfcvo9fz                        0x0000560017beb379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe8u_w6qh.swift:7:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe8u_w6qh.swift:7:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        (smallest, second_smallest) = (second_smallest, smallest)\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpmr4ruu0c/tmpmr4ruu0c.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b357c1fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b357bef1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b357bef1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b357bef07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmr4ruu0c                        0x0000555d9137299e <unavailable> + 6558\n5    libc.so.6                          0x00002b357c3e6460 __libc_start_main + 245\n6    tmpmr4ruu0c                        0x0000555d913724c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "/tmp/tmpaff53ujk.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sortedNumbers = numbers.sorted()\n    return sortedNumbers[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpv4jywz2x.swift:4:33: error: value of type 'AnyHashable' has no member 'sorted'\n    let sortedNumbers = numbers.sorted()\n                        ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let numbers = numbers as! [Double]\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        swap(&smallest, &second_smallest)\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "Could not cast value of type 'Swift.AnyHashable' (0x2b90bebe2ac8) to 'Swift.Array<Swift.Double>' (0x2b90bece2d48).\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else if number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "/tmp/tmprr1a4_o5.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpcjtfdhh0/tmpcjtfdhh0.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52e4b15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52e480cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52e480c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52e480b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcjtfdhh0                        0x00005582da8b384e <unavailable> + 6222\n5    libc.so.6                          0x00002b52e4d01460 __libc_start_main + 245\n6    tmpcjtfdhh0                        0x00005582da8b3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sortedNumbers = numbers.sorted()\n    if sortedNumbers.count > 1 {\n        return sortedNumbers[1]\n    } else {\n        return nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "/tmp/tmpml3eyja1.swift:4:33: error: value of type 'AnyHashable' has no member 'sorted'\n    let sortedNumbers = numbers.sorted()\n                        ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "/tmp/tmpaff53ujk.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmp5nj4xz1c.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2..<numbers.count] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpj_kkut88/tmpj_kkut88.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52e775dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52e7454b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52e7454988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52e74537b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpj_kkut88                        0x000055c97fa5799e <unavailable> + 6558\n5    libc.so.6                          0x00002b52e7949460 __libc_start_main + 245\n6    tmpj_kkut88                        0x000055c97fa574c9 <unavailable> + 5321\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    \n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    \n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpd5i9_79o/tmpd5i9_79o.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4f8b476c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4f8b16db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4f8b16d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4f8b16c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd5i9_79o                        0x0000556cb589980e <unavailable> + 6158\n5    libc.so.6                          0x00002b4f8b662460 __libc_start_main + 245\n6    tmpd5i9_79o                        0x0000556cb5899339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    if sorted.count < 2 {\n        return nil\n    }\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmplotfpaw7.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe8u_w6qh.swift:7:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var secondSmallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpjh1207ch/tmpjh1207ch.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11f8a79c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11f8770b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b11f8770988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b11f876f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjh1207ch                        0x00005608a80a77fe <unavailable> + 6142\n5    libc.so.6                          0x00002b11f8c65460 __libc_start_main + 245\n6    tmpjh1207ch                        0x00005608a80a7329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil || number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if second_smallest == nil || number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmpeyk522ae.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe8u_w6qh.swift:7:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpqcgtd6u0/tmpqcgtd6u0.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b528ad12c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b528aa09b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b528aa09988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b528aa087b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqcgtd6u0                        0x00005577503da7fe <unavailable> + 6142\n5    libc.so.6                          0x00002b528aefe460 __libc_start_main + 245\n6    tmpqcgtd6u0                        0x00005577503da329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "/tmp/tmp51vwcwa4.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = second_smallest\n        second_smallest = numbers[0]\n    }\n    for number in numbers[2...] {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmps1dtnump/tmps1dtnump.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba2b7b68c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba2b785fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba2b785f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba2b785e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps1dtnump                        0x00005597effb39fe <unavailable> + 6654\n5    libc.so.6                          0x00002ba2b7d54460 __libc_start_main + 245\n6    tmps1dtnump                        0x00005597effb3529 <unavailable> + 5417\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var secondSmallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmp9k4_65i0/tmp9k4_65i0.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6e93622c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6e93319b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6e93319988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6e933187b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9k4_65i0                        0x000055b521e9784e <unavailable> + 6222\n5    libc.so.6                          0x00002b6e9380e460 __libc_start_main + 245\n6    tmp9k4_65i0                        0x000055b521e97379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpcjtfdhh0/tmpcjtfdhh0.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b52e4b15c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b52e480cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b52e480c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b52e480b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcjtfdhh0                        0x00005582da8b384e <unavailable> + 6222\n5    libc.so.6                          0x00002b52e4d01460 __libc_start_main + 245\n6    tmpcjtfdhh0                        0x00005582da8b3379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "Could not cast value of type 'Swift.AnyHashable' (0x2b8b79b9cac8) to 'Swift.Array<Swift.Double>' (0x2b8b79c9cd48).\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpqcgtd6u0/tmpqcgtd6u0.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b528ad12c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b528aa09b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b528aa09988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b528aa087b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqcgtd6u0                        0x00005577503da7fe <unavailable> + 6142\n5    libc.so.6                          0x00002b528aefe460 __libc_start_main + 245\n6    tmpqcgtd6u0                        0x00005577503da329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpqcgtd6u0/tmpqcgtd6u0.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b528ad12c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b528aa09b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b528aa09988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b528aa087b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqcgtd6u0                        0x00005577503da7fe <unavailable> + 6142\n5    libc.so.6                          0x00002b528aefe460 __libc_start_main + 245\n6    tmpqcgtd6u0                        0x00005577503da329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    return numbers.sorted()[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpw7slvlmt/tmpw7slvlmt.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48ff9a0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48ff697b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b48ff697988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48ff6967b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw7slvlmt                        0x000056380375672e <unavailable> + 5934\n5    libc.so.6                          0x00002b48ffb8c460 __libc_start_main + 245\n6    tmpw7slvlmt                        0x0000563803756259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var numbers = numbers as! [Double]\n    numbers.sort()\n    return numbers[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "Could not cast value of type 'Swift.AnyHashable' (0x2b8b79b9cac8) to 'Swift.Array<Swift.Double>' (0x2b8b79c9cd48).\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else if number < second_smallest! {\n                    second_smallest = number\n                }\n            }\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe8u_w6qh.swift:7:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else { return nil }\n    guard numbers.count > 1 else { return nil }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if smallest > second_smallest {\n        let temp = smallest\n        smallest = second_smallest\n        second_smallest = temp\n    }\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpk7cp6qbr/tmpk7cp6qbr.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aec0a1a5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aec09e9cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aec09e9c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aec09e9b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk7cp6qbr                        0x0000555f32a3484e <unavailable> + 6222\n5    libc.so.6                          0x00002aec0a391460 __libc_start_main + 245\n6    tmpk7cp6qbr                        0x0000555f32a34379 <unavailable> + 4985\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe6310_wd.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var min = Double.infinity\n    var second_min = Double.infinity\n    for number in numbers {\n        if let number = number as? Double {\n            if number < min {\n                second_min = min\n                min = number\n            } else if number < second_min {\n                second_min = number\n            }\n        }\n    }\n    return second_min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "/tmp/tmpedkpq3t8.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = Double.greatestFiniteMagnitude\n    var second_smallest = Double.greatestFiniteMagnitude\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmp385g2eb8/tmp385g2eb8.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b412d4b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b412d1a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b412d1a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b412d1a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp385g2eb8                        0x000055f7347c480e <unavailable> + 6158\n5    libc.so.6                          0x00002b412d69e460 __libc_start_main + 245\n6    tmp385g2eb8                        0x000055f7347c4339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    if sorted.count > 1 {\n        return sorted[1]\n    }\n    return nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmp5nj4xz1c.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    \n    for number in numbers {\n        if let num = number as? Double {\n            if smallest == nil {\n                smallest = num\n            } else if num < smallest! {\n                second_smallest = smallest\n                smallest = num\n            } else if second_smallest == nil || num < second_smallest! {\n                second_smallest = num\n            }\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "/tmp/tmplsi25yhu.swift:7:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[0]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpigx4pqg4/tmpigx4pqg4.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b63acfb4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b63accabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b63accab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b63accaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpigx4pqg4                        0x0000564e2ac357fe <unavailable> + 6142\n5    libc.so.6                          0x00002b63ad1a0460 __libc_start_main + 245\n6    tmpigx4pqg4                        0x0000564e2ac35329 <unavailable> + 4905\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest: Double?\n    var second_smallest: Double?\n    for number in numbers {\n        if let number = number as? Double {\n            if smallest == nil {\n                smallest = number\n            } else if second_smallest == nil {\n                if number < smallest! {\n                    second_smallest = smallest\n                    smallest = number\n                } else {\n                    second_smallest = number\n                }\n            } else if number < smallest! {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest! {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "/tmp/tmprr1a4_o5.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let sorted = numbers.sorted()\n    return sorted[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe6310_wd.swift:4:26: error: value of type 'AnyHashable' has no member 'sorted'\n    let sorted = numbers.sorted()\n                 ~~~~~~~ ^~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    return numbers.sorted()[1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1665509720,
      "stdout": "",
      "stderr": "tmpe4vcrczq/tmpe4vcrczq.swift:23: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6ddf117c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6ddee0eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6ddee0e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6ddee0d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe4vcrczq                        0x000055943105272e <unavailable> + 5934\n5    libc.so.6                          0x00002b6ddf303460 __libc_start_main + 245\n6    tmpe4vcrczq                        0x0000559431052259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest = Double.infinity\n    var second_smallest = Double.infinity\n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpz33jfe4n.swift:6:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    var smallest = Double.infinity\n    var second_smallest = Double.infinity\n    \n    for number in numbers {\n        if let number = number as? Double {\n            if number < smallest {\n                second_smallest = smallest\n                smallest = number\n            } else if number < second_smallest {\n                second_smallest = number\n            }\n        }\n    }\n    \n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124151,
      "stdout": "",
      "stderr": "/tmp/tmpe0g_y5ru.swift:7:19: error: for-in loop requires 'AnyHashable' to conform to 'Sequence'\n    for number in numbers {\n                  ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    let numbers = numbers as! [Double]\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    for number in numbers {\n        if number < smallest {\n            second_smallest = smallest\n            smallest = number\n        } else if number < second_smallest {\n            second_smallest = number\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "Could not cast value of type 'Swift.AnyHashable' (0x2b9b27fa0ac8) to 'Swift.Array<Swift.Double>' (0x2b9b280a0d48).\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the second smallest number in a list.\nfunc second_smallest(numbers: AnyHashable) -> Double? {\n    guard let numbers = numbers as? [Double] else {\n        return nil\n    }\n    guard numbers.count > 1 else {\n        return nil\n    }\n    var smallest = numbers[0]\n    var second_smallest = numbers[1]\n    if second_smallest < smallest {\n        smallest = numbers[1]\n        second_smallest = numbers[0]\n    }\n    for i in 2..<numbers.count {\n        if numbers[i] < smallest {\n            second_smallest = smallest\n            smallest = numbers[i]\n        } else if numbers[i] < second_smallest {\n            second_smallest = numbers[i]\n        }\n    }\n    return second_smallest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(second_smallest(numbers: [1, 2, -8, -2, 0, -2]) == -2)\nassert(second_smallest(numbers: [1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(second_smallest(numbers: [2, 2]) == nil)\nassert(second_smallest(numbers: [2, 2, 2]) == nil)",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "tmpg9es4syb/tmpg9es4syb.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4dbc3c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4dbc0bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4dbc0bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4dbc0bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg9es4syb                        0x000055d77f30286e <unavailable> + 6254\n5    libc.so.6                          0x00002b4dbc5b2460 __libc_start_main + 245\n6    tmpg9es4syb                        0x000055d77f302399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}