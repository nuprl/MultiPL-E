{
  "name": "mbpp_805_max_sum_list",
  "language": "swift",
  "prompt": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_list = [Int]()\n    var max_sum = 0\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for i in list {\n            sum += i\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_list: [Int] = []\n    var max_sum: Int = 0\n    for list in lists {\n        var sum: Int = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, combine: +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "/tmp/tmplm6u6_kp.swift:7:30: error: extraneous argument label 'combine:' in call\n        let sum = list.reduce(0, combine: +)\n                             ^   ~~~~~~~~~\n                                 \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for i in list {\n            sum += i\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_list = [Int]()\n    var max_sum = 0\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_list: [Int] = []\n    var max_sum = 0\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_list: [Int] = []\n    var max_sum: Int = 0\n    for list in lists {\n        var sum: Int = 0\n        for item in list {\n            sum += item\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for i in list {\n            sum += i\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for i in list {\n            sum += i\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        let sum = list.reduce(0, combine: +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "/tmp/tmpy2nre0eo.swift:7:30: error: extraneous argument label 'combine:' in call\n        let sum = list.reduce(0, combine: +)\n                             ^   ~~~~~~~~~\n                                 \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for i in list {\n            sum += i\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_sum_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_sum_list = list\n        }\n    }\n    return max_sum_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_list: [Int] = []\n    var max_sum: Int = 0\n    for list in lists {\n        var sum: Int = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    return lists.max(by: { $0.reduce(0, +) < $1.reduce(0, +) })!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for elem in list {\n            sum += elem\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, combine: +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "/tmp/tmplm6u6_kp.swift:7:30: error: extraneous argument label 'combine:' in call\n        let sum = list.reduce(0, combine: +)\n                             ^   ~~~~~~~~~\n                                 \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var maxSum = 0\n    var maxList: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > maxSum {\n            maxSum = sum\n            maxList = list\n        }\n    }\n    return maxList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for i in list {\n            sum += i\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        let sum = list.reduce(0, combine: +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "/tmp/tmpy2nre0eo.swift:7:30: error: extraneous argument label 'combine:' in call\n        let sum = list.reduce(0, combine: +)\n                             ^   ~~~~~~~~~\n                                 \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for i in list {\n            sum += i\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_list = [Int]()\n    var max_sum = 0\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, combine: +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "/tmp/tmplm6u6_kp.swift:7:30: error: extraneous argument label 'combine:' in call\n        let sum = list.reduce(0, combine: +)\n                             ^   ~~~~~~~~~\n                                 \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, combine: +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "/tmp/tmplm6u6_kp.swift:7:30: error: extraneous argument label 'combine:' in call\n        let sum = list.reduce(0, combine: +)\n                             ^   ~~~~~~~~~\n                                 \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_list: [Int] = []\n    var max_sum: Int = 0\n    for list in lists {\n        var sum: Int = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        let sum = list.reduce(0, combine: +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "/tmp/tmpy2nre0eo.swift:7:30: error: extraneous argument label 'combine:' in call\n        let sum = list.reduce(0, combine: +)\n                             ^   ~~~~~~~~~\n                                 \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for i in list {\n            sum += i\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for item in list {\n            sum += item\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_list = [Int]()\n    var max_sum = 0\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_list: [Int] = []\n    var max_sum = 0\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, combine: +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "/tmp/tmplm6u6_kp.swift:7:30: error: extraneous argument label 'combine:' in call\n        let sum = list.reduce(0, combine: +)\n                             ^   ~~~~~~~~~\n                                 \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_list: [Int] = []\n    var max_sum: Int = 0\n    for list in lists {\n        var sum: Int = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for i in list {\n            sum += i\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    return lists.max(by: { $0.reduce(0, +) < $1.reduce(0, +) })!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_list = [Int]()\n    var max_sum = 0\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for num in list {\n            sum += num\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, combine: +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "/tmp/tmplm6u6_kp.swift:7:30: error: extraneous argument label 'combine:' in call\n        let sum = list.reduce(0, combine: +)\n                             ^   ~~~~~~~~~\n                                 \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list = [Int]()\n    for list in lists {\n        var sum = 0\n        for i in list {\n            sum += i\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_list = [Int]()\n    var max_sum = 0\n    for list in lists {\n        let sum = list.reduce(0, combine: +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "/tmp/tmpg46atali.swift:7:30: error: extraneous argument label 'combine:' in call\n        let sum = list.reduce(0, combine: +)\n                             ^   ~~~~~~~~~\n                                 \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_list: [Int] = []\n    var max_sum: Int = 0\n    for list in lists {\n        var sum: Int = 0\n        for element in list {\n            sum += element\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1665510099,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, combine: +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "/tmp/tmplm6u6_kp.swift:7:30: error: extraneous argument label 'combine:' in call\n        let sum = list.reduce(0, combine: +)\n                             ^   ~~~~~~~~~\n                                 \n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function that returns the list in a list of lists whose sum of elements is the highest.\nfunc max_sum_list(lists: [[Int]]) -> [Int] {\n    var max_sum = 0\n    var max_list: [Int] = []\n    for list in lists {\n        let sum = list.reduce(0, combine: +)\n        if sum > max_sum {\n            max_sum = sum\n            max_list = list\n        }\n    }\n    return max_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_sum_list(lists: [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]) == [10, 11, 12])\nassert(max_sum_list(lists: [[3, 2, 1], [6, 5, 4], [12, 11, 10]]) == [12, 11, 10])\nassert(max_sum_list(lists: [[2, 3, 1]]) == [2, 3, 1])",
      "timestamp": 1666122583,
      "stdout": "",
      "stderr": "/tmp/tmplm6u6_kp.swift:7:30: error: extraneous argument label 'combine:' in call\n        let sum = list.reduce(0, combine: +)\n                             ^   ~~~~~~~~~\n                                 \n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}