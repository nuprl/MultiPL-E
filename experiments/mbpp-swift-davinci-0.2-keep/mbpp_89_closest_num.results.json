{
  "name": "mbpp_89_closest_num",
  "language": "swift",
  "prompt": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmpf1_i3qzi/tmpf1_i3qzi.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad8d759ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad8d7291b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad8d7291988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad8d72907b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf1_i3qzi                        0x0000555593c1a1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002ad8d7786460 __libc_start_main + 245\n6    tmpf1_i3qzi                        0x0000555593c19e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N & ~(1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpdjdp4vty/tmpdjdp4vty.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea8549fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea85196b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea85196988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea851957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdjdp4vty                        0x000055e4bb8201b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aea8568b460 __libc_start_main + 245\n6    tmpdjdp4vty                        0x000055e4bb81fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    \n    if c1 == 1 {\n        return N\n    }\n    \n    var p = 1\n    while p <= N {\n        p <<= 1\n    }\n    p >>= 1\n    \n    return N - p\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmppx8fwjc9/tmppx8fwjc9.swift:42: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b33c6c64c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b33c695bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b33c695b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b33c695a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppx8fwjc9                        0x0000563c7f3291b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b33c6e50460 __libc_start_main + 245\n6    tmppx8fwjc9                        0x0000563c7f328e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmp37_zeug4/tmp37_zeug4.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031840fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0318106b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0318106988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b03181057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp37_zeug4                        0x000055f4182ce1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b03185fb460 __libc_start_main + 245\n6    tmp37_zeug4                        0x000055f4182cde69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var result = 0\n    var i = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            result += 1 << i\n        }\n        i += 1\n        n >>= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmphsckzzvj/tmphsckzzvj.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acdb5494c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acdb518bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acdb518b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acdb518a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphsckzzvj                        0x0000555fb71e11b5 <unavailable> + 4533\n5    libc.so.6                          0x00002acdb5680460 __libc_start_main + 245\n6    tmphsckzzvj                        0x0000555fb71e0e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N & ~(1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpdjdp4vty/tmpdjdp4vty.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea8549fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea85196b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea85196988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea851957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdjdp4vty                        0x000055e4bb8201b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aea8568b460 __libc_start_main + 245\n6    tmpdjdp4vty                        0x000055e4bb81fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmpybk6cmla/tmpybk6cmla.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af82c438c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af82c12fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af82c12f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af82c12e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpybk6cmla                        0x0000556a45bff1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002af82c624460 __libc_start_main + 245\n6    tmpybk6cmla                        0x0000556a45bfee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var mask = 1\n    while mask <= N {\n        mask <<= 1\n    }\n    mask >>= 2\n    var result = N\n    while mask > 0 {\n        if (result & mask) == 0 {\n            result |= mask\n            if result <= N {\n                break\n            } else {\n                result ^= mask\n            }\n        }\n        mask >>= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmp6g9tekq6/tmp6g9tekq6.swift:51: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb41e26c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb41b1db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb41b1d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb41b1c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6g9tekq6                        0x000055764cbbd1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aeb42012460 __libc_start_main + 245\n6    tmp6g9tekq6                        0x000055764cbbce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpcj67sa6x/tmpcj67sa6x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b45bbe1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b45bbb15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b45bbb15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b45bbb147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcj67sa6x                        0x000055a9f6b901b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b45bc00a460 __libc_start_main + 245\n6    tmpcj67sa6x                        0x000055a9f6b8fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N & ~(1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpdjdp4vty/tmpdjdp4vty.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea8549fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea85196b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea85196988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea851957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdjdp4vty                        0x000055e4bb8201b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aea8568b460 __libc_start_main + 245\n6    tmpdjdp4vty                        0x000055e4bb81fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var N = N\n    var x = N\n    var y = N\n    var count = 0\n    while x > 0 || y > 0 {\n        if x % 2 != y % 2 {\n            count += 1\n        }\n        x /= 2\n        y /= 2\n    }\n    if count == 1 {\n        return N\n    }\n    var i = 0\n    while i < 32 {\n        if (N >> i) & 1 == 1 {\n            N ^= 1 << i\n            break\n        }\n        i += 1\n    }\n    return N\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmpzyjedztb/tmpzyjedztb.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adf1616cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adf15e63b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adf15e63988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adf15e627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzyjedztb                        0x0000558625749343 <unavailable> + 4931\n5    libc.so.6                          0x00002adf16358460 __libc_start_main + 245\n6    tmpzyjedztb                        0x0000558625748ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmp37_zeug4/tmp37_zeug4.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031840fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0318106b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0318106988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b03181057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp37_zeug4                        0x000055f4182ce1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b03185fb460 __libc_start_main + 245\n6    tmp37_zeug4                        0x000055f4182cde69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmp37_zeug4/tmp37_zeug4.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031840fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0318106b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0318106988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b03181057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp37_zeug4                        0x000055f4182ce1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b03185fb460 __libc_start_main + 245\n6    tmp37_zeug4                        0x000055f4182cde69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return N\n    }\n    return N - (1 << c0) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmprd_9vge_/tmprd_9vge_.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abb379d9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abb376d0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abb376d0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abb376cf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprd_9vge_                        0x0000562ec710a230 <unavailable> + 4656\n5    libc.so.6                          0x00002abb37bc5460 __libc_start_main + 245\n6    tmprd_9vge_                        0x0000562ec7109e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + (1 << c0) + (1 << (c1 - 2)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpdhpfuq52/tmpdhpfuq52.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab22f534c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab22f22bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab22f22b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab22f22a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdhpfuq52                        0x000055cbaf1741b5 <unavailable> + 4533\n5    libc.so.6                          0x00002ab22f720460 __libc_start_main + 245\n6    tmpdhpfuq52                        0x000055cbaf173e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var N = N\n    var count = 0\n    var result = 0\n    while N > 0 {\n        if N & 1 == 1 {\n            count += 1\n        }\n        N >>= 1\n    }\n    for _ in 0..<count {\n        result = (result << 1) + 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpp1bzivkg/tmpp1bzivkg.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b30b2baec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b30b28a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b30b28a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b30b28a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpp1bzivkg                        0x0000563c56ca3335 <unavailable> + 4917\n5    libc.so.6                          0x00002b30b2d9a460 __libc_start_main + 245\n6    tmpp1bzivkg                        0x0000563c56ca2fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return (1 << (c0 + c1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmp7fm3ozks/tmp7fm3ozks.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6718646c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b671833db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b671833d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b671833c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7fm3ozks                        0x000055f0a363a1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6718832460 __libc_start_main + 245\n6    tmp7fm3ozks                        0x000055f0a3639e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpniz1wn2v/tmpniz1wn2v.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b381212bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3811e22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3811e22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3811e217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpniz1wn2v                        0x0000564cd9a2f1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3812317460 __libc_start_main + 245\n6    tmpniz1wn2v                        0x0000564cd9a2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpcj67sa6x/tmpcj67sa6x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b45bbe1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b45bbb15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b45bbb15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b45bbb147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcj67sa6x                        0x000055a9f6b901b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b45bc00a460 __libc_start_main + 245\n6    tmpcj67sa6x                        0x000055a9f6b8fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return (1 << c0) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpyrd4h1hv/tmpyrd4h1hv.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b47be7d4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b47be4cbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b47be4cb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b47be4ca7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyrd4h1hv                        0x000055e3ce3de1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b47be9c0460 __libc_start_main + 245\n6    tmpyrd4h1hv                        0x000055e3ce3dde69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpabddfa61/tmpabddfa61.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4962a4dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4962744b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4962744988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49627437b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpabddfa61                        0x0000563017d121b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b4962c39460 __libc_start_main + 245\n6    tmpabddfa61                        0x0000563017d11e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmp37_zeug4/tmp37_zeug4.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031840fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0318106b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0318106988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b03181057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp37_zeug4                        0x000055f4182ce1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b03185fb460 __libc_start_main + 245\n6    tmp37_zeug4                        0x000055f4182cde69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpgt5d7_br/tmpgt5d7_br.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aec5e249c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aec5df40b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aec5df40988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aec5df3f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgt5d7_br                        0x0000557e163791b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aec5e435460 __libc_start_main + 245\n6    tmpgt5d7_br                        0x0000557e16378e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 > 0 {\n        return N - (1 << c1)\n    }\n    return N + (1 << c1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpqmfbgezq/tmpqmfbgezq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b41f7f55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b41f7c4cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b41f7c4c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b41f7c4b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqmfbgezq                        0x000055b5a49f31b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b41f8141460 __libc_start_main + 245\n6    tmpqmfbgezq                        0x000055b5a49f2e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return N\n    }\n    var mask = 1 << (c0 + c1)\n    mask -= 1\n    return N & mask\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpn9epcn6c/tmpn9epcn6c.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6c5706dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6c56d64b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6c56d64988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6c56d637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn9epcn6c                        0x000055673caeb1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6c57259460 __libc_start_main + 245\n6    tmpn9epcn6c                        0x000055673caeae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmp37_zeug4/tmp37_zeug4.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031840fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0318106b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0318106988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b03181057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp37_zeug4                        0x000055f4182ce1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b03185fb460 __libc_start_main + 245\n6    tmp37_zeug4                        0x000055f4182cde69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    \n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    \n    if c1 == 1 {\n        return N\n    }\n    \n    var p = 1\n    while p <= N {\n        p <<= 1\n    }\n    p >>= 1\n    \n    return N - p\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpd89pdxkm/tmpd89pdxkm.swift:43: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b62e0adac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b62e07d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b62e07d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b62e07d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd89pdxkm                        0x00005654cb5291b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b62e0cc6460 __libc_start_main + 245\n6    tmpd89pdxkm                        0x00005654cb528e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpniz1wn2v/tmpniz1wn2v.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b381212bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3811e22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3811e22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3811e217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpniz1wn2v                        0x0000564cd9a2f1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3812317460 __libc_start_main + 245\n6    tmpniz1wn2v                        0x0000564cd9a2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N & ~(1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpdjdp4vty/tmpdjdp4vty.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea8549fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea85196b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea85196988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea851957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdjdp4vty                        0x000055e4bb8201b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aea8568b460 __libc_start_main + 245\n6    tmpdjdp4vty                        0x000055e4bb81fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpgm1w5qhy/tmpgm1w5qhy.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1549a1ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1549711b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1549711988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b15497107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgm1w5qhy                        0x00005569dd8341b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b1549c06460 __libc_start_main + 245\n6    tmpgm1w5qhy                        0x00005569dd833e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpniz1wn2v/tmpniz1wn2v.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b381212bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3811e22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3811e22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3811e217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpniz1wn2v                        0x0000564cd9a2f1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3812317460 __libc_start_main + 245\n6    tmpniz1wn2v                        0x0000564cd9a2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 > 0 {\n        return N - (1 << c1)\n    }\n    return N + (1 << c1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpqmfbgezq/tmpqmfbgezq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b41f7f55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b41f7c4cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b41f7c4c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b41f7c4b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqmfbgezq                        0x000055b5a49f31b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b41f8141460 __libc_start_main + 245\n6    tmpqmfbgezq                        0x000055b5a49f2e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return (1 << c0) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpjhjltywx/tmpjhjltywx.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b997035dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9970054b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9970054988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b99700537b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjhjltywx                        0x0000557d94d0a1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b9970549460 __libc_start_main + 245\n6    tmpjhjltywx                        0x0000557d94d09e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmp37_zeug4/tmp37_zeug4.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031840fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0318106b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0318106988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b03181057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp37_zeug4                        0x000055f4182ce1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b03185fb460 __libc_start_main + 245\n6    tmp37_zeug4                        0x000055f4182cde69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpbz22kusi/tmpbz22kusi.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abcb073ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abcb0435b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abcb0435988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abcb04347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbz22kusi                        0x0000558626c651b5 <unavailable> + 4533\n5    libc.so.6                          0x00002abcb092a460 __libc_start_main + 245\n6    tmpbz22kusi                        0x0000558626c64e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return N\n    }\n    return N - (1 << c0) + (1 << (c0 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpk1epa9b4/tmpk1epa9b4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2386b09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2386800b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2386800988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23867ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk1epa9b4                        0x0000558a310981b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b2386cf5460 __libc_start_main + 245\n6    tmpk1epa9b4                        0x0000558a31097e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    var m = 1\n    var i = 0\n    while i < c0 + c1 {\n        if i < c1 {\n            m = m | (1 << i)\n        }\n        i += 1\n    }\n    return m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpsy92drzi/tmpsy92drzi.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b022e243c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b022df3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b022df3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b022df397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsy92drzi                        0x00005616959821b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b022e42f460 __libc_start_main + 245\n6    tmpsy92drzi                        0x0000561695981e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpbz22kusi/tmpbz22kusi.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abcb073ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abcb0435b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abcb0435988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abcb04347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbz22kusi                        0x0000558626c651b5 <unavailable> + 4533\n5    libc.so.6                          0x00002abcb092a460 __libc_start_main + 245\n6    tmpbz22kusi                        0x0000558626c64e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return N\n    }\n    return N - (1 << c0) + (1 << (c0 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpk1epa9b4/tmpk1epa9b4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2386b09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2386800b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2386800988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23867ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk1epa9b4                        0x0000558a310981b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b2386cf5460 __libc_start_main + 245\n6    tmpk1epa9b4                        0x0000558a31097e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmp37_zeug4/tmp37_zeug4.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031840fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0318106b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0318106988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b03181057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp37_zeug4                        0x000055f4182ce1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b03185fb460 __libc_start_main + 245\n6    tmp37_zeug4                        0x000055f4182cde69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpcj67sa6x/tmpcj67sa6x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b45bbe1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b45bbb15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b45bbb15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b45bbb147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcj67sa6x                        0x000055a9f6b901b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b45bc00a460 __libc_start_main + 245\n6    tmpcj67sa6x                        0x000055a9f6b8fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return N\n    }\n    return N - (1 << c0) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmprd_9vge_/tmprd_9vge_.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abb379d9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abb376d0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abb376d0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abb376cf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprd_9vge_                        0x0000562ec710a230 <unavailable> + 4656\n5    libc.so.6                          0x00002abb37bc5460 __libc_start_main + 245\n6    tmprd_9vge_                        0x0000562ec7109e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var p = 1\n    while p <= N {\n        p <<= 1\n    }\n    return p - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpe7pa8aga/tmpe7pa8aga.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b283a48cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b283a183b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b283a183988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b283a1827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe7pa8aga                        0x000055d0869a91b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b283a678460 __libc_start_main + 245\n6    tmpe7pa8aga                        0x000055d0869a8e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var p = 1\n    while p <= N {\n        p <<= 1\n    }\n    p >>= 1\n    return N - p\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmp92wxfmnt/tmp92wxfmnt.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9ebcdbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9eb9d2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9eb9d2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9eb9d17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp92wxfmnt                        0x0000557e0eabb1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002af9ebec7460 __libc_start_main + 245\n6    tmp92wxfmnt                        0x0000557e0eabae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var num = N\n    var i = 0\n    var j = 0\n    var count = 0\n    while num > 0 {\n        if num & 1 == 1 {\n            i = count\n        }\n        count += 1\n        num >>= 1\n    }\n    count = 0\n    num = N\n    while num > 0 {\n        if num & 1 == 0 {\n            j = count\n        }\n        count += 1\n        num >>= 1\n    }\n    return N - (1 << i) + (1 << j)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpztvz744l/tmpztvz744l.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc7cc59c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc7c950b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc7c950988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc7c94f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpztvz744l                        0x000055957ffdc1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002acc7ce45460 __libc_start_main + 245\n6    tmpztvz744l                        0x000055957ffdbe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpcj67sa6x/tmpcj67sa6x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b45bbe1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b45bbb15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b45bbb15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b45bbb147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcj67sa6x                        0x000055a9f6b901b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b45bc00a460 __libc_start_main + 245\n6    tmpcj67sa6x                        0x000055a9f6b8fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var N = N\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    \n    while N > 0 {\n        a = N % 2\n        N = N / 2\n        b = N % 2\n        N = N / 2\n        c = N % 2\n        N = N / 2\n        d = N % 2\n        N = N / 2\n        e = N % 2\n        N = N / 2\n        f = N % 2\n        N = N / 2\n        g = N % 2\n        N = N / 2\n        h = N % 2\n        N = N / 2\n        i = N % 2\n        N = N / 2\n        j = N % 2\n        N = N / 2\n    }\n    \n    if j == 1 {\n        return 0\n    } else if i == 1 {\n        return 2\n    } else if h == 1 {\n        return 4\n    } else if g == 1 {\n        return 8\n    } else if f == 1 {\n        return 16\n    } else if e == 1 {\n        return 32\n    } else if d == 1 {\n        return 64\n    } else if c == 1 {\n        return 128\n    } else if b == 1 {\n        return 256\n    } else if a == 1 {\n        return 512\n    }\n    \n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmp6gytcidd/tmp6gytcidd.swift:77: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4cfe9c6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4cfe6bdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4cfe6bd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4cfe6bc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6gytcidd                        0x000055de01856245 <unavailable> + 4677\n5    libc.so.6                          0x00002b4cfebb2460 __libc_start_main + 245\n6    tmp6gytcidd                        0x000055de01855ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpqulls955/tmpqulls955.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2169ca4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b216999bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b216999b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b216999a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqulls955                        0x00005588a16a71b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b2169e90460 __libc_start_main + 245\n6    tmpqulls955                        0x00005588a16a6e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return N\n    }\n    return N - (1 << c0) + (1 << (c0 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpk1epa9b4/tmpk1epa9b4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2386b09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2386800b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2386800988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23867ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk1epa9b4                        0x0000558a310981b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b2386cf5460 __libc_start_main + 245\n6    tmpk1epa9b4                        0x0000558a31097e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var count = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            break\n        }\n        n = n >> 1\n        count += 1\n    }\n    return N - (1 << count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmphlcnx12r/tmphlcnx12r.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba6abf89c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba6abc80b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba6abc80988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba6abc7f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphlcnx12r                        0x000055a32493d2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002ba6ac175460 __libc_start_main + 245\n6    tmphlcnx12r                        0x000055a32493ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var num = N\n    var closest = 0\n    var diff = Int.max\n    while num > 0 {\n        let last_digit = num % 10\n        if last_digit == 0 {\n            num /= 10\n            continue\n        }\n        let new_num = num - 1\n        let new_diff = N - new_num\n        if new_diff < diff {\n            closest = new_num\n            diff = new_diff\n        }\n        num /= 10\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmp37_zeug4/tmp37_zeug4.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031840fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0318106b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0318106988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b03181057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp37_zeug4                        0x000055f4182ce1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b03185fb460 __libc_start_main + 245\n6    tmp37_zeug4                        0x000055f4182cde69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var m = 1\n    var i = 0\n    while i < c0 {\n        m <<= 1\n        i += 1\n    }\n    return N - m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpzihrcgh2/tmpzihrcgh2.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91ff74cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91ff443b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b91ff443988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91ff4427b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzihrcgh2                        0x000055c2bca971b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b91ff938460 __libc_start_main + 245\n6    tmpzihrcgh2                        0x000055c2bca96e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpabddfa61/tmpabddfa61.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4962a4dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4962744b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4962744988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b49627437b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpabddfa61                        0x0000563017d121b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b4962c39460 __libc_start_main + 245\n6    tmpabddfa61                        0x0000563017d11e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    \n    if c1 == 1 {\n        return N - 1\n    }\n    \n    var p = 1\n    while p <= N {\n        p <<= 1\n    }\n    p >>= 1\n    \n    return N - p\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmp__3p4910/tmp__3p4910.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab15a48cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab15a183b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab15a183988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab15a1827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp__3p4910                        0x000055c7fa3bc1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002ab15a678460 __libc_start_main + 245\n6    tmp__3p4910                        0x000055c7fa3bbe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpcj67sa6x/tmpcj67sa6x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b45bbe1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b45bbb15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b45bbb15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b45bbb147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcj67sa6x                        0x000055a9f6b901b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b45bc00a460 __libc_start_main + 245\n6    tmpcj67sa6x                        0x000055a9f6b8fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var num = N\n    var i = 0\n    while num > 0 {\n        if num & 1 == 1 {\n            break\n        }\n        num >>= 1\n        i += 1\n    }\n    return N - (1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpx2jxjpiy/tmpx2jxjpiy.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae5e5b57c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae5e584eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae5e584e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae5e584d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx2jxjpiy                        0x00005577379142b3 <unavailable> + 4787\n5    libc.so.6                          0x00002ae5e5d43460 __libc_start_main + 245\n6    tmpx2jxjpiy                        0x0000557737913e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return N\n    }\n    return N - (1 << (c0 + c1)) + (1 << c1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpb4hlq5ld/tmpb4hlq5ld.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1318dac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1315d1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1315d1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1315d07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpb4hlq5ld                        0x000056379b8d41b5 <unavailable> + 4533\n5    libc.so.6                          0x00002ab131ac6460 __libc_start_main + 245\n6    tmpb4hlq5ld                        0x000056379b8d3e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 > 0 {\n        return N - (1 << c1)\n    }\n    return N + (1 << (c1 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmphovvf_ni/tmphovvf_ni.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3e641b7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3e63eaeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3e63eae988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3e63ead7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphovvf_ni                        0x0000555b2bc981b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3e643a3460 __libc_start_main + 245\n6    tmphovvf_ni                        0x0000555b2bc97e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return N\n    }\n    return N - (1 << c0) + (1 << (c0 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpk1epa9b4/tmpk1epa9b4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2386b09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2386800b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2386800988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23867ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk1epa9b4                        0x0000558a310981b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b2386cf5460 __libc_start_main + 245\n6    tmpk1epa9b4                        0x0000558a31097e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 > 0 {\n        return N - (1 << (c0 - 1))\n    }\n    return N + (1 << c1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmp95gnrkth/tmp95gnrkth.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aed82fdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aed82cd6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aed82cd6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aed82cd57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp95gnrkth                        0x000055d538957230 <unavailable> + 4656\n5    libc.so.6                          0x00002aed831cb460 __libc_start_main + 245\n6    tmp95gnrkth                        0x000055d538956e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var bit_count = 0\n    var bit_count_1 = 0\n    var bit_count_0 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            bit_count_1 += 1\n        } else {\n            bit_count_0 += 1\n        }\n        bit_count += 1\n        n >>= 1\n    }\n    var result = 0\n    for i in 0..<bit_count {\n        if i < bit_count_1 {\n            result |= 1 << i\n        } else {\n            result |= 0 << i\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpwkk242oq/tmpwkk242oq.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2551f3ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2551c31b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2551c31988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2551c307b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwkk242oq                        0x0000558b3e030335 <unavailable> + 4917\n5    libc.so.6                          0x00002b2552126460 __libc_start_main + 245\n6    tmpwkk242oq                        0x0000558b3e02ffe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c0) + (1 << (c1 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpwqnwbcr6/tmpwqnwbcr6.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adeeb77ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adeeb471b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adeeb471988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adeeb4707b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwqnwbcr6                        0x000055bf1e7d01b5 <unavailable> + 4533\n5    libc.so.6                          0x00002adeeb966460 __libc_start_main + 245\n6    tmpwqnwbcr6                        0x000055bf1e7cfe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpcj67sa6x/tmpcj67sa6x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b45bbe1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b45bbb15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b45bbb15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b45bbb147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcj67sa6x                        0x000055a9f6b901b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b45bc00a460 __libc_start_main + 245\n6    tmpcj67sa6x                        0x000055a9f6b8fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N & ~(1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpdjdp4vty/tmpdjdp4vty.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea8549fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea85196b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea85196988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea851957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdjdp4vty                        0x000055e4bb8201b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aea8568b460 __libc_start_main + 245\n6    tmpdjdp4vty                        0x000055e4bb81fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c0) + (1 << (c1 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpwqnwbcr6/tmpwqnwbcr6.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adeeb77ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adeeb471b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adeeb471988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adeeb4707b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwqnwbcr6                        0x000055bf1e7d01b5 <unavailable> + 4533\n5    libc.so.6                          0x00002adeeb966460 __libc_start_main + 245\n6    tmpwqnwbcr6                        0x000055bf1e7cfe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var p = 1\n    while p <= N {\n        p <<= 1\n    }\n    p >>= 1\n    return N - p\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmp92wxfmnt/tmp92wxfmnt.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af9ebcdbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af9eb9d2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af9eb9d2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af9eb9d17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp92wxfmnt                        0x0000557e0eabb1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002af9ebec7460 __libc_start_main + 245\n6    tmp92wxfmnt                        0x0000557e0eabae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N & ~(1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpdjdp4vty/tmpdjdp4vty.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea8549fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea85196b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea85196988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea851957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdjdp4vty                        0x000055e4bb8201b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aea8568b460 __libc_start_main + 245\n6    tmpdjdp4vty                        0x000055e4bb81fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmp37_zeug4/tmp37_zeug4.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031840fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0318106b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0318106988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b03181057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp37_zeug4                        0x000055f4182ce1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b03185fb460 __libc_start_main + 245\n6    tmp37_zeug4                        0x000055f4182cde69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpniz1wn2v/tmpniz1wn2v.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b381212bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3811e22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3811e22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3811e217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpniz1wn2v                        0x0000564cd9a2f1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3812317460 __libc_start_main + 245\n6    tmpniz1wn2v                        0x0000564cd9a2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var mask = 1\n    var i = 0\n    while i < c0 {\n        mask <<= 1\n        i += 1\n    }\n    return N & ~mask\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmp7iahye5q/tmp7iahye5q.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b60fee22c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b60feb19b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b60feb19988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b60feb187b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7iahye5q                        0x000055d6080ac1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b60ff00e460 __libc_start_main + 245\n6    tmp7iahye5q                        0x000055d6080abe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpgm1w5qhy/tmpgm1w5qhy.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1549a1ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1549711b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1549711988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b15497107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgm1w5qhy                        0x00005569dd8341b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b1549c06460 __libc_start_main + 245\n6    tmpgm1w5qhy                        0x00005569dd833e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var mask = 1\n    while mask <= N {\n        mask <<= 1\n    }\n    mask >>= 1\n    return N - mask\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmppkgvbkgy/tmppkgvbkgy.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeafa57bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeafa272b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeafa272988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeafa2717b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppkgvbkgy                        0x0000557c4d7791b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aeafa767460 __libc_start_main + 245\n6    tmppkgvbkgy                        0x0000557c4d778e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var mask = 1\n    while mask < N {\n        mask <<= 1\n    }\n    mask >>= 1\n    return N - mask\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpjenoa812/tmpjenoa812.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8650322c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8650019b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8650019988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b86500187b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjenoa812                        0x000055d0a61be1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b865050e460 __libc_start_main + 245\n6    tmpjenoa812                        0x000055d0a61bde69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    var last_bit = 0\n    while n > 0 {\n        let bit = n & 1\n        if bit == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        if bit == 1 && last_bit == 0 {\n            break\n        }\n        last_bit = bit\n        n >>= 1\n    }\n    return N - (1 << c0) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpoacsp1rl/tmpoacsp1rl.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac82423cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac823f33b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac823f33988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac823f327b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpoacsp1rl                        0x00005593ab1872b3 <unavailable> + 4787\n5    libc.so.6                          0x00002ac824428460 __libc_start_main + 245\n6    tmpoacsp1rl                        0x00005593ab186e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpvhg5lbap/tmpvhg5lbap.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b823caafc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b823c7a6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b823c7a6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b823c7a57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvhg5lbap                        0x00005601381de1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b823cc9b460 __libc_start_main + 245\n6    tmpvhg5lbap                        0x00005601381dde69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var bit_count = 0\n    var bit_count_next = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            bit_count += 1\n        }\n        n >>= 1\n        if n & 1 == 0 {\n            bit_count_next += 1\n        }\n    }\n    return N - (1 << bit_count) + (1 << bit_count_next)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmps3h3oew6/tmps3h3oew6.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aad4bad8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aad4b7cfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aad4b7cf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aad4b7ce7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps3h3oew6                        0x000055aaf731c1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aad4bcc4460 __libc_start_main + 245\n6    tmps3h3oew6                        0x000055aaf731be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N & ~(1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpdjdp4vty/tmpdjdp4vty.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea8549fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea85196b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea85196988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea851957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdjdp4vty                        0x000055e4bb8201b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aea8568b460 __libc_start_main + 245\n6    tmpdjdp4vty                        0x000055e4bb81fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpcj67sa6x/tmpcj67sa6x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b45bbe1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b45bbb15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b45bbb15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b45bbb147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcj67sa6x                        0x000055a9f6b901b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b45bc00a460 __libc_start_main + 245\n6    tmpcj67sa6x                        0x000055a9f6b8fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return (1 << c1) + (1 << (c0 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpgbj4x6b8/tmpgbj4x6b8.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b672a000c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6729cf7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6729cf7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6729cf67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgbj4x6b8                        0x00005558a26111b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b672a1ec460 __libc_start_main + 245\n6    tmpgbj4x6b8                        0x00005558a2610e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 > 0 {\n        return N - (1 << c1)\n    }\n    return N + (1 << (c1 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmphovvf_ni/tmphovvf_ni.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3e641b7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3e63eaeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3e63eae988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3e63ead7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphovvf_ni                        0x0000555b2bc981b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3e643a3460 __libc_start_main + 245\n6    tmphovvf_ni                        0x0000555b2bc97e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        let r = n % 2\n        if r == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n /= 2\n    }\n    if c1 == 0 {\n        return 0\n    }\n    return N - (1 << c0) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpelp32tdf/tmpelp32tdf.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b520e496c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b520e18db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b520e18d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b520e18c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpelp32tdf                        0x00005602e17dc343 <unavailable> + 4931\n5    libc.so.6                          0x00002b520e682460 __libc_start_main + 245\n6    tmpelp32tdf                        0x00005602e17dbef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return c1 * (1 << c0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpnsxtudw6/tmpnsxtudw6.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b64ef37cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b64ef073b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b64ef073988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b64ef0727b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnsxtudw6                        0x000056057f1f31b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b64ef568460 __libc_start_main + 245\n6    tmpnsxtudw6                        0x000056057f1f2e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var count = 0\n    var i = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            count += 1\n        }\n        n = n >> 1\n        i += 1\n    }\n    if count == 1 {\n        return N - 1\n    }\n    var mask = 1 << (i - 1)\n    n = N\n    while n & mask == 0 {\n        mask = mask >> 1\n    }\n    n = n & ~mask\n    mask = mask >> 1\n    n = n | mask\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmperl8gv86/tmperl8gv86.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9961316c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b996100db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b996100d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b996100c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmperl8gv86                        0x0000562bb5c681b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b9961502460 __libc_start_main + 245\n6    tmperl8gv86                        0x0000562bb5c67e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpniz1wn2v/tmpniz1wn2v.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b381212bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3811e22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3811e22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3811e217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpniz1wn2v                        0x0000564cd9a2f1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3812317460 __libc_start_main + 245\n6    tmpniz1wn2v                        0x0000564cd9a2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpniz1wn2v/tmpniz1wn2v.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b381212bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3811e22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3811e22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3811e217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpniz1wn2v                        0x0000564cd9a2f1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3812317460 __libc_start_main + 245\n6    tmpniz1wn2v                        0x0000564cd9a2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpniz1wn2v/tmpniz1wn2v.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b381212bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3811e22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3811e22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3811e217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpniz1wn2v                        0x0000564cd9a2f1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3812317460 __libc_start_main + 245\n6    tmpniz1wn2v                        0x0000564cd9a2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var m = 1\n    var i = 0\n    while i < c0 {\n        m <<= 1\n        i += 1\n    }\n    return N - m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpzihrcgh2/tmpzihrcgh2.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b91ff74cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b91ff443b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b91ff443988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b91ff4427b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpzihrcgh2                        0x000055c2bca971b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b91ff938460 __libc_start_main + 245\n6    tmpzihrcgh2                        0x000055c2bca96e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpniz1wn2v/tmpniz1wn2v.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b381212bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3811e22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3811e22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3811e217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpniz1wn2v                        0x0000564cd9a2f1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3812317460 __libc_start_main + 245\n6    tmpniz1wn2v                        0x0000564cd9a2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return N\n    }\n    return N - (1 << c0) + (1 << (c0 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpk1epa9b4/tmpk1epa9b4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2386b09c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2386800b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2386800988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23867ff7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpk1epa9b4                        0x0000558a310981b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b2386cf5460 __libc_start_main + 245\n6    tmpk1epa9b4                        0x0000558a31097e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return N\n    }\n    return N - (1 << c1) + (1 << (c1 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpqlmsiyvg/tmpqlmsiyvg.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab2af7c8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab2af4bfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab2af4bf988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab2af4be7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqlmsiyvg                        0x000055cca476a1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002ab2af9b4460 __libc_start_main + 245\n6    tmpqlmsiyvg                        0x000055cca4769e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var p = 1\n    while p < N {\n        if N & p == 0 {\n            break\n        }\n        p <<= 1\n    }\n    return N - p\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpe67x7tx1/tmpe67x7tx1.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b48ff6efc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b48ff3e6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b48ff3e6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b48ff3e57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe67x7tx1                        0x00005578522661b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b48ff8db460 __libc_start_main + 245\n6    tmpe67x7tx1                        0x0000557852265e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpcj67sa6x/tmpcj67sa6x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b45bbe1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b45bbb15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b45bbb15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b45bbb147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcj67sa6x                        0x000055a9f6b901b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b45bc00a460 __libc_start_main + 245\n6    tmpcj67sa6x                        0x000055a9f6b8fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var i = N\n    while i > 0 {\n        if is_prime(i) {\n            return i\n        }\n        i -= 1\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "/tmp/tmpkg1vvfk3.swift:6:12: error: cannot find 'is_prime' in scope\n        if is_prime(i) {\n           ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N & ~(1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpdjdp4vty/tmpdjdp4vty.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea8549fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea85196b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea85196988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea851957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdjdp4vty                        0x000055e4bb8201b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aea8568b460 __libc_start_main + 245\n6    tmpdjdp4vty                        0x000055e4bb81fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpjrtoxtyp/tmpjrtoxtyp.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b340d2c7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b340cfbeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b340cfbe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b340cfbd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjrtoxtyp                        0x00005570a88d91b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b340d4b3460 __libc_start_main + 245\n6    tmpjrtoxtyp                        0x00005570a88d8e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var num = N\n    var bit_count = 0\n    var bit_set = false\n    while num > 0 {\n        if num & 1 == 1 {\n            if bit_set {\n                break\n            }\n            bit_set = true\n        }\n        bit_count += 1\n        num >>= 1\n    }\n    return N - (1 << bit_count) + (1 << (bit_count - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpwwyr3iwq/tmpwwyr3iwq.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0cc705cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0cc6d53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0cc6d53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0cc6d527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwwyr3iwq                        0x0000557a340862b3 <unavailable> + 4787\n5    libc.so.6                          0x00002b0cc7248460 __libc_start_main + 245\n6    tmpwwyr3iwq                        0x0000557a34085e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var result = 0\n    var i = 0\n    while n > 0 {\n        let bit = n & 1\n        n = n >> 1\n        if bit == 1 {\n            result = result | 1 << i\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmprpg2d5x4/tmprpg2d5x4.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7054d83c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7054a7ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7054a7a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7054a797b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprpg2d5x4                        0x0000556cdcb451b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b7054f6f460 __libc_start_main + 245\n6    tmprpg2d5x4                        0x0000556cdcb44e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpbz22kusi/tmpbz22kusi.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002abcb073ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002abcb0435b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002abcb0435988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002abcb04347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbz22kusi                        0x0000558626c651b5 <unavailable> + 4533\n5    libc.so.6                          0x00002abcb092a460 __libc_start_main + 245\n6    tmpbz22kusi                        0x0000558626c64e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var mask = 1\n    while mask <= n {\n        mask <<= 1\n    }\n    mask >>= 1\n    return N ^ mask\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpe1w7jnkx/tmpe1w7jnkx.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b65b95dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b65b92d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b65b92d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65b92d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe1w7jnkx                        0x0000556ab673d1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b65b97c8460 __libc_start_main + 245\n6    tmpe1w7jnkx                        0x0000556ab673ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    if c0 > c1 {\n        return N - (1 << c1)\n    } else {\n        return N + (1 << c0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpgz3u_x1x/tmpgz3u_x1x.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b72c9572c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b72c9269b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b72c9269988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b72c92687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgz3u_x1x                        0x000056492382c1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b72c975e460 __libc_start_main + 245\n6    tmpgz3u_x1x                        0x000056492382be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0-1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpw9jltadw/tmpw9jltadw.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3055de5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3055adcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3055adc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3055adb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw9jltadw                        0x0000557d969191b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3055fd1460 __libc_start_main + 245\n6    tmpw9jltadw                        0x0000557d96918e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n = n >> 1\n    }\n    return N & ~(1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmp4ohiki5g/tmp4ohiki5g.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b156855ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1568251b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1568251988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b15682507b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4ohiki5g                        0x000055fdc102b1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b1568746460 __libc_start_main + 245\n6    tmp4ohiki5g                        0x000055fdc102ae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpcj67sa6x/tmpcj67sa6x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b45bbe1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b45bbb15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b45bbb15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b45bbb147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcj67sa6x                        0x000055a9f6b901b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b45bc00a460 __libc_start_main + 245\n6    tmpcj67sa6x                        0x000055a9f6b8fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c0) + (1 << (c1 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmp7ya929e0/tmp7ya929e0.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad613f2dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad613c24b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad613c24988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad613c237b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7ya929e0                        0x00005615aebf31b5 <unavailable> + 4533\n5    libc.so.6                          0x00002ad614119460 __libc_start_main + 245\n6    tmp7ya929e0                        0x00005615aebf2e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    let binary = String(N, radix: 2)\n    var result = \"\"\n    var i = 0\n    while i < binary.count {\n        if binary[binary.index(binary.startIndex, offsetBy: i)] == \"1\" {\n            result += \"1\"\n        } else {\n            result += \"0\"\n        }\n        i += 1\n    }\n    return Int(result, radix: 2)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpkby_jshv/tmpkby_jshv.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b56ec8f4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b56ec5ebb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b56ec5eb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b56ec5ea7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkby_jshv                        0x000055f95d967765 <unavailable> + 5989\n5    libc.so.6                          0x00002b56ecae0460 __libc_start_main + 245\n6    tmpkby_jshv                        0x000055f95d967419 <unavailable> + 5145\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var num = N\n    var i = 0\n    var j = 0\n    while num > 0 {\n        if num & 1 == 1 {\n            i = j\n        }\n        j += 1\n        num >>= 1\n    }\n    return N & ~(1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpcqq2c5ne/tmpcqq2c5ne.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b20a3a9cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b20a3793b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b20a3793988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b20a37927b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcqq2c5ne                        0x000055f74f05c1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b20a3c88460 __libc_start_main + 245\n6    tmpcqq2c5ne                        0x000055f74f05be69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 > 0 {\n        return N - (1 << (c0 - 1))\n    } else {\n        return N + (1 << c1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmph2acx_ix/tmph2acx_ix.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b90c9df3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b90c9aeab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b90c9aea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b90c9ae97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph2acx_ix                        0x00005651d5f7b230 <unavailable> + 4656\n5    libc.so.6                          0x00002b90c9fdf460 __libc_start_main + 245\n6    tmph2acx_ix                        0x00005651d5f7ae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return c1 == 1 ? c0 : c0 + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpfddieagh/tmpfddieagh.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae16f1b9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae16eeb0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae16eeb0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae16eeaf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfddieagh                        0x00005584da7171b5 <unavailable> + 4533\n5    libc.so.6                          0x00002ae16f3a5460 __libc_start_main + 245\n6    tmpfddieagh                        0x00005584da716e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N & ~(1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpdjdp4vty/tmpdjdp4vty.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea8549fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea85196b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea85196988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea851957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdjdp4vty                        0x000055e4bb8201b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aea8568b460 __libc_start_main + 245\n6    tmpdjdp4vty                        0x000055e4bb81fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return (1 << c0) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpjhjltywx/tmpjhjltywx.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b997035dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9970054b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9970054988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b99700537b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjhjltywx                        0x0000557d94d0a1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b9970549460 __libc_start_main + 245\n6    tmpjhjltywx                        0x0000557d94d09e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 + c1 == 31 || c0 + c1 == 0 {\n        return -1\n    }\n    var p = c0 + c1\n    n = N\n    n &= ((~0) << (p + 1))\n    n |= (1 << (c0 - 1)) - 1\n    n |= 1 << (c0 - 1)\n    return n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpmsn7i8fo/tmpmsn7i8fo.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b62fb72bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b62fb422b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b62fb422988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b62fb4217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmsn7i8fo                        0x0000556143a581b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b62fb917460 __libc_start_main + 245\n6    tmpmsn7i8fo                        0x0000556143a57e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var mask = 1\n    while mask <= N {\n        if (N & mask) == 0 {\n            break\n        }\n        mask <<= 1\n    }\n    return N - mask\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmprs26di37/tmprs26di37.swift:41: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2f2821ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2f27f15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2f27f15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2f27f147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprs26di37                        0x0000563690d821b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b2f2840a460 __libc_start_main + 245\n6    tmprs26di37                        0x0000563690d81e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 > 0 {\n        return N - (1 << c1)\n    }\n    return N + (1 << c1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpqmfbgezq/tmpqmfbgezq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b41f7f55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b41f7c4cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b41f7c4c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b41f7c4b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqmfbgezq                        0x000055b5a49f31b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b41f8141460 __libc_start_main + 245\n6    tmpqmfbgezq                        0x000055b5a49f2e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var p = 1\n    while p < N {\n        p <<= 1\n    }\n    return p + (N - p) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpo4u956lo/tmpo4u956lo.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3b126dec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3b123d5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3b123d5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3b123d47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo4u956lo                        0x000055612d66c245 <unavailable> + 4677\n5    libc.so.6                          0x00002b3b128ca460 __libc_start_main + 245\n6    tmpo4u956lo                        0x000055612d66bef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpcj67sa6x/tmpcj67sa6x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b45bbe1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b45bbb15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b45bbb15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b45bbb147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcj67sa6x                        0x000055a9f6b901b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b45bc00a460 __libc_start_main + 245\n6    tmpcj67sa6x                        0x000055a9f6b8fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmp37_zeug4/tmp37_zeug4.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031840fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0318106b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0318106988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b03181057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp37_zeug4                        0x000055f4182ce1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b03185fb460 __libc_start_main + 245\n6    tmp37_zeug4                        0x000055f4182cde69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmp37_zeug4/tmp37_zeug4.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b031840fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0318106b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0318106988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b03181057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp37_zeug4                        0x000055f4182ce1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b03185fb460 __libc_start_main + 245\n6    tmp37_zeug4                        0x000055f4182cde69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmpybk6cmla/tmpybk6cmla.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af82c438c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af82c12fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af82c12f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af82c12e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpybk6cmla                        0x0000556a45bff1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002af82c624460 __libc_start_main + 245\n6    tmpybk6cmla                        0x0000556a45bfee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510434,
      "stdout": "",
      "stderr": "tmpybk6cmla/tmpybk6cmla.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af82c438c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af82c12fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af82c12f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af82c12e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpybk6cmla                        0x0000556a45bff1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002af82c624460 __libc_start_main + 245\n6    tmpybk6cmla                        0x0000556a45bfee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpniz1wn2v/tmpniz1wn2v.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b381212bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3811e22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3811e22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3811e217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpniz1wn2v                        0x0000564cd9a2f1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3812317460 __libc_start_main + 245\n6    tmpniz1wn2v                        0x0000564cd9a2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var mask = 1\n    while mask < N {\n        mask = mask << 1\n    }\n    return N - mask\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmp28ry96jq/tmp28ry96jq.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4ab6bf5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4ab68ecb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4ab68ec988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4ab68eb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp28ry96jq                        0x000056042c0f61b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b4ab6de1460 __libc_start_main + 245\n6    tmp28ry96jq                        0x000056042c0f5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpx04qfnjk/tmpx04qfnjk.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9326f1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9326c15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9326c15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9326c147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpx04qfnjk                        0x0000558add0fa1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b932710a460 __libc_start_main + 245\n6    tmpx04qfnjk                        0x0000558add0f9e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n = n >> 1\n    }\n    if c0 > 0 {\n        return N - (1 << c1)\n    } else {\n        return N - (1 << (c1 - 1))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpvyk44y5v/tmpvyk44y5v.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b105d178c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b105ce6fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b105ce6f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b105ce6e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvyk44y5v                        0x0000562ad12f61b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b105d364460 __libc_start_main + 245\n6    tmpvyk44y5v                        0x0000562ad12f5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpcj67sa6x/tmpcj67sa6x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b45bbe1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b45bbb15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b45bbb15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b45bbb147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcj67sa6x                        0x000055a9f6b901b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b45bc00a460 __libc_start_main + 245\n6    tmpcj67sa6x                        0x000055a9f6b8fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N ^ (1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmp9vfx5fb2/tmp9vfx5fb2.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7edd06dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7edcd64b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7edcd64988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7edcd637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9vfx5fb2                        0x000055ad405591b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b7edd259460 __libc_start_main + 245\n6    tmp9vfx5fb2                        0x000055ad40558e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpjrtoxtyp/tmpjrtoxtyp.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b340d2c7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b340cfbeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b340cfbe988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b340cfbd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjrtoxtyp                        0x00005570a88d91b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b340d4b3460 __libc_start_main + 245\n6    tmpjrtoxtyp                        0x00005570a88d8e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return -1\n    }\n    return N - (1 << (c0 + c1)) + (1 << c0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpq0fftc4x/tmpq0fftc4x.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acf98072c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acf97d69b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acf97d69988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acf97d687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpq0fftc4x                        0x000055fd394051b5 <unavailable> + 4533\n5    libc.so.6                          0x00002acf9825e460 __libc_start_main + 245\n6    tmpq0fftc4x                        0x000055fd39404e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var p = 1\n    while p < N {\n        p <<= 1\n    }\n    return p + (N - p) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpo4u956lo/tmpo4u956lo.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3b126dec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3b123d5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3b123d5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3b123d47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpo4u956lo                        0x000055612d66c245 <unavailable> + 4677\n5    libc.so.6                          0x00002b3b128ca460 __libc_start_main + 245\n6    tmpo4u956lo                        0x000055612d66bef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var mask = 1\n    while mask <= N {\n        mask <<= 1\n    }\n    return N - mask / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmp69hgm3d9/tmp69hgm3d9.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4e0a5dcc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4e0a2d3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4e0a2d3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4e0a2d27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp69hgm3d9                        0x000055e662dd1245 <unavailable> + 4677\n5    libc.so.6                          0x00002b4e0a7c8460 __libc_start_main + 245\n6    tmp69hgm3d9                        0x000055e662dd0ef9 <unavailable> + 3833\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N & ~(1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpdjdp4vty/tmpdjdp4vty.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea8549fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea85196b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea85196988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea851957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdjdp4vty                        0x000055e4bb8201b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aea8568b460 __libc_start_main + 245\n6    tmpdjdp4vty                        0x000055e4bb81fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 0 {\n            c0 += 1\n        } else {\n            c1 += 1\n        }\n        n >>= 1\n    }\n    return (1 << c0) + (1 << (c1 - 1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "tmpmxhpigb7/tmpmxhpigb7.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2ca3a16c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2ca370db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2ca370d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2ca370c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmxhpigb7                        0x0000562a67bdb1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b2ca3c02460 __libc_start_main + 245\n6    tmpmxhpigb7                        0x0000562a67bdae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return -1\n    }\n    return N - (1 << c1) + (1 << (c1 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmppnul_1cy/tmppnul_1cy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7e7cc1dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7e7c914b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7e7c914988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7e7c9137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppnul_1cy                        0x0000559288c3d1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b7e7ce09460 __libc_start_main + 245\n6    tmppnul_1cy                        0x0000559288c3ce69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpniz1wn2v/tmpniz1wn2v.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b381212bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3811e22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3811e22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3811e217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpniz1wn2v                        0x0000564cd9a2f1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3812317460 __libc_start_main + 245\n6    tmpniz1wn2v                        0x0000564cd9a2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpcj67sa6x/tmpcj67sa6x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b45bbe1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b45bbb15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b45bbb15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b45bbb147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcj67sa6x                        0x000055a9f6b901b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b45bc00a460 __libc_start_main + 245\n6    tmpcj67sa6x                        0x000055a9f6b8fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    \n    if c0 == 0 {\n        return N\n    }\n    \n    return N - (1 << c1) + (1 << (c1 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "tmp_w2bp15e/tmp_w2bp15e.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8b977b6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8b974adb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8b974ad988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8b974ac7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_w2bp15e                        0x00005644dd1551b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b8b979a2460 __libc_start_main + 245\n6    tmp_w2bp15e                        0x00005644dd154e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 > 0 {\n        return N - (1 << c1)\n    }\n    return N + (1 << c1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpqmfbgezq/tmpqmfbgezq.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b41f7f55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b41f7c4cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b41f7c4c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b41f7c4b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqmfbgezq                        0x000055b5a49f31b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b41f8141460 __libc_start_main + 245\n6    tmpqmfbgezq                        0x000055b5a49f2e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var count = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            break\n        }\n        count += 1\n        n >>= 1\n    }\n    return N - (1 << count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp12viav34/tmp12viav34.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af7aee2cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af7aeb23b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af7aeb23988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af7aeb227b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp12viav34                        0x000055ff33f7b2b3 <unavailable> + 4787\n5    libc.so.6                          0x00002af7af018460 __libc_start_main + 245\n6    tmp12viav34                        0x000055ff33f7ae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpniz1wn2v/tmpniz1wn2v.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b381212bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3811e22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3811e22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3811e217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpniz1wn2v                        0x0000564cd9a2f1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3812317460 __libc_start_main + 245\n6    tmpniz1wn2v                        0x0000564cd9a2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 == 0 {\n        return N\n    }\n    var mask = 1 << (c0 + c1)\n    mask -= 1\n    return N & mask\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123240,
      "stdout": "",
      "stderr": "tmpn9epcn6c/tmpn9epcn6c.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6c5706dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6c56d64b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6c56d64988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6c56d637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn9epcn6c                        0x000055673caeb1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6c57259460 __libc_start_main + 245\n6    tmpn9epcn6c                        0x000055673caeae69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var num = N\n    var i = 0\n    var j = 0\n    while num > 0 {\n        if num & 1 == 1 {\n            i = j\n        }\n        j += 1\n        num >>= 1\n    }\n    return N - (1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "tmp4z7a5x4w/tmp4z7a5x4w.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b65b815cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b65b7e53b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b65b7e53988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b65b7e527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4z7a5x4w                        0x0000563b544241b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b65b8348460 __libc_start_main + 245\n6    tmp4z7a5x4w                        0x0000563b54423e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var N = N\n    var i = 0\n    var j = 0\n    while N > 0 {\n        if N & 1 == 1 {\n            i = j\n        }\n        j += 1\n        N >>= 1\n    }\n    return N | (1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpl3gon0an/tmpl3gon0an.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b28dff77c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b28dfc6eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b28dfc6e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b28dfc6d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl3gon0an                        0x0000560311bb61b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b28e0163460 __libc_start_main + 245\n6    tmpl3gon0an                        0x0000560311bb5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return N - (1 << c1) + (1 << (c0 - 1))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123238,
      "stdout": "",
      "stderr": "tmpniz1wn2v/tmpniz1wn2v.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b381212bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3811e22b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3811e22988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3811e217b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpniz1wn2v                        0x0000564cd9a2f1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3812317460 __libc_start_main + 245\n6    tmpniz1wn2v                        0x0000564cd9a2ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmp3_89jq76/tmp3_89jq76.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b67789b5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b67786acb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b67786ac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b67786ab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3_89jq76                        0x00005571574911b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b6778ba1460 __libc_start_main + 245\n6    tmp3_89jq76                        0x0000557157490e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    return (1 << (c0 + c1)) - 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "tmpgzbfzws3/tmpgzbfzws3.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d10d8dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d10a84b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9d10a84988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9d10a837b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgzbfzws3                        0x000055992eaf61b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b9d10f79460 __libc_start_main + 245\n6    tmpgzbfzws3                        0x000055992eaf5e69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    var p = 1\n    while p <= N {\n        p <<= 1\n    }\n    return p >> 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "tmp60wv1m_m/tmp60wv1m_m.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3632dddc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3632ad4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3632ad4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3632ad37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp60wv1m_m                        0x0000561d60ea01b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b3632fc9460 __libc_start_main + 245\n6    tmp60wv1m_m                        0x0000561d60e9fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0, c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c1 == 1 {\n        return N - 1\n    }\n    return N + 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpcj67sa6x/tmpcj67sa6x.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b45bbe1ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b45bbb15b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b45bbb15988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b45bbb147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcj67sa6x                        0x000055a9f6b901b5 <unavailable> + 4533\n5    libc.so.6                          0x00002b45bc00a460 __libc_start_main + 245\n6    tmpcj67sa6x                        0x000055a9f6b8fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    \n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    \n    if c1 == 1 {\n        return N\n    }\n    \n    var p = 1\n    var q = 1\n    \n    for _ in 0..<c0 {\n        p <<= 1\n        q <<= 1\n    }\n    \n    q <<= 1\n    \n    return p | (q - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123241,
      "stdout": "",
      "stderr": "tmppy0eiael/tmppy0eiael.swift:47: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b169aacbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b169a7c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b169a7c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b169a7c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppy0eiael                        0x000055be31b39335 <unavailable> + 4917\n5    libc.so.6                          0x00002b169acb7460 __libc_start_main + 245\n6    tmppy0eiael                        0x000055be31b38fe9 <unavailable> + 4073\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var i = 0\n    var j = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            i = j\n        }\n        j += 1\n        n >>= 1\n    }\n    return N & ~(1 << i)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1665510433,
      "stdout": "",
      "stderr": "tmpdjdp4vty/tmpdjdp4vty.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aea8549fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aea85196b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aea85196988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aea851957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdjdp4vty                        0x000055e4bb8201b5 <unavailable> + 4533\n5    libc.so.6                          0x00002aea8568b460 __libc_start_main + 245\n6    tmpdjdp4vty                        0x000055e4bb81fe69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the closest smaller number than n.\nfunc closest_num(N: Int) -> Int {\n    var n = N\n    var c0 = 0\n    var c1 = 0\n    while n > 0 {\n        if n & 1 == 1 {\n            c1 += 1\n        } else {\n            c0 += 1\n        }\n        n >>= 1\n    }\n    if c0 > 0 {\n        return N - (1 << c1)\n    } else {\n        return N - (1 << (c1 - 1))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(closest_num(N: 11) == 10)\nassert(closest_num(N: 7) == 6)\nassert(closest_num(N: 12) == 11)",
      "timestamp": 1666123239,
      "stdout": "",
      "stderr": "tmpvjv65q7d/tmpvjv65q7d.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab24aac1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab24a7b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab24a7b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab24a7b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvjv65q7d                        0x000055867719f1b5 <unavailable> + 4533\n5    libc.so.6                          0x00002ab24acad460 __libc_start_main + 245\n6    tmpvjv65q7d                        0x000055867719ee69 <unavailable> + 3689\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}