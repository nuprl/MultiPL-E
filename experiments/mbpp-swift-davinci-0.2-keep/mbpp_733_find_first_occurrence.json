{
  "name": "mbpp_733_find_first_occurrence",
  "language": "swift",
  "prompt": "\n/// Write a function to find the index of the first occurrence of a given number in a sorted array.\nfunc find_first_occurrence(A: [Int], x: Int) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_first_occurrence(A: [2, 5, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 1)\nassert(find_first_occurrence(A: [2, 3, 5, 5, 6, 6, 8, 9, 9, 9], x: 5) == 2)\nassert(find_first_occurrence(A: [2, 4, 1, 5, 6, 6, 8, 9, 9, 9], x: 6) == 4)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result",
    "    var low = 0\n    var high = A.count - 1\n    \n    while low < high {\n        let mid = low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n    \n    if A[low] == x {\n        return low\n    } else {\n        return -1\n    }",
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        \n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result",
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result",
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result",
    "    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result",
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        \n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    \n    return result",
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result",
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result",
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result",
    "    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result",
    "    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = (left + right) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result",
    "    var left = 0\n    var right = A.count - 1\n    var result = -1\n    while left <= right {\n        let mid = left + (right - left) / 2\n        if A[mid] == x {\n            result = mid\n            right = mid - 1\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return result",
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result",
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result",
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    \n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    \n    return result",
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result",
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result",
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result",
    "    var low = 0\n    var high = A.count - 1\n    var result = -1\n    while low <= high {\n        let mid = low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result"
  ]
}