{
  "name": "mbpp_407_rearrange_bigger",
  "language": "swift",
  "prompt": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    let sortedDigits = digits.sorted()\n    let reversedDigits = digits.reversed()\n    var nextBigger = 0\n    var i = 0\n    while i < digits.count {\n        if digits[i] != sortedDigits[i] {\n            nextBigger = digits[i]\n            break\n        }\n        i += 1\n    }\n    if nextBigger == 0 {\n        return -1\n    }\n    var j = 0\n    while j < digits.count {\n        if digits[j] == nextBigger {\n            break\n        }\n        j += 1\n    }\n    var k = 0\n    while k < digits.count {\n        if reversedDigits[k] > nextBigger {\n            break\n        }\n        k += 1\n    }\n    var newDigits = digits\n    newDigits[j] = reversedDigits[k]\n    newDigits[k] = nextBigger\n    newDigits.remove(at: k)\n    newDigits.remove(at: j)\n    newDigits.append(contentsOf: newDigits.sorted())\n    var newNumber = 0\n    for i in 0..<newDigits.count {\n        newNumber = newNumber * 10 + newDigits[i]\n    }\n    return newNumber",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in digits {\n        number = number * 10 + i\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    let s = String(n)\n    let c = Array(s)\n    var i = c.count - 1\n    while i > 0 && c[i - 1] >= c[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = c.count - 1\n    while c[j] <= c[i - 1] {\n        j -= 1\n    }\n    var c = c\n    c.swapAt(i - 1, j)\n    c = c.suffix(from: i).sorted()\n    let x = String(c)\n    return Int(x)!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = n.digits\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.toInt()",
    "    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted()\n    var result = 0\n    var i = 0\n    for d in sorted {\n        result += d * Int(pow(10, Double(i)))\n        i += 1\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.map { String($0) }.joined()",
    "    let digits = n.digits\n    let count = digits.count\n    var i = count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.toInt()",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in digits {\n        number = number * 10 + i\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    let temp = digits[i-1]\n    digits[i-1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = String(n).compactMap { Int(String($0)) }\n    let sortedDigits = digits.sorted(by: >)\n    let sortedDigitsString = sortedDigits.map { String($0) }.joined()\n    let sortedNumber = Int(sortedDigitsString) ?? 0\n    if sortedNumber == n {\n        return \"Not possible\"\n    }\n    return sortedNumber",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    let temp = digits[i-1]\n    digits[i-1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number",
    "    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    let result = sorted.reduce(0) { $0 * 10 + $1 }\n    return result > n ? result : -1",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result"
  ]
}