{
  "name": "mbpp_407_rearrange_bigger",
  "language": "swift",
  "prompt": "\n/// Write a function to create the next bigger number by rearranging the digits of a given number.\nfunc rearrange_bigger(n: Int) -> AnyHashable {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(rearrange_bigger(n: 12) == 21)\nassert(rearrange_bigger(n: 10) == false)\nassert(rearrange_bigger(n: 102) == 120)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    let sortedDigits = digits.sorted()\n    let reversedDigits = digits.reversed()\n    var nextBigger = 0\n    var i = 0\n    while i < digits.count {\n        if digits[i] != sortedDigits[i] {\n            nextBigger = digits[i]\n            break\n        }\n        i += 1\n    }\n    if nextBigger == 0 {\n        return -1\n    }\n    var j = 0\n    while j < digits.count {\n        if digits[j] == nextBigger {\n            break\n        }\n        j += 1\n    }\n    var k = 0\n    while k < digits.count {\n        if reversedDigits[k] > nextBigger {\n            break\n        }\n        k += 1\n    }\n    var newDigits = digits\n    newDigits[j] = reversedDigits[k]\n    newDigits[k] = nextBigger\n    newDigits.remove(at: k)\n    newDigits.remove(at: j)\n    newDigits.append(contentsOf: newDigits.sorted())\n    var newNumber = 0\n    for i in 0..<newDigits.count {\n        newNumber = newNumber * 10 + newDigits[i]\n    }\n    return newNumber",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in digits {\n        number = number * 10 + i\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    let s = String(n)\n    let c = Array(s)\n    var i = c.count - 1\n    while i > 0 && c[i - 1] >= c[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = c.count - 1\n    while c[j] <= c[i - 1] {\n        j -= 1\n    }\n    var c = c\n    c.swapAt(i - 1, j)\n    c = c.suffix(from: i).sorted()\n    let x = String(c)\n    return Int(x)!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = n.digits\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.toInt()",
    "    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted()\n    var result = 0\n    var i = 0\n    for d in sorted {\n        result += d * Int(pow(10, Double(i)))\n        i += 1\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.map { String($0) }.joined()",
    "    let digits = n.digits\n    let count = digits.count\n    var i = count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.toInt()",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in digits {\n        number = number * 10 + i\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    let temp = digits[i-1]\n    digits[i-1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = String(n).compactMap { Int(String($0)) }\n    let sortedDigits = digits.sorted(by: >)\n    let sortedDigitsString = sortedDigits.map { String($0) }.joined()\n    let sortedNumber = Int(sortedDigitsString) ?? 0\n    if sortedNumber == n {\n        return \"Not possible\"\n    }\n    return sortedNumber",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i-1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i-1] {\n        j -= 1\n    }\n    let temp = digits[i-1]\n    digits[i-1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number",
    "    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    let result = sorted.reduce(0) { $0 * 10 + $1 }\n    return result > n ? result : -1",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    var result = 0\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    for i in 0..<digits.count - 1 {\n        if digits[i] < digits[i + 1] {\n            let temp = digits[i]\n            digits[i] = digits[i + 1]\n            digits[i + 1] = temp\n            break\n        }\n    }\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    if digits == sorted {\n        return -1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        if digits[i] != sorted[i] {\n            let index = sorted.index(of: digits[i])!\n            let temp = sorted[i]\n            sorted[i] = sorted[index]\n            sorted[index] = temp\n            break\n        }\n    }\n    for i in 0..<sorted.count {\n        result = result * 10 + sorted[i]\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    let sortedDigits = digits.sorted()\n    let reversedDigits = digits.reversed()\n    var result = 0\n    for i in 0..<digits.count {\n        result += reversedDigits[i] * Int(pow(10, Double(i)))\n    }\n    if result > n {\n        return result\n    }\n    for i in 0..<digits.count {\n        result += sortedDigits[i] * Int(pow(10, Double(i)))\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    let result = sorted.reduce(0) { $0 * 10 + $1 }\n    return result > n ? result : -1",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits = digits.reversed()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    let count = digits.count\n    var i = count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let n_str = String(n)\n    let n_arr = Array(n_str)\n    var n_arr_int = n_arr.map { Int(String($0))! }\n    var i = n_arr_int.count - 1\n    while i > 0 && n_arr_int[i - 1] >= n_arr_int[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = n_arr_int.count - 1\n    while n_arr_int[j] <= n_arr_int[i - 1] {\n        j -= 1\n    }\n    n_arr_int.swapAt(i - 1, j)\n    j = n_arr_int.count - 1\n    while i < j {\n        n_arr_int.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return n_arr_int.map { String($0) }.joined()",
    "    var num = n\n    var digits = [Int]()\n    while num > 0 {\n        digits.append(num % 10)\n        num /= 10\n    }\n    digits.reverse()\n    let len = digits.count\n    var i = len - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = len - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = len - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    \n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    \n    if i <= 0 {\n        return -1\n    }\n    \n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    \n    digits.swapAt(i - 1, j)\n    \n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    \n    var result = 0\n    for d in digits {\n        result = result * 10 + d\n    }\n    return result",
    "    let digits = String(n).compactMap { Int(String($0)) }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map(String.init).joined())!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits[i...].sort()\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = String(n).map { Int(String($0))! }\n    let sorted = digits.sorted(by: >)\n    if sorted == digits { return -1 }\n    var result = 0\n    for i in 0..<digits.count {\n        result += sorted[i] * Int(pow(10.0, Double(digits.count - i - 1)))\n    }\n    return result",
    "    let n_str = String(n)\n    let n_arr = Array(n_str)\n    var n_arr_int = n_arr.map { Int(String($0))! }\n    var i = n_arr_int.count - 1\n    while i > 0 && n_arr_int[i] <= n_arr_int[i - 1] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = n_arr_int.count - 1\n    while n_arr_int[j] <= n_arr_int[i - 1] {\n        j -= 1\n    }\n    let temp = n_arr_int[i - 1]\n    n_arr_int[i - 1] = n_arr_int[j]\n    n_arr_int[j] = temp\n    var k = n_arr_int.count - 1\n    while i < k {\n        let temp = n_arr_int[i]\n        n_arr_int[i] = n_arr_int[k]\n        n_arr_int[k] = temp\n        i += 1\n        k -= 1\n    }\n    return n_arr_int",
    "    let n_str = String(n)\n    let n_str_arr = Array(n_str)\n    let n_str_arr_sorted = n_str_arr.sorted()\n    let n_str_arr_sorted_str = String(n_str_arr_sorted)\n    let n_str_arr_sorted_str_int = Int(n_str_arr_sorted_str)!\n    if n_str_arr_sorted_str_int > n {\n        return n_str_arr_sorted_str_int\n    }\n    return -1",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    let str = String(n)\n    var arr = [Int]()\n    for c in str {\n        arr.append(Int(String(c))!)\n    }\n    var i = arr.count - 1\n    while i > 0 && arr[i - 1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = arr.count - 1\n    while arr[j] <= arr[i - 1] {\n        j -= 1\n    }\n    let temp = arr[i - 1]\n    arr[i - 1] = arr[j]\n    arr[j] = temp\n    j = arr.count - 1\n    while i < j {\n        let temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = \"\"\n    for i in 0..<arr.count {\n        result += String(arr[i])\n    }\n    return Int(result)!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = String(n).compactMap { $0.wholeNumberValue }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let arr = Array(String(n)).map { Int(String($0))! }\n    var i = arr.count - 1\n    while i > 0 && arr[i - 1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = arr.count - 1\n    while arr[j] <= arr[i - 1] {\n        j -= 1\n    }\n    arr.swapAt(i - 1, j)\n    j = arr.count - 1\n    while i < j {\n        arr.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return arr.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result",
    "    let arr = Array(String(n))\n    let count = arr.count\n    var i = count - 1\n    while i > 0 && arr[i - 1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = count - 1\n    while arr[j] <= arr[i - 1] {\n        j -= 1\n    }\n    var temp = arr[i - 1]\n    arr[i - 1] = arr[j]\n    arr[j] = temp\n    j = count - 1\n    while i < j {\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(String(arr))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i] <= digits[i - 1] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let s = String(n)\n    let c = s.characters\n    var i = c.count - 1\n    while i > 0 && c[c.index(c.startIndex, offsetBy: i - 1)] >= c[c.index(c.startIndex, offsetBy: i)] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = c.count - 1\n    while c[c.index(c.startIndex, offsetBy: j)] <= c[c.index(c.startIndex, offsetBy: i - 1)] {\n        j -= 1\n    }\n    var c = Array(c)\n    c.swapAt(i - 1, j)\n    c = c.suffix(from: i).sorted()\n    let s = String(c)\n    return Int(s)!",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].sort()\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    let sorted = digits.sorted()\n    let reversed = sorted.reversed()\n    let min = reversed.first!\n    let max = reversed.last!\n    let index = digits.index(of: max)!\n    let index2 = digits.index(of: min)!\n    var newDigits = digits\n    newDigits[index] = min\n    newDigits[index2] = max\n    let newNumber = newDigits.reduce(0) { $0 * 10 + $1 }\n    return newNumber",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    \n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    \n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    \n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    \n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result",
    "    let n_str = String(n)\n    var n_arr = Array(n_str)\n    var i = n_arr.count - 1\n    while i > 0 && n_arr[i - 1] >= n_arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = n_arr.count - 1\n    while n_arr[j] <= n_arr[i - 1] {\n        j -= 1\n    }\n    n_arr.swapAt(i - 1, j)\n    j = n_arr.count - 1\n    while i < j {\n        n_arr.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(n_arr))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map(String.init).joined())!",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var num = 0\n    for i in 0..<digits.count {\n        num = num * 10 + digits[i]\n    }\n    return num",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    var i = 0\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n        i += 1\n    }\n    var j = i - 1\n    while j > 0 {\n        if digits[j - 1] < digits[j] {\n            let tmp = digits[j - 1]\n            digits[j - 1] = digits[j]\n            digits[j] = tmp\n            break\n        }\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for d in digits {\n        result = result * 10 + d\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    let digits = String(n).compactMap { Int(String($0)) }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits[i...].sort()\n    return Int(digits.map { String($0) }.joined())!",
    "    let arr = Array(String(n))\n    var i = arr.count - 1\n    while i > 0 && arr[i - 1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = arr.count - 1\n    while arr[j] <= arr[i - 1] {\n        j -= 1\n    }\n    swap(&arr[i - 1], &arr[j])\n    var k = arr.count - 1\n    while i < k {\n        swap(&arr[i], &arr[k])\n        i += 1\n        k -= 1\n    }\n    return Int(String(arr))!",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n = n / 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let tmp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = tmp\n    j = digits.count - 1\n    while i < j {\n        let tmp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = tmp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    let digits = String(n).compactMap { Int(String($0)) }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0 ..< digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 2\n    while i >= 0 && digits[i] >= digits[i + 1] {\n        i -= 1\n    }\n    if i < 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while j >= 0 && digits[j] <= digits[i] {\n        j -= 1\n    }\n    digits.swapAt(i, j)\n    digits[i + 1...].reverse()\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0..<digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    for i in (0..<digits.count - 1).reversed() {\n        if digits[i] < digits[i + 1] {\n            let temp = digits[i]\n            digits[i] = digits[i + 1]\n            digits[i + 1] = temp\n            break\n        }\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = String(n)\n    var i = n.count - 1\n    while i > 0 && n[i] <= n[i - 1] {\n        i -= 1\n    }\n    if i == 0 {\n        return -1\n    }\n    var j = n.count - 1\n    while n[j] <= n[i - 1] {\n        j -= 1\n    }\n    n.swapAt(i - 1, j)\n    n = String(n[0..<i] + n[i...].reversed())\n    return Int(n)!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    var i = 0\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n        i += 1\n    }\n    var j = i - 1\n    while j > 0 && digits[j - 1] >= digits[j] {\n        j -= 1\n    }\n    if j == 0 {\n        return -1\n    }\n    var k = i - 1\n    while digits[j - 1] >= digits[k] {\n        k -= 1\n    }\n    let temp = digits[j - 1]\n    digits[j - 1] = digits[k]\n    digits[k] = temp\n    k = i - 1\n    while j < k {\n        let temp = digits[j]\n        digits[j] = digits[k]\n        digits[k] = temp\n        j += 1\n        k -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    var result = 0\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    for i in 0..<digits.count - 1 {\n        for j in i + 1..<digits.count {\n            if digits[i] < digits[j] {\n                let temp = digits[i]\n                digits[i] = digits[j]\n                digits[j] = temp\n                for k in 0..<digits.count {\n                    result = result * 10 + digits[k]\n                }\n                return result\n            }\n        }\n    }\n    return \"Not possible\"",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in digits {\n        number = number * 10 + i\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    var k = digits.count - 1\n    while i < k {\n        swap(&digits[i], &digits[k])\n        i += 1\n        k -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var nums = Array(String(n))\n    var i = nums.count - 1\n    while i > 0 && nums[i - 1] >= nums[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = nums.count - 1\n    while nums[j] <= nums[i - 1] {\n        j -= 1\n    }\n    nums.swapAt(i - 1, j)\n    j = nums.count - 1\n    while i < j {\n        nums.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(nums))!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits = digits[0..<i] + digits[i...].reversed()\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in 0 ..< digits.count {\n        number = number * 10 + digits[i]\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits: [Int] = []\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in digits {\n        result = result * 10 + i\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 2\n    while i >= 0 && digits[i] >= digits[i + 1] {\n        i -= 1\n    }\n    if i < 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while j > i && digits[j] <= digits[i] {\n        j -= 1\n    }\n    let temp = digits[i]\n    digits[i] = digits[j]\n    digits[j] = temp\n    var k = i + 1\n    var l = digits.count - 1\n    while k < l {\n        let temp = digits[k]\n        digits[k] = digits[l]\n        digits[l] = temp\n        k += 1\n        l -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let n_str = String(n)\n    let n_str_arr = Array(n_str)\n    var n_str_arr_sorted = n_str_arr.sorted()\n    var n_str_arr_sorted_reversed = n_str_arr_sorted.reversed()\n    let n_str_arr_sorted_reversed_str = String(n_str_arr_sorted_reversed)\n    let n_str_arr_sorted_reversed_str_int = Int(n_str_arr_sorted_reversed_str)\n    if n_str_arr_sorted_reversed_str_int == n {\n        return -1\n    }\n    var n_str_arr_sorted_reversed_str_int_str = String(n_str_arr_sorted_reversed_str_int!)\n    var n_str_arr_sorted_reversed_str_int_str_arr = Array(n_str_arr_sorted_reversed_str_int_str)\n    var n_str_arr_sorted_reversed_str_int_str_arr_sorted = n_str_arr_sorted_reversed_str_int_str_arr.sorted()\n    var n_str_arr_sorted_reversed_str_int_str_arr_sorted_reversed = n_str_arr_sorted_reversed_str_int_str_arr_sorted.reversed()\n    var n_str_arr_sorted_reversed_str_int_str_arr_sorted_reversed_str = String(n_str_arr_sorted_reversed_str_int_str_arr_sorted_reversed)\n    var n_str_arr_sorted_reversed_str_int_str_arr_sorted_reversed_str_int = Int(n_str_arr_sorted_reversed_str_int_str_arr_sorted_reversed_str)\n    var n_str_arr_s",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for i in 0..<digits.count {\n        result = result * 10 + digits[i]\n    }\n    return result",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    var digits = digits\n    digits.swapAt(i - 1, j)\n    digits[i...].reverse()\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    swap(&digits[i - 1], &digits[j])\n    j = digits.count - 1\n    while i < j {\n        swap(&digits[i], &digits[j])\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var digits = Array(String(n)).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(digits.map { String($0) }.joined())!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.reverse()\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for i in digits {\n        number = number * 10 + i\n    }\n    return number",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits.reduce(0) { $0 * 10 + $1 }",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var digits = Array(String(n))\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(digits))!",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var number = 0\n    for digit in digits {\n        number = number * 10 + digit\n    }\n    return number",
    "    var n = n\n    var digits = [Int]()\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    digits.swapAt(i - 1, j)\n    j = digits.count - 1\n    while i < j {\n        digits.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    var result = 0\n    for digit in digits {\n        result = result * 10 + digit\n    }\n    return result",
    "    let str = String(n)\n    var arr = Array(str)\n    var i = arr.count - 1\n    while i > 0 && arr[i - 1] >= arr[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = arr.count - 1\n    while arr[j] <= arr[i - 1] {\n        j -= 1\n    }\n    arr.swapAt(i - 1, j)\n    j = arr.count - 1\n    while i < j {\n        arr.swapAt(i, j)\n        i += 1\n        j -= 1\n    }\n    return Int(String(arr))!",
    "    let digits = String(n).map { Int(String($0))! }\n    var i = digits.count - 1\n    while i > 0 && digits[i - 1] >= digits[i] {\n        i -= 1\n    }\n    if i <= 0 {\n        return -1\n    }\n    var j = digits.count - 1\n    while digits[j] <= digits[i - 1] {\n        j -= 1\n    }\n    let temp = digits[i - 1]\n    digits[i - 1] = digits[j]\n    digits[j] = temp\n    j = digits.count - 1\n    while i < j {\n        let temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n        i += 1\n        j -= 1\n    }\n    return digits"
  ]
}