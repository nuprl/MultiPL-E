{
  "name": "mbpp_283_validate",
  "language": "swift",
  "prompt": "\n/// Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n: Int) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(validate(n: 1234) == true)\nassert(validate(n: 51241) == false)\nassert(validate(n: 321) == true)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        dict[digit] = (dict[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if let count = digits[digit] {\n            digits[digit] = count + 1\n        } else {\n            digits[digit] = 1\n        }\n        num /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        num /= 10\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if dict[digit] == nil {\n            dict[digit] = 1\n        } else {\n            dict[digit]! += 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        digits[n % 10] += 1\n        n /= 10\n    }\n    for i in 0..<10 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for (digit, count) in digits.enumerated() {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var n = n\n    var digits = [Int: Int]()\n    while n > 0 {\n        let digit = n % 10\n        if let count = digits[digit] {\n            digits[digit] = count + 1\n        } else {\n            digits[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var n = n\n    var digits = [Int: Int]()\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, frequency) in digits {\n        if digit < frequency {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit, default: 0] += 1\n        n /= 10\n    }\n    \n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1...9 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    let digits = String(n).compactMap { Int(String($0)) }\n    let counts = digits.reduce(into: [:]) { counts, digit in counts[digit, default: 0] += 1 }\n    return digits.allSatisfy { counts[$0, default: 0] <= $0 }",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    return digits.allSatisfy { $0.key >= $0.value }",
    "    var dict: [Int: Int] = [:]\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        n /= 10\n        dict[digit, default: 0] += 1\n    }\n    return dict.allSatisfy { $0.key >= $0.value }",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    digits.sort()\n    var counts = [Int](repeating: 0, count: 10)\n    for d in digits {\n        counts[d] += 1\n    }\n    for i in 0..<10 {\n        if counts[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    let digits = String(n).map { Int(String($0))! }\n    let frequency = digits.reduce(into: [:]) { $0[$1, default: 0] += 1 }\n    return digits.allSatisfy { frequency[$0, default: 0] <= $0 }",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var n = n\n    var digits = [Int: Int]()\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if dict[digit] == nil {\n            dict[digit] = 1\n        } else {\n            dict[digit]! += 1\n        }\n        num /= 10\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    let digits = String(n).compactMap { $0.wholeNumberValue }\n    var digitCounts = [Int: Int]()\n    for digit in digits {\n        digitCounts[digit, default: 0] += 1\n    }\n    return digitCounts.allSatisfy { $0.key >= $0.value }",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1...9 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n /= 10\n    }\n    var counts = [Int](repeating: 0, count: 10)\n    for d in digits {\n        counts[d] += 1\n    }\n    for i in 0..<10 {\n        if counts[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    for char in String(n) {\n        if let num = Int(String(char)) {\n            dict[num, default: 0] += 1\n        }\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        dict[digit] = (dict[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if digits[digit] == nil {\n            digits[digit] = 1\n        } else {\n            digits[digit]! += 1\n        }\n        n /= 10\n    }\n    for (digit, freq) in digits {\n        if freq > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    let str = String(n)\n    var dict = [Character: Int]()\n    for char in str {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str {\n        if let count = dict[char] {\n            if Int(String(char))! < count {\n                return false\n            }\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if digits[digit] == nil {\n            digits[digit] = 1\n        } else {\n            digits[digit]! += 1\n        }\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int]()\n    var n = n\n    while n > 0 {\n        digits.append(n % 10)\n        n = n / 10\n    }\n    var freq = [Int](repeating: 0, count: 10)\n    for d in digits {\n        freq[d] += 1\n    }\n    for i in 0..<freq.count {\n        if freq[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    return digits.allSatisfy { $0.key >= $0.value }",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    return digits.allSatisfy { $0.key >= $0.value }",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if let count = digits[digit] {\n            digits[digit] = count + 1\n        } else {\n            digits[digit] = 1\n        }\n        num /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    \n    for (digit, frequency) in digits {\n        if frequency > digit {\n            return false\n        }\n    }\n    return true",
    "    let s = String(n)\n    var dict = [Character: Int]()\n    for c in s {\n        if let count = dict[c] {\n            dict[c] = count + 1\n        } else {\n            dict[c] = 1\n        }\n    }\n    for c in s {\n        if let count = dict[c], count > Int(String(c)) {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        digits[n % 10] += 1\n        n /= 10\n    }\n    for i in 1...9 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var n = n\n    var digits = [Int](repeating: 0, count: 10)\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var n = n\n    var digits = [Int](repeating: 0, count: 10)\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 0..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        digits[n % 10] += 1\n        n /= 10\n    }\n    for i in 1..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if digits[digit] == nil {\n            digits[digit] = 1\n        } else {\n            digits[digit]! += 1\n        }\n        num /= 10\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit, default: 0] += 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if let count = digits[digit] {\n            digits[digit] = count + 1\n        } else {\n            digits[digit] = 1\n        }\n        num /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 0..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit, default: 0] += 1\n        n /= 10\n    }\n    return digits.allSatisfy { $0.key >= $0.value }",
    "    let digits = String(n).map { Int(String($0))! }\n    var counts = [Int: Int]()\n    for digit in digits {\n        if let count = counts[digit] {\n            counts[digit] = count + 1\n        } else {\n            counts[digit] = 1\n        }\n    }\n    for (digit, count) in counts {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var n = n\n    var digits = [Int](repeating: 0, count: 10)\n    while n > 0 {\n        digits[n % 10] += 1\n        n /= 10\n    }\n    for i in 1..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    let digits = String(n).map { Int(String($0))! }\n    var counts = [Int](repeating: 0, count: 10)\n    for digit in digits {\n        counts[digit] += 1\n    }\n    for (digit, count) in counts.enumerated() {\n        if digit > 0 && count > digit {\n            return false\n        }\n    }\n    return true",
    "    let digits = String(n).map { Int(String($0))! }\n    let counts = digits.reduce(into: [:]) { counts, digit in counts[digit, default: 0] += 1 }\n    return digits.allSatisfy { counts[$0, default: 0] <= $0 }",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit, default: 0] += 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var freq = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        freq[digit] = (freq[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in freq {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 0..<10 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        digits[n % 10] += 1\n        n /= 10\n    }\n    for (i, count) in digits.enumerated() {\n        if count > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1...9 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if let count = digits[digit] {\n            digits[digit] = count + 1\n        } else {\n            digits[digit] = 1\n        }\n        num /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var num = n\n    var digits = [Int: Int]()\n    while num > 0 {\n        let digit = num % 10\n        if let count = digits[digit] {\n            digits[digit] = count + 1\n        } else {\n            digits[digit] = 1\n        }\n        num /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if dict[digit] == nil {\n            dict[digit] = 1\n        } else {\n            dict[digit]! += 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 0..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1...9 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1...9 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    return digits.allSatisfy { $0.key >= $0.value }",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 0..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if digits[digit] == nil {\n            digits[digit] = 1\n        } else {\n            digits[digit]! += 1\n        }\n        num /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    let str = String(n)\n    var dict = [Character: Int]()\n    for char in str {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str {\n        if let count = dict[char], count > Int(String(char))! {\n            return false\n        }\n    }\n    return true",
    "    let str = String(n)\n    var dict = [Character: Int]()\n    for c in str {\n        if let count = dict[c] {\n            dict[c] = count + 1\n        } else {\n            dict[c] = 1\n        }\n    }\n    for c in str {\n        if let count = dict[c] {\n            if count > Int(String(c))! {\n                return false\n            }\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit, default: 0] += 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    return digits.allSatisfy { $0.key >= $0.value }",
    "    let digits = String(n).map { Int(String($0))! }\n    let counts = digits.reduce(into: [:]) { $0[$1, default: 0] += 1 }\n    return digits.allSatisfy { counts[$0]! <= $0 }",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1..<10 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n = n / 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 0..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        num /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        digits[n % 10] += 1\n        n /= 10\n    }\n    for i in 0..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    let digits = String(n).compactMap { Int(String($0)) }\n    var counts = [Int: Int]()\n    for digit in digits {\n        counts[digit] = (counts[digit] ?? 0) + 1\n    }\n    for (digit, count) in counts {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        digits[n % 10] += 1\n        n /= 10\n    }\n    for i in 0..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    let digits = String(n).map { Int(String($0))! }\n    var counts = [Int: Int]()\n    for digit in digits {\n        if let count = counts[digit] {\n            counts[digit] = count + 1\n        } else {\n            counts[digit] = 1\n        }\n    }\n    for (digit, count) in counts {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if digits[digit] == nil {\n            digits[digit] = 1\n        } else {\n            digits[digit]! += 1\n        }\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    let digits = Array(String(n)).map { Int(String($0))! }\n    var counts = [Int](repeating: 0, count: 10)\n    for digit in digits {\n        counts[digit] += 1\n    }\n    for (digit, count) in counts.enumerated() {\n        if digit != 0 && count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit, default: 0] += 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var num = n\n    var digits = [Int: Int]()\n    while num > 0 {\n        let digit = num % 10\n        if let count = digits[digit] {\n            digits[digit] = count + 1\n        } else {\n            digits[digit] = 1\n        }\n        num /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1...9 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        if digits[digit] > digit {\n            return false\n        }\n        n /= 10\n    }\n    return true",
    "    var freq = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        freq[digit] += 1\n        n /= 10\n    }\n    for i in 1...9 {\n        if freq[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var count = [Int](repeating: 0, count: 10)\n    var num = n\n    while num > 0 {\n        count[num % 10] += 1\n        num /= 10\n    }\n    for i in 0..<10 {\n        if count[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit, default: 0] += 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n = n / 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    for char in String(n) {\n        if let value = dict[Int(String(char))!] {\n            dict[Int(String(char))!] = value + 1\n        } else {\n            dict[Int(String(char))!] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit, default: 0] += 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    \n    for (key, value) in digits {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    return digits.allSatisfy { $0.key >= $0.value }",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 0..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    for char in String(n) {\n        if let value = dict[Int(String(char))!] {\n            dict[Int(String(char))!] = value + 1\n        } else {\n            dict[Int(String(char))!] = 1\n        }\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in dict {\n        if digit < count {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var num = n\n    var digits = [Int: Int]()\n    while num > 0 {\n        let digit = num % 10\n        if digits[digit] == nil {\n            digits[digit] = 1\n        } else {\n            digits[digit]! += 1\n        }\n        num /= 10\n    }\n    for (key, value) in digits {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    let digits = String(n).map { Int(String($0))! }\n    var counts = [Int](repeating: 0, count: 10)\n    for digit in digits {\n        counts[digit] += 1\n    }\n    for i in 1...9 {\n        if counts[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit, default: 0] += 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        digits[n % 10] += 1\n        n /= 10\n    }\n    \n    for i in 0..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        num /= 10\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var freq = [Int](repeating: 0, count: 10)\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        freq[digit] += 1\n        num /= 10\n    }\n    for i in 1...9 {\n        if freq[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var n = n\n    var digits = [Int](repeating: 0, count: 10)\n    while n > 0 {\n        digits[n % 10] += 1\n        n /= 10\n    }\n    for i in 0..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var freq = [Int](repeating: 0, count: 10)\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        freq[digit] += 1\n        num /= 10\n    }\n    for i in 1...9 {\n        if freq[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 0..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if let count = digits[digit] {\n            digits[digit] = count + 1\n        } else {\n            digits[digit] = 1\n        }\n        num /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    let digits = String(n).map { Int(String($0))! }\n    var counts = [Int](repeating: 0, count: 10)\n    for digit in digits {\n        counts[digit] += 1\n    }\n    for (digit, count) in counts.enumerated() {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit, default: 0] += 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false\n        }\n    }\n    return true",
    "    let digits = String(n).compactMap { Int(String($0)) }\n    var counts = [Int: Int]()\n    for digit in digits {\n        counts[digit] = (counts[digit] ?? 0) + 1\n    }\n    return counts.allSatisfy { $0.value <= $0.key }",
    "    let digits = String(n).map { Int(String($0))! }\n    var counts = [Int: Int]()\n    for digit in digits {\n        counts[digit] = (counts[digit] ?? 0) + 1\n    }\n    for (digit, count) in counts {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    return digits.allSatisfy { $0.key >= $0.value }",
    "    var digits = [Int: Int]()\n    for digit in String(n) {\n        if let count = digits[Int(String(digit))!] {\n            digits[Int(String(digit))!] = count + 1\n        } else {\n            digits[Int(String(digit))!] = 1\n        }\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit, default: 0] += 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false\n        }\n    }\n    return true",
    "    var dict: [Int: Int] = [:]\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    return digits.allSatisfy { $0.key >= $0.value }",
    "    var dict = [Int: Int]()\n    for digit in String(n) {\n        if let count = dict[Int(String(digit))!] {\n            dict[Int(String(digit))!] = count + 1\n        } else {\n            dict[Int(String(digit))!] = 1\n        }\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in dict {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    return digits.allSatisfy { $0.key >= $0.value }",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    return digits.allSatisfy { $0.key >= $0.value }",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        digits[n % 10] += 1\n        n /= 10\n    }\n    for i in 0..<10 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    let digits = String(n).compactMap { Int(String($0)) }\n    var counts = [Int: Int]()\n    for digit in digits {\n        counts[digit] = (counts[digit] ?? 0) + 1\n    }\n    for (digit, count) in counts {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, freq) in digits {\n        if digit < freq {\n            return false\n        }\n    }\n    return true",
    "    var n = n\n    var digits = [Int](repeating: 0, count: 10)\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for (i, count) in digits.enumerated() {\n        if count > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, frequency) in digits {\n        if frequency > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if let count = digits[digit] {\n            digits[digit] = count + 1\n        } else {\n            digits[digit] = 1\n        }\n        num /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1...9 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, frequency) in digits {\n        if frequency > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    for digit in String(n) {\n        if let count = digits[Int(String(digit))!] {\n            digits[Int(String(digit))!] = count + 1\n        } else {\n            digits[Int(String(digit))!] = 1\n        }\n    }\n    for (key, value) in digits {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    var digitCount = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digitCount[digit] += 1\n        n /= 10\n    }\n    for i in 0..<digitCount.count {\n        if digitCount[i] > i {\n            return false\n        }\n    }\n    return true",
    "    let str = String(n)\n    var dict = [Character: Int]()\n    for char in str {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for (key, value) in dict {\n        if Int(String(key))! < value {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1...9 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var dict: [Int: Int] = [:]\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        dict[digit] = (dict[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true"
  ]
}