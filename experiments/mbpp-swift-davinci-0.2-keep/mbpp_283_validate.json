{
  "name": "mbpp_283_validate",
  "language": "swift",
  "prompt": "\n/// Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n: Int) -> Bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(validate(n: 1234) == true)\nassert(validate(n: 51241) == false)\nassert(validate(n: 321) == true)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        dict[digit] = (dict[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if let count = digits[digit] {\n            digits[digit] = count + 1\n        } else {\n            digits[digit] = 1\n        }\n        num /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var num = n\n    while num > 0 {\n        let digit = num % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        num /= 10\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if dict[digit] == nil {\n            dict[digit] = 1\n        } else {\n            dict[digit]! += 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        digits[n % 10] += 1\n        n /= 10\n    }\n    for i in 0..<10 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for (digit, count) in digits.enumerated() {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var n = n\n    var digits = [Int: Int]()\n    while n > 0 {\n        let digit = n % 10\n        if let count = digits[digit] {\n            digits[digit] = count + 1\n        } else {\n            digits[digit] = 1\n        }\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var n = n\n    var digits = [Int: Int]()\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, frequency) in digits {\n        if digit < frequency {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit, default: 0] += 1\n        n /= 10\n    }\n    \n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if key < value {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1...9 {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    let digits = String(n).compactMap { Int(String($0)) }\n    let counts = digits.reduce(into: [:]) { counts, digit in counts[digit, default: 0] += 1 }\n    return digits.allSatisfy { counts[$0, default: 0] <= $0 }",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int](repeating: 0, count: 10)\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] += 1\n        n /= 10\n    }\n    for i in 1..<digits.count {\n        if digits[i] > i {\n            return false\n        }\n    }\n    return true",
    "    var digits = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        digits[digit] = (digits[digit] ?? 0) + 1\n        n /= 10\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true",
    "    var dict = [Int: Int]()\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if let count = dict[digit] {\n            dict[digit] = count + 1\n        } else {\n            dict[digit] = 1\n        }\n        n /= 10\n    }\n    for (key, value) in dict {\n        if value > key {\n            return false\n        }\n    }\n    return true"
  ]
}