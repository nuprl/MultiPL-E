{
  "name": "mbpp_57_find_Max_Num",
  "language": "swift",
  "prompt": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in arr {\n        let maxDigit = arr.max()!\n        maxNum = maxNum * 10 + maxDigit\n        arr.remove(at: arr.firstIndex(of: maxDigit)!)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    let sortedArr = arr.sorted(by: >)\n    for i in 0..<sortedArr.count {\n        maxNum = maxNum * 10 + sortedArr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max_num = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        let max_digit = arr.max()!\n        max_num = max_num * 10 + max_digit\n        arr.remove(at: arr.firstIndex(of: max_digit)!)\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var maxNumStr = \"\"\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            let num1 = arr[i]\n            let num2 = arr[j]\n            let num1Str = String(num1)\n            let num2Str = String(num2)\n            let num1Str2 = num1Str + num2Str\n            let num2Str2 = num2Str + num1Str\n            if Int(num1Str2)! > Int(num2Str2)! {\n                maxNumStr = num1Str2\n            } else {\n                maxNumStr = num2Str2\n            }\n            if Int(maxNumStr)! > maxNum {\n                maxNum = Int(maxNumStr)!\n            }\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpwve9z140/tmpwve9z140.swift:40: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae2d9ddec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae2d9ad5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae2d9ad5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae2d9ad47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwve9z140                        0x0000565320591794 <unavailable> + 6036\n5    libc.so.6                          0x00002ae2d9fca460 __libc_start_main + 245\n6    tmpwve9z140                        0x00005653205913f9 <unavailable> + 5113\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr.sorted(by: >)\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for num in arr {\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmp4ax26cdy/tmp4ax26cdy.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f5c605c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f5c2fcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f5c2fc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f5c2fb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4ax26cdy                        0x000056013d61d474 <unavailable> + 5236\n5    libc.so.6                          0x00002b3f5c7f1460 __libc_start_main + 245\n6    tmp4ax26cdy                        0x000056013d61d0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "/tmp/tmp51tnb8do.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmp51tnb8do.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr.sorted(by: >)\n    for i in 0..<arr.count {\n        maxNum = maxNum*10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        maxNum = max(maxNum, i)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpuvckza99/tmpuvckza99.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b542cfc4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b542ccbbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b542ccbb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b542ccba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvckza99                        0x000056428ab0a504 <unavailable> + 5380\n5    libc.so.6                          0x00002b542d1b0460 __libc_start_main + 245\n6    tmpuvckza99                        0x000056428ab0a169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    var max = 0\n    for i in 0..<arr.count {\n        for j in i..<arr.count {\n            if arr[i] < arr[j] {\n                max = arr[j]\n                arr[j] = arr[i]\n                arr[i] = max\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        result = result * 10 + arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "/tmp/tmp5z50g04w.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = arr[i]\n                ~~~^\n/tmp/tmp5z50g04w.swift:11:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = max\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        maxNum = max(maxNum, i)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpuvckza99/tmpuvckza99.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b542cfc4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b542ccbbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b542ccbb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b542ccba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvckza99                        0x000056428ab0a504 <unavailable> + 5380\n5    libc.so.6                          0x00002b542d1b0460 __libc_start_main + 245\n6    tmpuvckza99                        0x000056428ab0a169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    let sortedArr = arr.sorted(by: >)\n    for i in 0..<sortedArr.count {\n        result = result * 10 + sortedArr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max = 0\n    for i in arr {\n        if i > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmp_xr75ah7/tmp_xr75ah7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3c52e4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3c52b46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3c52b46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3c52b457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_xr75ah7                        0x00005647fc4f4474 <unavailable> + 5236\n5    libc.so.6                          0x00002b3c5303b460 __libc_start_main + 245\n6    tmp_xr75ah7                        0x00005647fc4f40d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    arr.sort(by: >)\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if arr[i] > arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "/tmp/tmps22yrvlr.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmps22yrvlr.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        let max = arr.max()!\n        result = result * 10 + max\n        arr.remove(at: arr.firstIndex(of: max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max = 0\n    for i in arr {\n        if i > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmp_xr75ah7/tmp_xr75ah7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3c52e4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3c52b46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3c52b46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3c52b457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_xr75ah7                        0x00005647fc4f4474 <unavailable> + 5236\n5    libc.so.6                          0x00002b3c5303b460 __libc_start_main + 245\n6    tmp_xr75ah7                        0x00005647fc4f40d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    let sortedArr = arr.sorted(by: >)\n    var result = \"\"\n    for num in sortedArr {\n        result += String(num)\n    }\n    return Int(result)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        let maxDigit = arr.max()!\n        maxNum = maxNum * 10 + maxDigit\n        arr.remove(at: arr.firstIndex(of: maxDigit)!)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    let sortedArr = arr.sorted(by: >)\n    var result = \"\"\n    for num in sortedArr {\n        result += String(num)\n    }\n    return Int(result)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr.sorted(by: >)\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max_num = 0\n    var arr = arr.sorted(by: >)\n    for i in arr {\n        max_num = max_num * 10 + i\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var maxDigit = 0\n        for digit in arr {\n            if digit > maxDigit {\n                maxDigit = digit\n            }\n        }\n        maxNum = maxNum * 10 + maxDigit\n        arr.remove(at: arr.firstIndex(of: maxDigit)!)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var arr = arr\n    arr.sort()\n    var result = \"\"\n    for i in arr.reversed() {\n        result += String(i)\n    }\n    return Int(result)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var maxNumArr = [Int]()\n    for i in 0..<arr.count {\n        maxNumArr.append(arr[i])\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                maxNumArr.append(arr[j])\n                break\n            }\n        }\n    }\n    for i in 0..<maxNumArr.count {\n        maxNum = maxNum * 10 + maxNumArr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmph0t09q1j/tmph0t09q1j.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7fe7f92c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7fe7c89b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7fe7c89988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7fe7c887b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph0t09q1j                        0x0000557115acb5f4 <unavailable> + 5620\n5    libc.so.6                          0x00002b7fe817e460 __libc_start_main + 245\n6    tmph0t09q1j                        0x0000557115acb259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    arr.sort()\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmp45zk0qhb/tmp45zk0qhb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b71a1844c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b71a153bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b71a153b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b71a153a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp45zk0qhb                        0x0000562502505594 <unavailable> + 5524\n5    libc.so.6                          0x00002b71a1a30460 __libc_start_main + 245\n6    tmp45zk0qhb                        0x00005625025051f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max = 0\n    for i in arr {\n        if i > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmp_xr75ah7/tmp_xr75ah7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3c52e4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3c52b46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3c52b46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3c52b457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_xr75ah7                        0x00005647fc4f4474 <unavailable> + 5236\n5    libc.so.6                          0x00002b3c5303b460 __libc_start_main + 245\n6    tmp_xr75ah7                        0x00005647fc4f40d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var maxIndex = 0\n    var maxDigit = 0\n    var maxDigitIndex = 0\n    var maxDigitCount = 0\n    var maxDigitCountIndex = 0\n    var maxDigitCountIndex2 = 0\n    var maxDigitCountIndex3 = 0\n    var maxDigitCountIndex4 = 0\n    var maxDigitCountIndex5 = 0\n    var maxDigitCountIndex6 = 0\n    var maxDigitCountIndex7 = 0\n    var maxDigitCountIndex8 = 0\n    var maxDigitCountIndex9 = 0\n    var maxDigitCountIndex10 = 0\n    var maxDigitCountIndex11 = 0\n    var maxDigitCountIndex12 = 0\n    var maxDigitCountIndex13 = 0\n    var maxDigitCountIndex14 = 0\n    var maxDigitCountIndex15 = 0\n    var maxDigitCountIndex16 = 0\n    var maxDigitCountIndex17 = 0\n    var maxDigitCountIndex18 = 0\n    var maxDigitCountIndex19 = 0\n    var maxDigitCountIndex20 = 0\n    var maxDigitCountIndex21 = 0\n    var maxDigitCountIndex22 = 0\n    var maxDigitCountIndex23 = 0\n    var maxDigitCountIndex24 = 0\n    var maxDigitCountIndex25 = 0\n    var maxDigitCountIndex26 = 0\n    var maxDigitCountIndex27 = 0\n    var maxDigitCountIndex28 = 0\n    var maxDigitCountIndex29 = 0\n    var maxDigitCountIndex30 = 0\n    var maxDigitCountIndex31 = 0\n    var maxDigitCountIndex32 = 0\n    var maxDigitCountIndex33 = 0\n    var maxDigitCountIndex34 = 0\n    var maxDigitCountIndex35 = 0\n    var maxDigitCountIndex36 = 0\n    var maxDigitCountIndex37 = 0\n    var maxDigitCountIndex38 = 0\n    var maxDigitCountIndex39 = 0\n    var maxDigitCountIndex40 = 0\n    var maxDigitCountIndex41 = 0\n    var maxDigitCountIndex42 = 0\n    var maxDigitCountIndex43 = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmp9lf_fiom.swift:4:9: warning: initialization of variable 'maxNum' was never used; consider replacing with assignment to '_' or removing it\n    var maxNum = 0\n    ~~~~^~~~~~\n    _\n/tmp/tmp9lf_fiom.swift:5:9: warning: initialization of variable 'maxIndex' was never used; consider replacing with assignment to '_' or removing it\n    var maxIndex = 0\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp9lf_fiom.swift:6:9: warning: initialization of variable 'maxDigit' was never used; consider replacing with assignment to '_' or removing it\n    var maxDigit = 0\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp9lf_fiom.swift:7:9: warning: initialization of variable 'maxDigitIndex' was never used; consider replacing with assignment to '_' or removing it\n    var maxDigitIndex = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp9lf_fiom.swift:8:9: warning: initialization of variable 'maxDigitCount' was never used; consider replacing with assignment to '_' or removing it\n    var maxDigitCount = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp9lf_fiom.swift:9:9: warning: initialization of variable 'maxDigitCountIndex' was never used; consider replacing with assignment to '_' or removing it\n    var maxDigitCountIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp9lf_fiom.swift:10:9: warning: initialization of variable 'maxDigitCountIndex2' was never used; consider replacing with assignment to '_' or removing it\n    var maxDigitCountIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp9lf_fiom.swift:11:9: warning: initialization of variable 'maxDigitCountIndex3' was never used; consider replacing with assignment to '_' or removing it\n    var maxDigitCountIndex3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp9lf_fiom.swift:12:9: warning: initialization of variable 'maxDigitCountIndex4' was never used; consider replacing with assignment to '_' or removing it\n    var maxDigitCountIndex4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp9lf_fiom.swift:13:9: warning: initialization of variable 'maxDigitCountIndex5' was never used; consider replacing with assignment to '_' or removing it\n    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var arr = arr\n    arr.sort(by: >)\n    var result = \"\"\n    for i in arr {\n        result += String(i)\n    }\n    return Int(result)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        let maxDigit = arr.max()!\n        maxNum = maxNum * 10 + maxDigit\n        arr.remove(at: arr.firstIndex(of: maxDigit)!)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var maxNumString = \"\"\n    for i in arr {\n        maxNumString += String(i)\n    }\n    maxNumString = String(maxNumString.sorted(by: >))\n    maxNum = Int(maxNumString)!\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var max = 0\n        var maxIndex = 0\n        for i in 0..<arr.count {\n            if arr[i] > max {\n                max = arr[i]\n                maxIndex = i\n            }\n        }\n        maxNum = maxNum * 10 + max\n        arr.remove(at: maxIndex)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var arr = arr\n    arr.sort()\n    var maxNum = 0\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmp4vzpaej8/tmp4vzpaej8.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aca2ccc1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aca2c9b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aca2c9b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aca2c9b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4vzpaej8                        0x000055e922aaf664 <unavailable> + 5732\n5    libc.so.6                          0x00002aca2cead460 __libc_start_main + 245\n6    tmp4vzpaej8                        0x000055e922aaf2c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var arr = arr\n    arr.sort()\n    var maxNum = \"\"\n    for i in 0..<arr.count {\n        maxNum += String(arr[i])\n    }\n    return Int(maxNum)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmpwye5yopm/tmpwye5yopm.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c7838ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c78081b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c78081988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c780807b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwye5yopm                        0x0000564111ada8b4 <unavailable> + 6324\n5    libc.so.6                          0x00002b4c78576460 __libc_start_main + 245\n6    tmpwye5yopm                        0x0000564111ada519 <unavailable> + 5401\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var maxDigit = 0\n        var maxIndex = 0\n        for (index, digit) in arr.enumerated() {\n            if digit > maxDigit {\n                maxDigit = digit\n                maxIndex = index\n            }\n        }\n        maxNum = maxNum * 10 + maxDigit\n        arr.remove(at: maxIndex)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var num = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                num = arr[i]\n                arr[i] = arr[j]\n                arr[j] = num\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum*10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpfbfw4sff.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpfbfw4sff.swift:11:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = num\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var max = 0\n        for i in 0..<arr.count {\n            if arr[i] > max {\n                max = arr[i]\n            }\n        }\n        maxNum = maxNum * 10 + max\n        arr.remove(at: arr.firstIndex(of: max)!)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        let maxDigit = arr.max()!\n        maxNum = maxNum * 10 + maxDigit\n        arr.remove(at: arr.index(of: maxDigit)!)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        let maxDigit = arr.max()!\n        maxNum = maxNum * 10 + maxDigit\n        arr.remove(at: arr.firstIndex(of: maxDigit)!)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    for i in arr {\n        result = result * 10 + i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmpjvh7t69s/tmpjvh7t69s.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad4c627ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad4c5f71b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad4c5f71988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad4c5f707b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjvh7t69s                        0x0000557631568474 <unavailable> + 5236\n5    libc.so.6                          0x00002ad4c6466460 __libc_start_main + 245\n6    tmpjvh7t69s                        0x00005576315680d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    let sortedArr = arr.sorted(by: >)\n    for i in 0..<sortedArr.count {\n        maxNum = maxNum * 10 + sortedArr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var num = 0\n    for i in arr.sorted(by: >) {\n        num = num * 10 + i\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                var temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmprpmn5c4s.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmprpmn5c4s.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    arr.sort()\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmp45zk0qhb/tmp45zk0qhb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b71a1844c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b71a153bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b71a153b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b71a153a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp45zk0qhb                        0x0000562502505594 <unavailable> + 5524\n5    libc.so.6                          0x00002b71a1a30460 __libc_start_main + 245\n6    tmp45zk0qhb                        0x00005625025051f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var num = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if i != j {\n                num = arr[i] * 10 + arr[j]\n                if num > maxNum {\n                    maxNum = num\n                }\n            }\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmpyonrosdl/tmpyonrosdl.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5065f7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5062eeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5062ee988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5062ed7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyonrosdl                        0x00005636a70f3544 <unavailable> + 5444\n5    libc.so.6                          0x00002ad5067e3460 __libc_start_main + 245\n6    tmpyonrosdl                        0x00005636a70f31a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var arr = arr\n    arr.sort()\n    var maxNum = 0\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmph8m11nhe/tmph8m11nhe.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b05c1070c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b05c0d67b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b05c0d67988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b05c0d667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph8m11nhe                        0x000055952cae8594 <unavailable> + 5524\n5    libc.so.6                          0x00002b05c125c460 __libc_start_main + 245\n6    tmph8m11nhe                        0x000055952cae81f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var maxNumArr = [Int]()\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                maxNumArr.append(arr[j])\n            } else {\n                maxNumArr.append(arr[i])\n            }\n        }\n    }\n    for i in 0..<maxNumArr.count {\n        maxNum = maxNum * 10 + maxNumArr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmpn_wn02o2/tmpn_wn02o2.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afc6c668c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afc6c35fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afc6c35f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afc6c35e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpn_wn02o2                        0x000056091fc785f4 <unavailable> + 5620\n5    libc.so.6                          0x00002afc6c854460 __libc_start_main + 245\n6    tmpn_wn02o2                        0x000056091fc78259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        let max = arr.max()!\n        result = result * 10 + max\n        arr.remove(at: arr.firstIndex(of: max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        maxNum = max(maxNum, i)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpuvckza99/tmpuvckza99.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b542cfc4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b542ccbbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b542ccbb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b542ccba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvckza99                        0x000056428ab0a504 <unavailable> + 5380\n5    libc.so.6                          0x00002b542d1b0460 __libc_start_main + 245\n6    tmpuvckza99                        0x000056428ab0a169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    var arr = arr.sorted()\n    for i in 0..<arr.count {\n        result = result * 10 + arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmpcduy4e_4/tmpcduy4e_4.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e26e13c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e26b0ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e26b0a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e26b097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcduy4e_4                        0x00005638ad48a5e4 <unavailable> + 5604\n5    libc.so.6                          0x00002b5e26fff460 __libc_start_main + 245\n6    tmpcduy4e_4                        0x00005638ad48a249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var arr = arr\n    arr.sort()\n    var maxNum = 0\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmph8m11nhe/tmph8m11nhe.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b05c1070c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b05c0d67b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b05c0d67988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b05c0d667b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph8m11nhe                        0x000055952cae8594 <unavailable> + 5524\n5    libc.so.6                          0x00002b05c125c460 __libc_start_main + 245\n6    tmph8m11nhe                        0x000055952cae81f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    var arr = arr.sorted(by: >)\n    for i in arr {\n        result = result * 10 + i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    for i in arr {\n        result = max(result, i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmp97u4o2l_/tmp97u4o2l_.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b87d1a29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b87d1720b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b87d1720988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b87d171f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp97u4o2l_                        0x0000560f9d2e6504 <unavailable> + 5380\n5    libc.so.6                          0x00002b87d1c15460 __libc_start_main + 245\n6    tmp97u4o2l_                        0x0000560f9d2e6169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max_num = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        max_num = max_num * 10 + arr[i]\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmp5w7nq22m.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmp5w7nq22m.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max = 0\n    for i in arr {\n        if i > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmp_xr75ah7/tmp_xr75ah7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3c52e4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3c52b46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3c52b46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3c52b457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_xr75ah7                        0x00005647fc4f4474 <unavailable> + 5236\n5    libc.so.6                          0x00002b3c5303b460 __libc_start_main + 245\n6    tmp_xr75ah7                        0x00005647fc4f40d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var num = 0\n    for i in arr {\n        num = num * 10 + i\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmp2dpfcqsk/tmp2dpfcqsk.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2f56e10c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2f56b07b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2f56b07988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2f56b067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2dpfcqsk                        0x000055dbe268d474 <unavailable> + 5236\n5    libc.so.6                          0x00002b2f56ffc460 __libc_start_main + 245\n6    tmp2dpfcqsk                        0x000055dbe268d0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var temp = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if arr[i] > arr[j] {\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpdo6jonla.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpdo6jonla.swift:11:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var maxDigit = 0\n        var maxDigitIndex = 0\n        for i in 0..<arr.count {\n            if arr[i] > maxDigit {\n                maxDigit = arr[i]\n                maxDigitIndex = i\n            }\n        }\n        maxNum = maxNum * 10 + arr[maxDigitIndex]\n        arr.remove(at: maxDigitIndex)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var num = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if arr[i] > arr[j] {\n                num = arr[i]\n                arr[i] = arr[j]\n                arr[j] = num\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmprrywvoyy.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmprrywvoyy.swift:11:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = num\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    var arr = arr\n    arr.sort(by: >)\n    for i in arr {\n        result = result * 10 + i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var num = 0\n    for i in arr {\n        num = num * 10 + i\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmp2dpfcqsk/tmp2dpfcqsk.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2f56e10c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2f56b07b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2f56b07988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2f56b067b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2dpfcqsk                        0x000055dbe268d474 <unavailable> + 5236\n5    libc.so.6                          0x00002b2f56ffc460 __libc_start_main + 245\n6    tmp2dpfcqsk                        0x000055dbe268d0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "/tmp/tmp51tnb8do.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmp51tnb8do.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max_num = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if i != j {\n                let num = Int(String(arr[i]) + String(arr[j]))!\n                if num > max_num {\n                    max_num = num\n                }\n            }\n        }\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmp1p56aat5/tmp1p56aat5.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2f202b1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2f1ffa8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2f1ffa8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2f1ffa77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1p56aat5                        0x00005652b635f704 <unavailable> + 5892\n5    libc.so.6                          0x00002b2f2049d460 __libc_start_main + 245\n6    tmp1p56aat5                        0x00005652b635f369 <unavailable> + 4969\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if arr[i] > arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "/tmp/tmps22yrvlr.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmps22yrvlr.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    let sorted = arr.sorted { (a, b) -> Bool in\n        return String(a) + String(b) > String(b) + String(a)\n    }\n    for i in sorted {\n        result = result * 10 + i\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum: Int = 0\n    var maxNumArr: [Int] = []\n    for i in arr {\n        maxNumArr.append(i)\n    }\n    maxNumArr.sort()\n    for i in maxNumArr.reversed() {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        maxNum = max(maxNum, i)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpuvckza99/tmpuvckza99.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b542cfc4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b542ccbbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b542ccbb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b542ccba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvckza99                        0x000056428ab0a504 <unavailable> + 5380\n5    libc.so.6                          0x00002b542d1b0460 __libc_start_main + 245\n6    tmpuvckza99                        0x000056428ab0a169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    for i in arr {\n        result = max(result, i)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmp97u4o2l_/tmp97u4o2l_.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b87d1a29c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b87d1720b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b87d1720988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b87d171f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp97u4o2l_                        0x0000560f9d2e6504 <unavailable> + 5380\n5    libc.so.6                          0x00002b87d1c15460 __libc_start_main + 245\n6    tmp97u4o2l_                        0x0000560f9d2e6169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    arr.sort(by: >)\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        let maxDigit = arr.max()!\n        maxNum = maxNum * 10 + maxDigit\n        arr.remove(at: arr.firstIndex(of: maxDigit)!)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var arr = arr\n    arr.sort(by: >)\n    var num = 0\n    for i in arr {\n        num = num * 10 + i\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max = 0\n    for i in arr {\n        if i > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmp_xr75ah7/tmp_xr75ah7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3c52e4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3c52b46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3c52b46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3c52b457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_xr75ah7                        0x00005647fc4f4474 <unavailable> + 5236\n5    libc.so.6                          0x00002b3c5303b460 __libc_start_main + 245\n6    tmp_xr75ah7                        0x00005647fc4f40d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var arr = arr\n    arr.sort()\n    var result = \"\"\n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        result += \"\\(arr[i])\"\n    }\n    return Int(result)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max_num = 0\n    var max_num_str = \"\"\n    for i in arr {\n        max_num_str += String(i)\n    }\n    max_num_str = String(max_num_str.sorted(by: >))\n    max_num = Int(max_num_str)!\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var num = 0\n    for i in arr.sorted(by: >) {\n        num = num * 10 + i\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var maxDigit = 0\n        var maxDigitIndex = 0\n        for i in 0..<arr.count {\n            if arr[i] > maxDigit {\n                maxDigit = arr[i]\n                maxDigitIndex = i\n            }\n        }\n        maxNum = maxNum * 10 + maxDigit\n        arr.remove(at: maxDigitIndex)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var num = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            num = arr[i] * 10 + arr[j]\n            if num > maxNum {\n                maxNum = num\n            }\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmpdonktu78/tmpdonktu78.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b973efb3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b973ecaab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b973ecaa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b973eca97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdonktu78                        0x000055e9e8f13544 <unavailable> + 5444\n5    libc.so.6                          0x00002b973f19f460 __libc_start_main + 245\n6    tmpdonktu78                        0x000055e9e8f131a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    var arr = arr\n    arr.sort()\n    for i in 0..<arr.count {\n        result = result * 10 + arr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmp7lu5w6_6/tmp7lu5w6_6.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b98ef972c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b98ef669b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b98ef669988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b98ef6687b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7lu5w6_6                        0x0000564d2c4c2664 <unavailable> + 5732\n5    libc.so.6                          0x00002b98efb5e460 __libc_start_main + 245\n6    tmp7lu5w6_6                        0x0000564d2c4c22c9 <unavailable> + 4809\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var num = 0\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                num = arr[i]\n                arr[i] = arr[j]\n                arr[j] = num\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmptcc041y_.swift:11:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmptcc041y_.swift:12:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = num\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        let maxDigit = arr.max()!\n        maxNum = maxNum * 10 + maxDigit\n        arr.remove(at: arr.firstIndex(of: maxDigit)!)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var max = 0\n        for j in 0..<arr.count {\n            if arr[j] > max {\n                max = arr[j]\n            }\n        }\n        maxNum = maxNum * 10 + max\n        arr.remove(at: arr.firstIndex(of: max)!)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in (i+1)..<arr.count {\n            if arr[i] < arr[j] {\n                maxNum = arr[j]\n            }\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmp2_a0r3dg/tmp2_a0r3dg.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6598fdbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6598cd2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6598cd2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6598cd17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2_a0r3dg                        0x00005588119b3544 <unavailable> + 5444\n5    libc.so.6                          0x00002b65991c7460 __libc_start_main + 245\n6    tmp2_a0r3dg                        0x00005588119b31a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var maxIndex = 0\n    for i in 0..<arr.count {\n        if arr[i] > maxNum {\n            maxNum = arr[i]\n            maxIndex = i\n        }\n    }\n    var result = 0\n    var i = 0\n    while i < arr.count {\n        if i == maxIndex {\n            result = result * 10 + maxNum\n            i += 1\n        } else {\n            result = result * 10 + arr[i]\n            i += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmpgi4aeu75/tmpgi4aeu75.swift:39: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57f8ec6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57f8bbdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b57f8bbd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b57f8bbc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgi4aeu75                        0x0000555d5376e544 <unavailable> + 5444\n5    libc.so.6                          0x00002b57f90b2460 __libc_start_main + 245\n6    tmpgi4aeu75                        0x0000555d5376e1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    let sortedArr = arr.sorted(by: >)\n    for i in sortedArr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    let sortedArr = arr.sorted(by: >)\n    var maxNum = 0\n    for i in 0..<sortedArr.count {\n        maxNum = maxNum * 10 + sortedArr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr.sorted(by: >)\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    let sortedArr = arr.sorted(by: >)\n    for i in 0..<arr.count {\n        result = result * 10 + sortedArr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var max = 0\n        var index = 0\n        for i in 0..<arr.count {\n            if arr[i] > max {\n                max = arr[i]\n                index = i\n            }\n        }\n        maxNum = maxNum * 10 + max\n        arr.remove(at: index)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr.sorted()\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmp4y1wlua6/tmp4y1wlua6.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4338cd9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b43389d0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b43389d0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b43389cf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4y1wlua6                        0x000056246c2915e4 <unavailable> + 5604\n5    libc.so.6                          0x00002b4338ec5460 __libc_start_main + 245\n6    tmp4y1wlua6                        0x000056246c291249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max = 0\n    for i in arr {\n        if i > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmp_xr75ah7/tmp_xr75ah7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3c52e4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3c52b46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3c52b46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3c52b457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_xr75ah7                        0x00005647fc4f4474 <unavailable> + 5236\n5    libc.so.6                          0x00002b3c5303b460 __libc_start_main + 245\n6    tmp_xr75ah7                        0x00005647fc4f40d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var maxDigit = 0\n        var index = 0\n        for i in 0..<arr.count {\n            if arr[i] > maxDigit {\n                maxDigit = arr[i]\n                index = i\n            }\n        }\n        maxNum = maxNum * 10 + maxDigit\n        arr.remove(at: index)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        maxNum = maxNum * 10 + arr.max()!\n        arr.remove(at: arr.index(of: arr.max()!)!)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr.sorted()\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmp4y1wlua6/tmp4y1wlua6.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4338cd9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b43389d0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b43389d0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b43389cf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4y1wlua6                        0x000056246c2915e4 <unavailable> + 5604\n5    libc.so.6                          0x00002b4338ec5460 __libc_start_main + 245\n6    tmp4y1wlua6                        0x000056246c291249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var max = 0\n        for i in 0..<arr.count {\n            if arr[i] > max {\n                max = arr[i]\n            }\n        }\n        maxNum = maxNum * 10 + max\n        arr.remove(at: arr.firstIndex(of: max)!)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max = 0\n    var temp = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmp7ys606yx.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmp7ys606yx.swift:11:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum: Int = 0\n    var maxNumArr: [Int] = []\n    var arr = arr\n    for _ in 0..<arr.count {\n        maxNumArr.append(arr.max()!)\n        arr.remove(at: arr.firstIndex(of: arr.max()!)!)\n    }\n    for i in 0..<maxNumArr.count {\n        maxNum = maxNum * 10 + maxNumArr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var arr = arr\n    arr.sort(by: >)\n    var num = 0\n    for i in arr {\n        num = num * 10 + i\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        let max = arr.max()!\n        result = result * 10 + max\n        arr.remove(at: arr.firstIndex(of: max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr.sorted()\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmp4y1wlua6/tmp4y1wlua6.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4338cd9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b43389d0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b43389d0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b43389cf7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4y1wlua6                        0x000056246c2915e4 <unavailable> + 5604\n5    libc.so.6                          0x00002b4338ec5460 __libc_start_main + 245\n6    tmp4y1wlua6                        0x000056246c291249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr.sorted()\n    for i in (0..<arr.count).reversed() {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var num = 0\n    for i in arr {\n        num = num * 10 + i\n    }\n    maxNum = num\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            num = swap(num: num, i: i, j: j)\n            if num > maxNum {\n                maxNum = num\n            }\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmparzj48kv.swift:12:19: error: cannot assign value of type '()' to type 'Int'\n            num = swap(num: num, i: i, j: j)\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmparzj48kv.swift:12:43: error: extra argument 'j' in call\n            num = swap(num: num, i: i, j: j)\n                      ~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmparzj48kv.swift:12:29: error: passing value of type 'Int' to an inout parameter requires explicit '&'\n            num = swap(num: num, i: i, j: j)\n                            ^\n                            &\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var arr = arr\n    arr.sort()\n    var str = \"\"\n    for i in arr.reversed() {\n        str += String(i)\n    }\n    return Int(str)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var max = 0\n        var index = 0\n        for i in 0..<arr.count {\n            if arr[i] > max {\n                max = arr[i]\n                index = i\n            }\n        }\n        maxNum = maxNum * 10 + max\n        arr.remove(at: index)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    let sortedArr = arr.sorted(by: >)\n    for i in 0..<sortedArr.count {\n        maxNum = maxNum * 10 + sortedArr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    let sortedArr = arr.sorted(by: >)\n    for num in sortedArr {\n        maxNum = maxNum * 10 + num\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmpck9allye/tmpck9allye.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4295eb6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4295badb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4295bad988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4295bac7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpck9allye                        0x0000558e96537474 <unavailable> + 5236\n5    libc.so.6                          0x00002b42960a2460 __libc_start_main + 245\n6    tmpck9allye                        0x0000558e965370d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    let sortedArr = arr.sorted(by: >)\n    for i in 0..<sortedArr.count {\n        result = result * 10 + sortedArr[i]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        maxNum = maxNum * 10 + arr.max()!\n        arr.remove(at: arr.index(of: arr.max()!)!)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    let sortedArr = arr.sorted(by: >)\n    for i in sortedArr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max_num = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        max_num = max_num * 10 + arr[i]\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmp5w7nq22m.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmp5w7nq22m.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if arr[i] > arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "/tmp/tmps22yrvlr.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmps22yrvlr.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var maxIndex = 0\n    for i in 0..<arr.count {\n        if arr[i] > maxNum {\n            maxNum = arr[i]\n            maxIndex = i\n        }\n    }\n    var result = arr[maxIndex]\n    for i in 0..<arr.count {\n        if i != maxIndex {\n            result = result * 10 + arr[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmprf1ggoqc/tmprf1ggoqc.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9e4749fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9e47196b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9e47196988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9e471957b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprf1ggoqc                        0x00005600a0d90544 <unavailable> + 5444\n5    libc.so.6                          0x00002b9e4768b460 __libc_start_main + 245\n6    tmprf1ggoqc                        0x00005600a0d901a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var max = 0\n        var index = 0\n        for i in 0..<arr.count {\n            if arr[i] > max {\n                max = arr[i]\n                index = i\n            }\n        }\n        maxNum = maxNum * 10 + max\n        arr.remove(at: index)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        maxNum = max(maxNum, i)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpuvckza99/tmpuvckza99.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b542cfc4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b542ccbbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b542ccbb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b542ccba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvckza99                        0x000056428ab0a504 <unavailable> + 5380\n5    libc.so.6                          0x00002b542d1b0460 __libc_start_main + 245\n6    tmpuvckza99                        0x000056428ab0a169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var max = 0\n        var index = 0\n        for i in 0..<arr.count {\n            if arr[i] > max {\n                max = arr[i]\n                index = i\n            }\n        }\n        maxNum = maxNum * 10 + max\n        arr.remove(at: index)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "/tmp/tmp51tnb8do.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmp51tnb8do.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr.sorted()\n    for i in 0..<arr.count {\n        maxNum = maxNum*10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmpv0ulxrpv/tmpv0ulxrpv.swift:25: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac5e5eebc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac5e5be2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac5e5be2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac5e5be17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv0ulxrpv                        0x00005646deb925e4 <unavailable> + 5604\n5    libc.so.6                          0x00002ac5e60d7460 __libc_start_main + 245\n6    tmpv0ulxrpv                        0x00005646deb92249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if arr[i] > arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "/tmp/tmps22yrvlr.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmps22yrvlr.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr.sorted(by: >)\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    arr.sort()\n    arr.reverse()\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        maxNum = max(maxNum, i)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpuvckza99/tmpuvckza99.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b542cfc4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b542ccbbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b542ccbb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b542ccba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvckza99                        0x000056428ab0a504 <unavailable> + 5380\n5    libc.so.6                          0x00002b542d1b0460 __libc_start_main + 245\n6    tmpuvckza99                        0x000056428ab0a169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                maxNum = arr[j]\n            }\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmpf6oskdqp/tmpf6oskdqp.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba80d68cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba80d383b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba80d383988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba80d3827b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf6oskdqp                        0x000055afaa1db544 <unavailable> + 5444\n5    libc.so.6                          0x00002ba80d878460 __libc_start_main + 245\n6    tmpf6oskdqp                        0x000055afaa1db1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max = 0\n    for i in arr {\n        if i > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmp_xr75ah7/tmp_xr75ah7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3c52e4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3c52b46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3c52b46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3c52b457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_xr75ah7                        0x00005647fc4f4474 <unavailable> + 5236\n5    libc.so.6                          0x00002b3c5303b460 __libc_start_main + 245\n6    tmp_xr75ah7                        0x00005647fc4f40d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var maxIndex = 0\n    for i in 0..<arr.count {\n        if arr[i] > maxNum {\n            maxNum = arr[i]\n            maxIndex = i\n        }\n    }\n    return maxIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmpbrv8d9qf/tmpbrv8d9qf.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aca71354c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aca7104bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aca7104b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aca7104a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbrv8d9qf                        0x00005640a175d544 <unavailable> + 5444\n5    libc.so.6                          0x00002aca71540460 __libc_start_main + 245\n6    tmpbrv8d9qf                        0x00005640a175d1a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum*10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpoi97u1kx.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpoi97u1kx.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max = 0\n    var num = 0\n    for i in 0..<arr.count {\n        num = arr[i]\n        for j in 0..<arr.count {\n            if i != j {\n                num = num * 10 + arr[j]\n            }\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmpaeu47f2l/tmpaeu47f2l.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b318c3bfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b318c0b6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b318c0b6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b318c0b57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpaeu47f2l                        0x0000560d02d55544 <unavailable> + 5444\n5    libc.so.6                          0x00002b318c5ab460 __libc_start_main + 245\n6    tmpaeu47f2l                        0x0000560d02d551a9 <unavailable> + 4521\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in 0..<arr.count {\n            if arr[i] > arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "/tmp/tmps22yrvlr.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmps22yrvlr.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var arr = arr\n    arr.sort()\n    var result = \"\"\n    for i in 0..<arr.count {\n        result += String(arr[i])\n    }\n    return Int(result)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmpi8ug7oy_/tmpi8ug7oy_.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7de0318c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7de000fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7de000f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7de000e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpi8ug7oy_                        0x0000562b600db8b4 <unavailable> + 6324\n5    libc.so.6                          0x00002b7de0504460 __libc_start_main + 245\n6    tmpi8ug7oy_                        0x0000562b600db519 <unavailable> + 5401\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        let max = arr.max()!\n        result = result * 10 + max\n        arr.remove(at: arr.firstIndex(of: max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    arr.sort()\n    for i in arr.reversed() {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var max = 0\n    for i in arr {\n        if i > max {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmp_xr75ah7/tmp_xr75ah7.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3c52e4fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3c52b46b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3c52b46988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3c52b457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_xr75ah7                        0x00005647fc4f4474 <unavailable> + 5236\n5    libc.so.6                          0x00002b3c5303b460 __libc_start_main + 245\n6    tmp_xr75ah7                        0x00005647fc4f40d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var max = 0\n        var maxIndex = 0\n        for i in 0..<arr.count {\n            if arr[i] > max {\n                max = arr[i]\n                maxIndex = i\n            }\n        }\n        maxNum = maxNum * 10 + max\n        arr.remove(at: maxIndex)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var max = 0\n        var maxIndex = 0\n        for i in 0..<arr.count {\n            if arr[i] > max {\n                max = arr[i]\n                maxIndex = i\n            }\n        }\n        maxNum = maxNum * 10 + max\n        arr.remove(at: maxIndex)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        maxNum = max(maxNum, i)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpuvckza99/tmpuvckza99.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b542cfc4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b542ccbbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b542ccbb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b542ccba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvckza99                        0x000056428ab0a504 <unavailable> + 5380\n5    libc.so.6                          0x00002b542d1b0460 __libc_start_main + 245\n6    tmpuvckza99                        0x000056428ab0a169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for num in arr {\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmp4ax26cdy/tmp4ax26cdy.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3f5c605c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3f5c2fcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3f5c2fc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3f5c2fb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4ax26cdy                        0x000056013d61d474 <unavailable> + 5236\n5    libc.so.6                          0x00002b3f5c7f1460 __libc_start_main + 245\n6    tmp4ax26cdy                        0x000056013d61d0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] < arr[j] {\n                let temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for i in 0..<arr.count {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "/tmp/tmpuey8m4ns.swift:9:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[i] = arr[j]\n                ~~~^\n/tmp/tmpuey8m4ns.swift:10:20: error: cannot assign through subscript: 'arr' is a 'let' constant\n                arr[j] = temp\n                ~~~^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr.sorted(by: >)\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var arr = arr\n    arr.sort()\n    var maxNum = 0\n    var i = arr.count - 1\n    while i >= 0 {\n        maxNum = maxNum * 10 + arr[i]\n        i -= 1\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    arr.sort()\n    for i in arr.reversed() {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr\n    arr.sort()\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "tmp45zk0qhb/tmp45zk0qhb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b71a1844c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b71a153bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b71a153b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b71a153a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp45zk0qhb                        0x0000562502505594 <unavailable> + 5524\n5    libc.so.6                          0x00002b71a1a30460 __libc_start_main + 245\n6    tmp45zk0qhb                        0x00005625025051f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    var arr = arr.sorted(by: >)\n    for i in arr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    let sortedArr = arr.sorted(by: >)\n    for i in sortedArr {\n        maxNum = maxNum * 10 + i\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        maxNum = max(maxNum, i)\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpuvckza99/tmpuvckza99.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b542cfc4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b542ccbbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b542ccbb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b542ccba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvckza99                        0x000056428ab0a504 <unavailable> + 5380\n5    libc.so.6                          0x00002b542d1b0460 __libc_start_main + 245\n6    tmpuvckza99                        0x000056428ab0a169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var num = 0\n    for i in arr.sorted(by: >) {\n        num = num * 10 + i\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        var max = 0\n        var max_index = 0\n        for (index, value) in arr.enumerated() {\n            if value > max {\n                max = value\n                max_index = index\n            }\n        }\n        result = result * 10 + max\n        arr.remove(at: max_index)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var arr = arr\n    arr.sort()\n    var num = 0\n    for i in arr.reversed() {\n        num = num * 10 + i\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122470,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    let sortedArr = arr.sorted(by: >)\n    var result = \"\"\n    for num in sortedArr {\n        result += String(num)\n    }\n    return Int(result)!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1666122469,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var result = 0\n    var arr = arr\n    for _ in 0..<arr.count {\n        let max = arr.max()!\n        result = result * 10 + max\n        arr.remove(at: arr.firstIndex(of: max)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr: [Int]) -> Int {\n    var maxNum = 0\n    for i in arr {\n        if i > maxNum {\n            maxNum = i\n        }\n    }\n    return maxNum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Max_Num(arr: [1, 2, 3]) == 321)\nassert(find_Max_Num(arr: [4, 5, 6, 1]) == 6541)\nassert(find_Max_Num(arr: [1, 2, 3, 9]) == 9321)",
      "timestamp": 1665509961,
      "stdout": "",
      "stderr": "tmpqbgksybu/tmpqbgksybu.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b509003dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b508fd34b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b508fd34988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b508fd337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqbgksybu                        0x0000556fff69c474 <unavailable> + 5236\n5    libc.so.6                          0x00002b5090229460 __libc_start_main + 245\n6    tmpqbgksybu                        0x0000556fff69c0d9 <unavailable> + 4313\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}