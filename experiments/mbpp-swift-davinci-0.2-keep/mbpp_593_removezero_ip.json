{
  "name": "mbpp_593_removezero_ip",
  "language": "swift",
  "prompt": "\n/// Write a function to remove leading zeroes from an ip address.\nfunc removezero_ip(ip: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(removezero_ip(ip: \"216.08.094.196\") == \"216.8.94.196\")\nassert(removezero_ip(ip: \"12.01.024\") == \"12.1.24\")\nassert(removezero_ip(ip: \"216.08.094.0196\") == \"216.8.94.196\")",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    for i in 0...ip_arr.count-1 {\n        ip_arr[i] = String(Int(ip_arr[i])!)\n    }\n    return ip_arr.joined(separator: \".\")",
    "    var newip = \"\"\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \".\" {\n            newip += \".\"\n            i += 1\n        }\n        else if ip[i] == \"0\" {\n            i += 1\n        }\n        else {\n            break\n        }\n    }\n    newip += ip[i...]\n    return newip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var ip_str = \"\"\n    for i in 0..<ip_arr.count {\n        if ip_arr[i].hasPrefix(\"0\") {\n            ip_arr[i].remove(at: ip_arr[i].startIndex)\n        }\n        ip_str += ip_arr[i]\n        if i != ip_arr.count - 1 {\n            ip_str += \".\"\n        }\n    }\n    return ip_str",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var count = 0\n    for char in ip {\n        if char == \".\" {\n            result.append(char)\n            count = 0\n        } else if char == \"0\" && count == 0 {\n            continue\n        } else {\n            result.append(char)\n            count += 1\n        }\n    }\n    return result",
    "    var ip = ip\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \"0\" {\n            ip.remove(at: ip.index(ip.startIndex, offsetBy: i))\n        } else {\n            break\n        }\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    let ip_arr = ip.split(separator: \".\")\n    var result = \"\"\n    for i in ip_arr {\n        result += String(i.trimmingCharacters(in: CharacterSet.init(charactersIn: \"0\"))) + \".\"\n    }\n    return String(result.dropLast())",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var ip_str = \"\"\n    for i in 0..<ip_arr.count {\n        let str = ip_arr[i]\n        if str.hasPrefix(\"0\") {\n            ip_arr[i] = String(str.characters.dropFirst())\n        }\n        ip_str += ip_arr[i]\n        if i != ip_arr.count - 1 {\n            ip_str += \".\"\n        }\n    }\n    return ip_str",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    let ip_arr = ip.components(separatedBy: \".\")\n    var new_ip = \"\"\n    for i in 0..<ip_arr.count {\n        var num = Int(ip_arr[i])\n        while num! > 0 && num!%10 == 0 {\n            num = num!/10\n        }\n        new_ip += String(num!)\n        if i != ip_arr.count-1 {\n            new_ip += \".\"\n        }\n    }\n    return new_ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var count = 0\n    for char in ip {\n        if char == \".\" {\n            result.append(char)\n            count = 0\n        } else if char != \"0\" || count > 0 {\n            result.append(char)\n            count += 1\n        }\n    }\n    return result",
    "    let ip_arr = ip.components(separatedBy: \".\")\n    var new_ip = \"\"\n    for i in 0..<ip_arr.count {\n        var num = Int(ip_arr[i])\n        while num! > 0 && num! % 10 == 0 {\n            num = num! / 10\n        }\n        new_ip += String(num!)\n        if i != ip_arr.count - 1 {\n            new_ip += \".\"\n        }\n    }\n    return new_ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var newip = \"\"\n    var count = 0\n    for char in ip {\n        if char == \".\" {\n            newip.append(char)\n            count = 0\n        } else if char == \"0\" && count == 0 {\n            continue\n        } else {\n            newip.append(char)\n            count += 1\n        }\n    }\n    return newip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var result = \"\"\n    for i in 0..<ip_arr.count {\n        if ip_arr[i].first == \"0\" {\n            ip_arr[i] = String(ip_arr[i].dropFirst())\n        }\n        result += ip_arr[i]\n        if i != ip_arr.count - 1 {\n            result += \".\"\n        }\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    var i = 0\n    while i < ip.count {\n        if ip[ip.index(ip.startIndex, offsetBy: i)] == \"0\" {\n            ip.remove(at: ip.index(ip.startIndex, offsetBy: i))\n        } else {\n            break\n        }\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var newip = \"\"\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \"0\" {\n            i += 1\n        } else {\n            break\n        }\n    }\n    newip = String(ip[i...])\n    return newip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \".\" {\n            result += \".\"\n            i += 1\n        } else if ip[i] == \"0\" {\n            i += 1\n        } else {\n            break\n        }\n    }\n    result += ip[i..<ip.count]\n    return result",
    "    var result = \"\"\n    var count = 0\n    for char in ip.characters {\n        if char == \"0\" && count == 0 {\n            continue\n        }\n        result.append(char)\n        count += 1\n    }\n    return result",
    "    var result = \"\"\n    var i = 0\n    var j = 0\n    while i < ip.count {\n        if ip[i] == \".\" {\n            if j == 0 {\n                result += \".\"\n            }\n            j = 0\n        } else if ip[i] != \"0\" {\n            result += String(ip[i])\n            j += 1\n        }\n        i += 1\n    }\n    return result",
    "    var new_ip = \"\"\n    var count = 0\n    for char in ip {\n        if char == \".\" {\n            new_ip.append(char)\n            count = 0\n        } else if char == \"0\" && count == 0 {\n            continue\n        } else {\n            new_ip.append(char)\n            count += 1\n        }\n    }\n    return new_ip",
    "    var newip = \"\"\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \"0\" {\n            i += 1\n        } else {\n            break\n        }\n    }\n    newip = String(ip[i...])\n    return newip",
    "    var result = \"\"\n    var flag = false\n    for char in ip {\n        if char == \"0\" && !flag {\n            continue\n        } else {\n            flag = true\n            result.append(char)\n        }\n    }\n    return result",
    "    var ip_arr = ip.split(separator: \".\")\n    for i in 0..<ip_arr.count {\n        var num = Int(ip_arr[i])!\n        while num > 0 && num % 10 == 0 {\n            num /= 10\n        }\n        ip_arr[i] = String(num)\n    }\n    return ip_arr.joined(separator: \".\")",
    "    var ip = ip\n    var i = 0\n    while i < ip.count {\n        if ip[ip.index(ip.startIndex, offsetBy: i)] == \"0\" {\n            ip.remove(at: ip.index(ip.startIndex, offsetBy: i))\n        } else {\n            break\n        }\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_arr = ip.split(separator: \".\")\n    for i in 0..<ip_arr.count {\n        var num = Int(ip_arr[i])\n        while num != 0 && num! % 10 == 0 {\n            num = num! / 10\n        }\n        ip_arr[i] = String(num!)\n    }\n    return ip_arr.joined(separator: \".\")",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    for i in 0..<ip_arr.count {\n        if ip_arr[i].hasPrefix(\"0\") {\n            ip_arr[i].removeFirst()\n        }\n    }\n    return ip_arr.joined(separator: \".\")",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    var result = \"\"\n    var count = 0\n    for char in ip {\n        if char == \".\" {\n            result.append(char)\n            count = 0\n        } else if char == \"0\" && count == 0 {\n            continue\n        } else {\n            result.append(char)\n            count += 1\n        }\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    for i in 0..<ip_arr.count {\n        if ip_arr[i].hasPrefix(\"0\") {\n            ip_arr[i].remove(at: ip_arr[i].startIndex)\n        }\n    }\n    return ip_arr.joined(separator: \".\")",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var ip_str = \"\"\n    for i in 0..<ip_arr.count {\n        ip_arr[i] = String(Int(ip_arr[i])!)\n        ip_str += ip_arr[i]\n        if i != ip_arr.count - 1 {\n            ip_str += \".\"\n        }\n    }\n    return ip_str",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    for i in 0..<ip_arr.count {\n        if ip_arr[i].hasPrefix(\"0\") {\n            ip_arr[i].remove(at: ip_arr[i].startIndex)\n        }\n    }\n    return ip_arr.joined(separator: \".\")",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var count = 0\n    for char in ip {\n        if char == \".\" {\n            count = 0\n            result.append(char)\n        } else if char == \"0\" && count == 0 {\n            continue\n        } else {\n            count += 1\n            result.append(char)\n        }\n    }\n    return result",
    "    var ip = ip\n    var i = 0\n    while i < ip.count {\n        if ip[ip.index(ip.startIndex, offsetBy: i)] == \"0\" {\n            ip.remove(at: ip.index(ip.startIndex, offsetBy: i))\n        } else {\n            break\n        }\n    }\n    return ip",
    "    var result = \"\"\n    var count = 0\n    for char in ip {\n        if char == \".\" {\n            result += \".\"\n            count = 0\n        } else if count > 0 || char != \"0\" {\n            result += String(char)\n            count += 1\n        }\n    }\n    return result",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    for i in 0..<ip_arr.count {\n        if ip_arr[i].hasPrefix(\"0\") {\n            ip_arr[i].remove(at: ip_arr[i].startIndex)\n        }\n    }\n    return ip_arr.joined(separator: \".\")",
    "    var result = \"\"\n    var flag = false\n    for char in ip {\n        if char == \"0\" && flag == false {\n            continue\n        }\n        flag = true\n        result.append(char)\n    }\n    return result",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var ip_str = \"\"\n    for i in 0..<ip_arr.count {\n        var temp = ip_arr[i]\n        while temp.first == \"0\" {\n            temp.removeFirst()\n        }\n        ip_str += temp\n        if i != ip_arr.count - 1 {\n            ip_str += \".\"\n        }\n    }\n    return ip_str",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var new_ip = \"\"\n    for i in 0..<ip_arr.count {\n        if ip_arr[i].hasPrefix(\"0\") {\n            ip_arr[i].remove(at: ip_arr[i].startIndex)\n        }\n        new_ip += ip_arr[i]\n        if i != ip_arr.count - 1 {\n            new_ip += \".\"\n        }\n    }\n    return new_ip",
    "    var ip = ip\n    var i = 0\n    while i < ip.count {\n        if ip[ip.index(ip.startIndex, offsetBy: i)] == \"0\" {\n            ip.remove(at: ip.index(ip.startIndex, offsetBy: i))\n        } else {\n            break\n        }\n    }\n    return ip",
    "    var newip = \"\"\n    var count = 0\n    for char in ip {\n        if char == \"0\" && count == 0 {\n            count += 1\n        } else {\n            newip += String(char)\n            count = 0\n        }\n    }\n    return newip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var zero = true\n    for i in ip.characters {\n        if i == \".\" {\n            result.append(i)\n            zero = true\n        } else if i == \"0\" && zero {\n            continue\n        } else {\n            result.append(i)\n            zero = false\n        }\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var count = 0\n    for char in ip {\n        if char == \".\" {\n            count = 0\n            result.append(char)\n        } else if char != \"0\" || count > 0 {\n            result.append(char)\n            count += 1\n        }\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    for i in 0..<ip_arr.count {\n        if ip_arr[i].hasPrefix(\"0\") {\n            ip_arr[i].removeFirst()\n        }\n    }\n    return ip_arr.joined(separator: \".\")",
    "    var newip = \"\"\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \"0\" {\n            i += 1\n        } else {\n            break\n        }\n    }\n    while i < ip.count {\n        newip += String(ip[i])\n        i += 1\n    }\n    return newip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var i = 0\n    while i < ip_arr.count {\n        if ip_arr[i].hasPrefix(\"0\") {\n            ip_arr[i].remove(at: ip_arr[i].startIndex)\n        }\n        i += 1\n    }\n    return ip_arr.joined(separator: \".\")",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var i = 0\n    while i < ip.count {\n        let index = ip.index(ip.startIndex, offsetBy: i)\n        if ip[index] != \"0\" {\n            break\n        }\n        i += 1\n    }\n    result = String(ip.suffix(ip.count - i))\n    return result",
    "    var result = \"\"\n    var flag = false\n    for char in ip {\n        if char == \".\" {\n            result += \".\"\n            flag = false\n        } else if char != \"0\" {\n            result += String(char)\n            flag = true\n        } else if flag {\n            result += String(char)\n        }\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var newip = \"\"\n    var count = 0\n    for char in ip {\n        if char == \".\" {\n            newip.append(char)\n            count = 0\n        } else if char != \"0\" || count > 0 {\n            newip.append(char)\n            count += 1\n        }\n    }\n    return newip",
    "    var ip_array = ip.componentsSeparatedByString(\".\")\n    var new_ip = \"\"\n    for i in 0..<ip_array.count {\n        var temp = ip_array[i]\n        while temp.hasPrefix(\"0\") {\n            temp.removeAtIndex(temp.startIndex)\n        }\n        new_ip += temp\n        if i < ip_array.count - 1 {\n            new_ip += \".\"\n        }\n    }\n    return new_ip",
    "    var result = \"\"\n    var i = 0\n    while i < ip.count {\n        let index = ip.index(ip.startIndex, offsetBy: i)\n        if ip[index] == \"0\" {\n            i += 1\n        } else {\n            break\n        }\n    }\n    result = String(ip.suffix(ip.count - i))\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var ip_str = \"\"\n    for i in 0..<ip_arr.count {\n        var temp = ip_arr[i]\n        while temp.hasPrefix(\"0\") && temp.count > 1 {\n            temp.remove(at: temp.startIndex)\n        }\n        ip_str += temp\n        if i != ip_arr.count - 1 {\n            ip_str += \".\"\n        }\n    }\n    return ip_str",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") && ip.count > 1 {\n        ip.removeFirst()\n    }\n    return ip",
    "    let ip_arr = ip.components(separatedBy: \".\")\n    var result = \"\"\n    for i in 0..<ip_arr.count {\n        var temp = ip_arr[i]\n        while temp.first == \"0\" {\n            temp.removeFirst()\n        }\n        result += temp\n        if i != ip_arr.count - 1 {\n            result += \".\"\n        }\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") && ip.count > 1 {\n        ip.removeFirst()\n    }\n    return ip",
    "    let ip_arr = ip.components(separatedBy: \".\")\n    var result = \"\"\n    for i in ip_arr {\n        var temp = i\n        while temp.first == \"0\" {\n            temp.removeFirst()\n        }\n        result += temp + \".\"\n    }\n    result.removeLast()\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var i = 0\n    var count = 0\n    while i < ip.count {\n        let index = ip.index(ip.startIndex, offsetBy: i)\n        if ip[index] == \".\" {\n            result.append(\".\")\n            count = 0\n        } else if ip[index] == \"0\" {\n            count += 1\n        } else {\n            result.append(String(ip[index]))\n            count = 0\n        }\n        i += 1\n    }\n    return result",
    "    var newip = \"\"\n    var count = 0\n    for i in ip {\n        if i == \".\" {\n            newip.append(i)\n            count = 0\n        } else if i == \"0\" && count == 0 {\n            continue\n        } else {\n            newip.append(i)\n            count += 1\n        }\n    }\n    return newip",
    "    var result = \"\"\n    var count = 0\n    for i in ip.characters {\n        if i == \".\" {\n            result.append(i)\n            count = 0\n        } else if i != \"0\" || count != 0 {\n            result.append(i)\n            count += 1\n        }\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var count = 0\n    for char in ip.characters {\n        if char == \".\" {\n            result += \".\"\n            count = 0\n        } else if char == \"0\" && count == 0 {\n            continue\n        } else {\n            result += String(char)\n            count += 1\n        }\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var ip_str = \"\"\n    for i in 0..<ip_arr.count {\n        if ip_arr[i].hasPrefix(\"0\") {\n            ip_arr[i].removeFirst()\n        }\n        ip_str += ip_arr[i]\n        if i != ip_arr.count - 1 {\n            ip_str += \".\"\n        }\n    }\n    return ip_str",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var i = 0\n    while i < ip.count {\n        let index = ip.index(ip.startIndex, offsetBy: i)\n        let c = ip[index]\n        if c == \".\" {\n            result.append(c)\n            i += 1\n        } else if c == \"0\" {\n            i += 1\n        } else {\n            result.append(ip[index...])\n            break\n        }\n    }\n    return result",
    "    var ip = ip\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \"0\" {\n            ip.remove(at: ip.index(ip.startIndex, offsetBy: i))\n        } else {\n            break\n        }\n    }\n    return ip",
    "    var result = \"\"\n    var flag = false\n    for char in ip {\n        if char == \"0\" && !flag {\n            continue\n        }\n        flag = true\n        result.append(char)\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var isZero = true\n    for char in ip.characters {\n        if char == \".\" {\n            result += \".\"\n            isZero = true\n        } else if char == \"0\" && isZero {\n            continue\n        } else {\n            result += String(char)\n            isZero = false\n        }\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var count = 0\n    for char in ip.characters {\n        if char == \".\" {\n            result.append(char)\n            count = 0\n        } else if char == \"0\" && count == 0 {\n            continue\n        } else {\n            result.append(char)\n            count += 1\n        }\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var i = 0\n    var j = 0\n    var count = 0\n    while i < ip.count {\n        if ip[i] == \".\" {\n            if count == 0 {\n                result.append(\".\")\n                j += 1\n            } else {\n                result.append(String(count))\n                result.append(\".\")\n                j += 2\n            }\n            count = 0\n        } else {\n            count += 1\n        }\n        i += 1\n    }\n    if count == 0 {\n        result.append(\".\")\n        j += 1\n    } else {\n        result.append(String(count))\n        j += 2\n    }\n    return String(result.prefix(j))",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var ip_str = \"\"\n    for i in 0..<ip_arr.count {\n        ip_str += String(Int(ip_arr[i])!)\n        if i != ip_arr.count - 1 {\n            ip_str += \".\"\n        }\n    }\n    return ip_str",
    "    var newip = \"\"\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \".\" {\n            newip.append(ip[i])\n            i += 1\n            continue\n        }\n        if ip[i] == \"0\" {\n            i += 1\n            continue\n        }\n        newip.append(ip[i])\n        i += 1\n    }\n    return newip",
    "    var ip = ip\n    var index = 0\n    for i in ip.characters {\n        if i == \".\" {\n            index += 1\n        }\n        if index == 3 {\n            break\n        }\n    }\n    var ip_array = ip.characters.split(\".\").map(String.init)\n    var ip_array_new = [String]()\n    for i in 0..<ip_array.count {\n        if i == index {\n            ip_array_new.append(ip_array[i])\n        } else {\n            ip_array_new.append(ip_array[i].stringByTrimmingCharactersInSet(NSCharacterSet.decimalDigitCharacterSet().invertedSet))\n        }\n    }\n    ip = ip_array_new.joinWithSeparator(\".\")\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    var newip = \"\"\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \".\" {\n            newip += \".\"\n            i += 1\n        } else if ip[i] == \"0\" {\n            i += 1\n        } else {\n            break\n        }\n    }\n    newip += ip[i..<ip.count]\n    return newip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var ip_str = \"\"\n    for i in 0..<ip_arr.count {\n        var ip_num = Int(ip_arr[i])\n        while ip_num! > 0 && ip_num! % 10 == 0 {\n            ip_num = ip_num! / 10\n        }\n        ip_str += String(ip_num!)\n        if i != ip_arr.count - 1 {\n            ip_str += \".\"\n        }\n    }\n    return ip_str",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    for i in 0..<ip_arr.count {\n        if ip_arr[i].hasPrefix(\"0\") {\n            ip_arr[i].remove(at: ip_arr[i].startIndex)\n        }\n    }\n    return ip_arr.joined(separator: \".\")",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_addr = ip\n    var i = 0\n    while i < ip_addr.count {\n        if ip_addr[i] == \".\" {\n            i += 1\n            continue\n        }\n        if ip_addr[i] == \"0\" {\n            ip_addr.remove(at: i)\n        } else {\n            break\n        }\n    }\n    return ip_addr",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \"0\" {\n            ip.remove(at: ip.index(ip.startIndex, offsetBy: i))\n        } else {\n            break\n        }\n    }\n    return ip",
    "    var new_ip = \"\"\n    var flag = false\n    for char in ip {\n        if char == \".\" {\n            new_ip.append(char)\n            flag = false\n        } else if char == \"0\" && flag == false {\n            continue\n        } else {\n            new_ip.append(char)\n            flag = true\n        }\n    }\n    return new_ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    let ip_arr = ip.split(separator: \".\")\n    var result = \"\"\n    for i in 0..<ip_arr.count {\n        let ip_str = String(ip_arr[i])\n        let ip_int = Int(ip_str)\n        if ip_int == 0 {\n            result += \"0\"\n        } else {\n            result += ip_str\n        }\n        if i != ip_arr.count - 1 {\n            result += \".\"\n        }\n    }\n    return result",
    "    var result = \"\"\n    var count = 0\n    for char in ip {\n        if char == \".\" {\n            result += \".\"\n            count = 0\n        } else if char != \"0\" || count > 0 {\n            result += String(char)\n            count += 1\n        }\n    }\n    return result",
    "    var ip_arr = ip.split(separator: \".\")\n    var ip_str = \"\"\n    for i in 0..<ip_arr.count {\n        let str = String(ip_arr[i])\n        if str.count > 1 {\n            ip_str = ip_str + str + \".\"\n        } else {\n            ip_str = ip_str + \"0\" + str + \".\"\n        }\n    }\n    return String(ip_str.dropLast())",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var new_ip = \"\"\n    for i in 0..<ip_arr.count {\n        var num = Int(ip_arr[i])\n        while num != 0 && num % 10 == 0 {\n            num = num / 10\n        }\n        new_ip += String(num)\n        if i != ip_arr.count - 1 {\n            new_ip += \".\"\n        }\n    }\n    return new_ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var count = 0\n    for char in ip.characters {\n        if char == \".\" {\n            result.append(char)\n            count = 0\n        } else if char != \"0\" || count > 0 {\n            result.append(char)\n            count += 1\n        }\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var temp = \"\"\n    for char in ip {\n        if char == \".\" {\n            if temp.count > 0 {\n                result += temp\n            }\n            result += \".\"\n            temp = \"\"\n        } else if char != \"0\" {\n            temp += String(char)\n        }\n    }\n    if temp.count > 0 {\n        result += temp\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var newip = \"\"\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \"0\" {\n            i += 1\n        } else {\n            break\n        }\n    }\n    newip = String(ip[i...])\n    return newip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var count = 0\n    for char in ip.characters {\n        if char == \".\" {\n            result += \".\"\n            count = 0\n        } else if char == \"0\" && count == 0 {\n            continue\n        } else {\n            count += 1\n            result += String(char)\n        }\n    }\n    return result",
    "    var newip = ip\n    var i = 0\n    while i < newip.count {\n        if newip[i] == \"0\" {\n            newip.remove(at: newip.index(newip.startIndex, offsetBy: i))\n        } else {\n            break\n        }\n    }\n    return newip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var ip_str = \"\"\n    for i in 0..<ip_arr.count {\n        var str = ip_arr[i]\n        while str.first == \"0\" {\n            str.removeFirst()\n        }\n        ip_str += str\n        if i != ip_arr.count - 1 {\n            ip_str += \".\"\n        }\n    }\n    return ip_str",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var ip_str = \"\"\n    for i in 0..<ip_arr.count {\n        if ip_arr[i].characters.count > 1 {\n            if ip_arr[i].characters.first == \"0\" {\n                ip_arr[i].remove(at: ip_arr[i].startIndex)\n            }\n        }\n        ip_str += ip_arr[i]\n        if i != ip_arr.count-1 {\n            ip_str += \".\"\n        }\n    }\n    return ip_str",
    "    var ip_arr = ip.split(separator: \".\")\n    var ip_str = \"\"\n    for i in 0..<ip_arr.count {\n        var ip_num = Int(ip_arr[i])!\n        while ip_num > 0 && ip_num % 10 == 0 {\n            ip_num /= 10\n        }\n        ip_str += String(ip_num)\n        if i != ip_arr.count - 1 {\n            ip_str += \".\"\n        }\n    }\n    return ip_str",
    "    var new_ip = \"\"\n    var count = 0\n    for char in ip {\n        if char == \"0\" && count == 0 {\n            continue\n        } else {\n            new_ip.append(char)\n            count += 1\n        }\n    }\n    return new_ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var newip = \"\"\n    var count = 0\n    for i in ip {\n        if i == \"0\" && count == 0 {\n            continue\n        }\n        newip.append(i)\n        count += 1\n    }\n    return newip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var prev = false\n    for char in ip {\n        if char == \"0\" && !prev {\n            continue\n        }\n        prev = true\n        result.append(char)\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    var ip = ip\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \"0\" {\n            ip.remove(at: ip.index(ip.startIndex, offsetBy: i))\n        } else {\n            break\n        }\n    }\n    return ip",
    "    var ip = ip\n    var i = 0\n    while i < ip.count {\n        if ip[ip.index(ip.startIndex, offsetBy: i)] == \"0\" {\n            ip.remove(at: ip.index(ip.startIndex, offsetBy: i))\n        } else {\n            break\n        }\n    }\n    return ip",
    "    var ip_arr = ip.split(separator: \".\")\n    for i in 0..<ip_arr.count {\n        let num = Int(ip_arr[i])\n        if num == 0 {\n            ip_arr[i] = \"0\"\n        } else {\n            ip_arr[i] = String(num!)\n        }\n    }\n    return ip_arr.joined(separator: \".\")",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var count = 0\n    for char in ip {\n        if char == \".\" {\n            result += \".\"\n            count = 0\n        } else if char != \"0\" || count > 0 {\n            result += String(char)\n            count += 1\n        }\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var newip = \"\"\n    var i = 0\n    var count = 0\n    while i < ip.count {\n        if ip[i] == \"0\" {\n            count += 1\n        } else {\n            break\n        }\n        i += 1\n    }\n    newip = String(ip.suffix(ip.count - count))\n    return newip",
    "    var ip = ip\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \".\" {\n            i += 1\n            continue\n        }\n        if ip[i] == \"0\" {\n            ip.remove(at: ip.index(ip.startIndex, offsetBy: i))\n            continue\n        }\n        break\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var i = 0\n    var j = 0\n    while i < ip.count {\n        if ip[i] == \".\" {\n            if j == 0 {\n                result += \"0\"\n            }\n            result += \".\"\n            j = 0\n        } else {\n            result += ip[i]\n            j += 1\n        }\n        i += 1\n    }\n    return result",
    "    var result = \"\"\n    var flag = false\n    for char in ip {\n        if char == \".\" {\n            result.append(char)\n            flag = false\n        } else if char == \"0\" && !flag {\n            continue\n        } else {\n            result.append(char)\n            flag = true\n        }\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    for i in 0..<ip_arr.count {\n        if ip_arr[i].hasPrefix(\"0\") {\n            ip_arr[i].remove(at: ip_arr[i].startIndex)\n        }\n    }\n    return ip_arr.joined(separator: \".\")",
    "    var result = \"\"\n    var count = 0\n    for char in ip {\n        if char == \".\" {\n            result.append(char)\n            count = 0\n        } else if char == \"0\" && count == 0 {\n            continue\n        } else {\n            result.append(char)\n            count += 1\n        }\n    }\n    return result",
    "    var newip = \"\"\n    var i = 0\n    while i < ip.count {\n        if ip[ip.index(ip.startIndex, offsetBy: i)] == \".\" {\n            newip.append(\".\")\n            i += 1\n        } else if ip[ip.index(ip.startIndex, offsetBy: i)] == \"0\" {\n            i += 1\n        } else {\n            break\n        }\n    }\n    newip.append(ip[ip.index(ip.startIndex, offsetBy: i)...])\n    return newip",
    "    let ip_arr = ip.split(separator: \".\")\n    var result = \"\"\n    for i in ip_arr {\n        var temp = i\n        while temp.first == \"0\" {\n            temp.removeFirst()\n        }\n        result += temp\n        result += \".\"\n    }\n    result.removeLast()\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var i = 0\n    while i < ip.count {\n        let index = ip.index(ip.startIndex, offsetBy: i)\n        if ip[index] != \"0\" {\n            break\n        }\n        i += 1\n    }\n    result = String(ip[ip.index(ip.startIndex, offsetBy: i)...])\n    return result",
    "    var result = \"\"\n    var flag = false\n    for char in ip {\n        if char == \"0\" && !flag {\n            continue\n        }\n        flag = true\n        result.append(char)\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var result = \"\"\n    var count = 0\n    for char in ip {\n        if char == \".\" {\n            result.append(char)\n            count = 0\n        } else if char == \"0\" && count == 0 {\n            continue\n        } else {\n            result.append(char)\n            count += 1\n        }\n    }\n    return result",
    "    var newip = \"\"\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \"0\" {\n            i += 1\n        } else {\n            break\n        }\n    }\n    newip = String(ip[i...])\n    return newip",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var ip_str = \"\"\n    for i in 0..<ip_arr.count {\n        var ip_num = Int(ip_arr[i])\n        while ip_num! % 10 == 0 {\n            ip_num = ip_num! / 10\n        }\n        ip_str += String(ip_num!)\n        if i != ip_arr.count - 1 {\n            ip_str += \".\"\n        }\n    }\n    return ip_str",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var new_ip = \"\"\n    for i in 0..<ip_arr.count {\n        let num = Int(ip_arr[i])!\n        if num == 0 {\n            new_ip += \"0\"\n        } else {\n            new_ip += \"\\(num)\"\n        }\n        if i != ip_arr.count - 1 {\n            new_ip += \".\"\n        }\n    }\n    return new_ip",
    "    var ip = ip\n    var index = 0\n    while index < ip.count {\n        if ip[ip.index(ip.startIndex, offsetBy: index)] == \".\" {\n            index += 1\n            continue\n        }\n        if ip[ip.index(ip.startIndex, offsetBy: index)] == \"0\" {\n            ip.remove(at: ip.index(ip.startIndex, offsetBy: index))\n        } else {\n            break\n        }\n    }\n    return ip",
    "    var result = \"\"\n    var count = 0\n    for char in ip {\n        if char == \".\" {\n            result += \".\"\n            count = 0\n        } else if char != \"0\" || count > 0 {\n            result += String(char)\n            count += 1\n        }\n    }\n    return result",
    "    var ip_arr = ip.components(separatedBy: \".\")\n    var new_ip = \"\"\n    for i in 0..<ip_arr.count {\n        var temp = ip_arr[i]\n        while temp.first == \"0\" {\n            temp.removeFirst()\n        }\n        new_ip += temp\n        if i != ip_arr.count - 1 {\n            new_ip += \".\"\n        }\n    }\n    return new_ip",
    "    var result = \"\"\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \".\" {\n            result.append(ip[i])\n            i += 1\n        } else if ip[i] == \"0\" {\n            i += 1\n        } else {\n            break\n        }\n    }\n    result.append(ip[i...])\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.remove(at: ip.startIndex)\n    }\n    return ip",
    "    var ip = ip\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \"0\" {\n            ip.remove(at: ip.index(ip.startIndex, offsetBy: i))\n        } else {\n            break\n        }\n    }\n    return ip",
    "    var result = \"\"\n    var count = 0\n    for char in ip.characters {\n        if char == \".\" {\n            result.append(char)\n            count = 0\n        } else if char == \"0\" && count == 0 {\n            continue\n        } else {\n            result.append(char)\n            count += 1\n        }\n    }\n    return result",
    "    var result = \"\"\n    var i = 0\n    while i < ip.count {\n        if ip[i] == \"0\" {\n            i += 1\n        } else {\n            break\n        }\n    }\n    while i < ip.count {\n        result.append(ip[i])\n        i += 1\n    }\n    return result",
    "    var ip = ip\n    while ip.hasPrefix(\"0\") {\n        ip.removeFirst()\n    }\n    return ip",
    "    var ip = ip\n    let ip_arr = ip.components(separatedBy: \".\")\n    for i in 0..<ip_arr.count {\n        if ip_arr[i].hasPrefix(\"0\") {\n            ip_arr[i].remove(at: ip_arr[i].startIndex)\n        }\n    }\n    ip = ip_arr.joined(separator: \".\")\n    return ip"
  ]
}