{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "swift",
  "prompt": "\n/// Write a function to remove characters from the first string which are present in the second string.\nfunc remove_dirty_chars(string: String, second_string: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_dirty_chars(string: \"probasscurve\", second_string: \"pros\") == \"bacuve\")\nassert(remove_dirty_chars(string: \"digitalindia\", second_string: \"talent\") == \"digiidi\")\nassert(remove_dirty_chars(string: \"exoticmiles\", second_string: \"toxic\") == \"emles\")",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result",
    "    var new_string = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            new_string.append(char)\n        }\n    }\n    return new_string",
    "    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result",
    "    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result",
    "    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result",
    "    var result = \"\"\n    var dirty_chars = [Character]()\n    for char in second_string {\n        dirty_chars.append(char)\n    }\n    for char in string {\n        if !dirty_chars.contains(char) {\n            result.append(char)\n        }\n    }\n    return result",
    "    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result",
    "    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result",
    "    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result",
    "    var result = \"\"\n    var dirty_chars = [Character]()\n    \n    for char in second_string {\n        dirty_chars.append(char)\n    }\n    \n    for char in string {\n        if !dirty_chars.contains(char) {\n            result.append(char)\n        }\n    }\n    \n    return result",
    "    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result",
    "    var string_array = Array(string)\n    var second_string_array = Array(second_string)\n    var result = \"\"\n    for i in 0..<string_array.count {\n        var found = false\n        for j in 0..<second_string_array.count {\n            if string_array[i] == second_string_array[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result.append(string_array[i])\n        }\n    }\n    return result",
    "    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result",
    "    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result",
    "    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result",
    "    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result",
    "    var result = \"\"\n    let second_string_set = Set(second_string)\n    for char in string {\n        if !second_string_set.contains(char) {\n            result.append(char)\n        }\n    }\n    return result",
    "    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result",
    "    var result = string\n    for char in second_string {\n        result = result.replacingOccurrences(of: String(char), with: \"\")\n    }\n    return result",
    "    var result = \"\"\n    for char in string {\n        if !second_string.contains(char) {\n            result.append(char)\n        }\n    }\n    return result"
  ]
}